{"version":3,"sources":["webpack:///js/pages/dev-components.4d7d2aea94dffce6617f.js","webpack:///./static/src/phone/js/components/g-slide.js","webpack:///./static/src/phone/js/plugs/touch-slide.js","webpack:///./static/src/phone/js/components/g-navigation.js","webpack:///./static/src/phone/js/components/g-loading.js","webpack:///./static/src/phone/js/components/g-mask.js","webpack:///./static/src/phone/js/components/g-super-type-es6.js","webpack:///./static/src/phone/js/pages/dev-components.js","webpack:///./static/src/phone/js/components/g-dialog.js","webpack:///./static/src/phone/js/components/g-pagination.js","webpack:///./static/src/phone/js/components/g-no-data.js","webpack:///./static/src/phone/js/components/g-sub-type.js","webpack:///./static/src/phone/js/components/g-sub-type-es6.js","webpack:///./static/src/phone/js/components/g-go-top.js","webpack:///./static/src/phone/js/components/g-radio-switch.js","webpack:///./static/src/phone/js/components/g-table.js"],"names":["webpackJsonp","module","exports","__webpack_require__","tools","applications","SuperType","TouchSlide","SubType","constructorInherit","superType","parameter","callback","startFun","endFun","config","isShowHref","touchSlide","slideCell","mainCell","titCell","effect","autoPlay","delayTime","interTime","console","log","defaultIndex","switchLoadClass","switchLoad","data","items","img","width","height","src","href","prototype","moduleDomCreate","this","moduleDom","createElement","style","opts","moduleDomStyle","customAttribute","moduleDomCustomAttribute","attribute","className","innerHTML","renderHeader","renderBody","self","html","forEach","v","i","power","wrap","index","a","titOnClassName","autoPage","prevCell","nextCell","pageStateCell","pnLoop","Object","toString","call","slice","toLowerCase","document","querySelector","nodeType","obj","str","parEle","split","par","retn","attr","hasOwnProperty","length","push","_retn","r","getElementById","replace","tag","getElementsByTagName","j","cln","search","RegExp","tag2","k","addClass","ele","removeClass","prevBtn","nextBtn","pageState","conBox","twCell","scrollY","conBoxSize","children","navObj","navObjSize","parseInt","loop","oldIndex","inter","timeout","endTimeout","startX","startY","distX","distY","isTouchPad","test","navigator","appVersion","hasTouch","window","touchStart","touchMove","touchEnd","slideW","parentNode","clientWidth","tempSize","x","appendChild","cloneNode","insertBefore","el","tmp","_el","replaceChild","cssText","y","doStartFun","doEndFun","orientationChange","translate","addEventListener","dist","speed","webkitTransitionDuration","MozTransitionDuration","msTransitionDuration","OTransitionDuration","transitionDuration","webkitTransform","msTransform","MozTransform","OTransform","doPlay","isTouch","setTimeout","nowIndex","allImage","querySelectorAll","changeImagesSrc","imgSwitchSrc","getAttribute","tagName","backgroundImage","setInterval","z","clearTimeout","tStart","e","undefined","point","touches","pageX","pageY","tMove","tEnd","scale","Math","abs","preventDefault","clearInterval","removeEventListener","route","icon","text","isShowMark","markHtml","status","positionMethod","positionLocation","moduleDomIsShow","moduleDomHtml","moduleDomClass","click","moduleDomRenderBefore","wrapDom","getComputedStyle","position","isTransparent","ev","stopPropagation","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","json","extend","defaults","moduleDomCreateBefore","moduleDomCreateAfter","moduleDomRenderAfter","moduleDomRemoveBefore","moduleDomRemoveAfter","moduleDomShowBefore","moduleDomShowAfter","moduleDomHideBefore","moduleDomHideAfter","wrapDomGetBefore","wrapDomGetAfter","wrapDomRemoveBefore","wrapDomRemoveAfter","moduleDomRenderMethod","method","child","moduleDomIsClearTimer","inherits","moduleDomTimer","value","render","moduleDomRemove","wrapDomGet","moduleDomRender","renderMethod","dom","getDomArray","element","removeChild","moduleDomClearTimer","keys","outerHTML","whenScrollBottom","success","moduleDomShow","Dialog","confirm","alert","content","cancel","close","type","Loading","init","Mask","mask","moduleDomHide","Table","header","body","footer","then","require","Star","bind","catch","oe","isShowMask","time","isShowIcon","isShowHeader","headerContent","isShowBody","bodyContent","isShowFooter","footerContent","isShowClose","closeContent","isShowConfirm","confirmContent","isShowCancel","cancelContent","isCustom","customContent","isHandHide","renderAlert","renderConfirm","htmlIcon","htmlHeader","htmlBody","bodyClass","htmlFooter","htmlCancel","htmlConfirm","htmlClose","hide","defaultData","nowCount","allCount","nowPage","allPage","ceil","prevPage","nextPage","selectPage","renderOption","prevDom","nextDom","btnInactiveClass","selectDom","prevPageDisable","nextPageDisable","classList","contains","oldChecked","previousElementSibling","selected","nextPageEnable","nextElementSibling","prevPageEnable","add","remove","button","buttonIconHtml","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_SuperType","_this","getPrototypeOf","showHeight","scrollTo","to","documentElement","scrollTop","isHand","txt","on","off","moduleDomActiveClass","isOn","moduleDomCreateHeader","moduleDomCreateBody","moduleDomCreateFooter","v0","row","v1"],"mappings":"AAAAA,cAAc,IACP,CACA,CACA,CACA,CAED,SAAUC,EAAQC,EAASC,GAEjC,YCRA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GACpBI,EAAaJ,EAAQ,GAGrBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,UACIC,SAAU,aAEVC,OAAQ,cAIZC,QACIC,YAAY,EAEZC,YACIC,UAAW,GACXC,SAAU,gBACVC,QAAS,iCACTC,OAAQ,WACRC,UAAU,EACVC,UAAW,IACXC,UAAW,IACXX,SAAU,WACNY,QAAQC,IAAI,8BAEhBZ,OAAQ,WACJW,QAAQC,IAAI,8BAEhBC,aAAc,EACdC,gBAAiB,YACjBC,WAAY,aAIpBC,MACIC,QAEQC,KACIC,MAAO,EACPC,OAAQ,EACRC,IAAK,yEAETC,KAAM,QAQ1B5B,GAAQ6B,UAAUC,gBAAkB,WAChCC,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,UACXC,+BACMV,KAAKW,eADX,qBAEMX,KAAKY,aAFX,qBAQZ3C,EAAQ6B,UAAUa,aAAe,WAC7B,GAAME,GAAOb,KACTc,EAAO,GACLvB,EAAOsB,EAAKT,KAAKb,KACnBkB,EAAY,EAOhB,OANAlB,GAAKC,MAAMuB,QAAQ,SAAUC,EAAGC,GACxBA,IAAMJ,EAAKT,KAAK5B,OAAOE,WAAWU,eAClCqB,EAAY,MAEhBK,gCAAqCL,EAArC,aAEJ,+BAAsCK,EAAtC,UAGJ7C,EAAQ6B,UAAUc,WAAa,WAC3B,GAAMC,GAAOb,KACTc,EAAO,EASX,OARaD,GAAKT,KAAKb,KAClBC,MAAMuB,QAAQ,SAAUC,GACrBH,EAAKT,KAAK5B,OAAOC,WACjBqC,gBAAoBE,EAAEnB,MAAQ,gBAA9B,8CAA0FmB,EAAEvB,IAAIG,IAAhG,SAEAkB,kDAAuDE,EAAEvB,IAAIG,IAA7D,WAGR,6BAAoCkB,EAApC,UAIJ7C,EAAQ6B,UAAUoB,MAAQ,WACtB,GAAML,GAAOb,KACP3B,EAAWwC,EAAKT,KAAK/B,SACrBG,EAASqC,EAAKT,KAAK5B,OACnBE,EAAaF,EAAOE,UAC1BA,GAAWC,UAAYkC,EAAKT,KAAKe,KACjCzC,EAAWJ,SAAW,SAAU2C,GAa5B5C,EAASC,UAAUuC,KAAMA,EAAMO,MAAOH,KAE1CvC,EAAWH,OAAS,SAAU0C,GAC1B5C,EAASE,QAAQsC,KAAMA,EAAMO,MAAOH,KAExCjD,EAAW6C,EAAKT,KAAK5B,OAAOE,aAGhChB,EAAOC,QAAUM,GDQX,SAAUP,EAAQC,EAASC,GAEjC;;;;;;;;;;;;AEnHA,GAAII,GAAa,SAAUqD,GACvBA,EAAIA,KACJ,IAAIjB,IACAzB,UAAW0C,EAAE1C,WAAa,cAC1BE,QAASwC,EAAExC,SAAW,SACtBD,SAAUyC,EAAEzC,UAAY,MACxBE,OAAQuC,EAAEvC,QAAU,OACpBC,SAAUsC,EAAEtC,WAAY,EACxBC,UAAWqC,EAAErC,WAAa,IAC1BC,UAAWoC,EAAEpC,WAAa,KAC1BG,aAAciC,EAAEjC,cAAgB,EAChCkC,eAAgBD,EAAEC,gBAAkB,KACpCC,SAAUF,EAAEE,WAAY,EACxBC,SAAUH,EAAEG,UAAY,QACxBC,SAAUJ,EAAEI,UAAY,QACxBC,cAAeL,EAAEK,eAAiB,aAClCC,OAAoB,cAAZN,EAAEM,QAAgCN,EAAEM,OAC5CrD,SAAU+C,EAAE/C,UAAY,KACxBC,OAAQ8C,EAAE9C,QAAU,KACpBc,gBAAiBgC,EAAEhC,iBAAmB,YACtCC,WAAY+B,EAAE/B,YAAc,YAE5BX,EAAY,IAgBhB,IAdiF,UAA7EiD,OAAO9B,UAAU+B,SAASC,KAAK1B,EAAKzB,WAAWoD,MAAM,GAAI,GAAGC,gBAC5DrD,EAAYsD,SAASC,cAAc9B,EAAKzB,YAGb,GAA3ByB,EAAKzB,UAAUwD,WACfxD,EAAYyB,EAAKzB,WAM4D,kBAA7EiD,OAAO9B,UAAU+B,SAASC,KAAK1B,EAAKzB,WAAWoD,MAAM,GAAI,GAAGC,eAAkH,YAA7EJ,OAAO9B,UAAU+B,SAASC,KAAK1B,EAAKzB,WAAWoD,MAAM,GAAI,GAAGC,gBAC7JrD,EAAYyB,EAAKzB,UAAU,IAE1BA,EAAL,CAIA,GAAIyD,GAAM,SAAUC,EAAKC,GACrBD,EAAMA,EAAIE,MAAM,IAChB,IAAIC,KACJF,GAASA,GAAUL,QACnB,IAAIQ,IAAQH,EACZ,KAAK,GAAII,KAAQL,GACTA,EAAIM,eAAeD,IACK,GAApBL,EAAIK,GAAME,QACVJ,EAAIK,KAAKR,EAAIK,GAKzB,KAAK,GAAIzB,KAAKuB,GACV,GAAIA,EAAIG,eAAe1B,GAAI,CACvB,GAAmB,GAAfwB,EAAKG,OACL,OAAO,CAEX,IAAIE,KACJ,KAAK,GAAIC,KAAKN,GACV,GAAIA,EAAKE,eAAeI,GACpB,GAAiB,KAAbP,EAAIvB,GAAG,GACP6B,EAAMD,KAAKZ,SAASe,eAAeR,EAAIvB,GAAGgC,QAAQ,IAAK,UACpD,IAAiB,KAAbT,EAAIvB,GAAG,GAEd,IAAK,GADDiC,GAAMT,EAAKM,GAAGI,qBAAqB,KAC9BC,EAAI,EAAGA,EAAIF,EAAIN,OAAQQ,IAAK,CACjC,GAAIC,GAAMH,EAAIE,GAAG3C,SACb4C,IAAOA,EAAIC,SAA8E,GAApED,EAAIC,OAAO,GAAIC,QAAO,MAAQf,EAAIvB,GAAGgC,QAAQ,IAAK,IAAM,SAC7EH,EAAMD,KAAKK,EAAIE,QAKvB,KAAK,GADDI,GAAOf,EAAKM,GAAGI,qBAAqBX,EAAIvB,IACnCwC,EAAI,EAAGA,EAAID,EAAKZ,OAAQa,IAC7BX,EAAMD,KAAKW,EAAKC,GAKhChB,GAAOK,EAGf,MAAsB,IAAfL,EAAKG,QAAeH,EAAK,IAAMH,GAAiBG,GAcvDiB,EAAW,SAAUC,EAAKlD,IACrBkD,IAAQlD,GAAckD,EAAIlD,YAA6E,GAAhEkD,EAAIlD,UAAU6C,OAAO,GAAIC,QAAO,MAAQ9C,EAAY,UAGhGkD,EAAIlD,YAAckD,EAAIlD,UAAY,IAAM,IAAMA,IAE9CmD,EAAc,SAAUD,EAAKlD,IACxBkD,IAAQlD,GAAckD,EAAIlD,YAA6E,GAAhEkD,EAAIlD,UAAU6C,OAAO,GAAIC,QAAO,MAAQ9C,EAAY,UAGhGkD,EAAIlD,UAAYkD,EAAIlD,UAAUwC,QAAQ,GAAIM,QAAO,UAAY9C,EAAY,MAAO,KAAM,MAGtF3B,EAASsB,EAAKtB,OACd+E,EAAUzB,EAAIhC,EAAKoB,SAAU7C,GAAW,GACxCmF,EAAU1B,EAAIhC,EAAKqB,SAAU9C,GAAW,GACxCoF,EAAY3B,EAAIhC,EAAKsB,eAAe,GACpCsC,EAAS5B,EAAIhC,EAAKxB,SAAUD,GAAW,EAC3C,IAAKqF,EAAL,CAGA,GAyBIC,GACAC,EA1BAC,EAAaH,EAAOI,SAASxB,OAC7ByB,EAASjC,EAAIhC,EAAKvB,QAASF,GAC3B2F,EAAaD,EAASA,EAAOzB,OAASuB,EAEtC/C,EAAQmD,SAASnE,EAAKhB,cACtBJ,EAAYuF,SAASnE,EAAKpB,WAC1BC,EAAYsF,SAASnE,EAAKnB,WAC1BF,IAA+B,SAAjBqB,EAAKrB,UAAwC,GAAjBqB,EAAKrB,UAC/CwC,IAA+B,SAAjBnB,EAAKmB,UAAwC,GAAjBnB,EAAKmB,UAC/CiD,IAAyB,SAAfpE,EAAKuB,QAAoC,GAAfvB,EAAKuB,QACzC8C,EAAWrD,EACXsD,EAAQ,KACRC,EAAU,KACVC,EAAa,KACbC,EAAS,EACTC,EAAS,EACTC,EAAQ,EACRC,EAAQ,EAERC,EAAc,cAAeC,KAAKC,UAAUC,YAC5CC,EAAW,gBAAkBC,UAAWL,EACxCM,EAAaF,EAAW,aAAe,YACvCG,EAAYH,EAAW,YAAc,GACrCI,EAAWJ,EAAW,WAAa,UACnCK,EAAS1B,EAAO2B,WAAWC,YAG3BC,EAAW1B,CAKf,IAHkB,GAAdG,IACAA,EAAaH,GAEb5C,EAAU,CACV+C,EAAaH,EACbE,EAASA,EAAO,GAChBA,EAAO3D,UAAY,EACnB,IAAI2B,GAAM,EAEV,IAAqB,GAAjBjC,EAAKmB,UAAqC,QAAjBnB,EAAKmB,SAC9B,IAAK,GAAIN,GAAI,EAAGA,EAAIqD,EAAYrD,IAC5BoB,GAAO,QAAUpB,EAAI,GAAK,YAI9B,KAAK,GAAI6E,GAAI,EAAGA,EAAIxB,EAAYwB,IAC5BzD,GAAOjC,EAAKmB,SAAS0B,QAAQ,IAAM6C,EAAI,EAG/CzB,GAAO3D,UAAY2B,EACnBgC,EAASA,EAAOD,SAEN,YAAVtF,IACA+G,GAAY,EACZ7B,EAAO+B,YAAY/B,EAAOI,SAAS,GAAG4B,WAAU,IAChDhC,EAAOiC,aAAajC,EAAOI,SAASD,EAAa,GAAG6B,WAAU,GAAOhC,EAAOI,SAAS,KAEzFH,EAxFW,SAAUiC,EAAIlF,GACrB,GAAImF,GAAMlE,SAAS/B,cAAc,MACjCiG,GAAIzF,UAAYM,EAChBmF,EAAMA,EAAI/B,SAAS,EACnB,IAAIgC,GAAMF,EAAGF,WAAU,EAIvB,OAHAG,GAAIJ,YAAYK,GAChBF,EAAGP,WAAWU,aAAaF,EAAKD,GAChClC,EAASoC,EACFD,GAgFGnC,EAAQ,2FACtBA,EAAO7D,MAAMmG,QAAU,sBAAwBT,EAAWH,EAAS,0DACnE,KAAK,GAAIa,GAAI,EAAGA,EAAIV,EAAUU,IAC1BvC,EAAOI,SAASmC,GAAGpG,MAAMmG,QAAU,iFAAmFZ,EAAS,IAEnI,IAAIc,GAAa,WACe,kBAAjBpG,GAAK9B,UACZ8B,EAAK9B,SAAS8C,EAAOkD,IAGzBmC,EAAW,WACe,kBAAfrG,GAAK7B,QACZ6B,EAAK7B,OAAO6C,EAAOkD,IAIvBoC,EAAoB,WACpBhB,EAASzB,EAAO2B,YAChB5B,EAAO7D,MAAMT,MAAQmG,EAAWH,EAAS,IACzC,KAAK,GAAIzE,GAAI,EAAGA,EAAI4E,EAAU5E,IAC1B+C,EAAOI,SAASnD,GAAGd,MAAMT,MAAQgG,EAAS,IAG9CiB,KADoB,YAAV7H,EAAuBsC,EAAQ,EAAIA,GAC5BsE,EAAQ,GAE7BJ,QAAOsB,iBAAiB,SAAUF,GAAmB,EAErD,IAAIC,GAAY,SAAUE,EAAMC,EAAOnD,GAE/BA,EADEA,EACIA,EAAIxD,MAEJ6D,EAAO7D,MAEjBwD,EAAIoD,yBAA2BpD,EAAIqD,sBAAwBrD,EAAIsD,qBAAuBtD,EAAIuD,oBAAsBvD,EAAIwD,mBAAqBL,EAAQ,KACjJnD,EAAIyD,gBAAkB,aAAeP,EAAO,qBAC5ClD,EAAI0D,YAAc1D,EAAI2D,aAAe3D,EAAI4D,WAAa,cAAgBV,EAAO,OAG7EW,EAAS,SAAUC,GACnB,OAAQ3I,GACJ,IAAK,OACGsC,GAASkD,EACTlD,EAAQqG,EAAUrG,EAAQ,EAAI,EACvBA,EAAQ,IACfA,EAAQqG,EAAU,EAAInD,EAAa,GAEvCqC,GAAYvF,EAAQsE,EAAS1G,GAC7ByF,EAAWrD,CACX,MACJ,KAAK,WACDuF,IAAYvF,EAAQ,GAAKsE,EAAQ1G,IACnB,GAAVoC,GACAuD,EAAU+C,WAAW,WACjBf,GAAWrC,EAAaoB,EAAQ,IACjC1G,GACHoC,EAAQkD,EAAa,GACdlD,GAASkD,IAChBK,EAAU+C,WAAW,WACjBf,GAAWjB,EAAQ,IACpB1G,GACHoC,EAAQ,GAEZqD,EAAWrD,GAKnB,WACI,GAAIuG,GAAqB,YAAV7I,EAAuBsC,EAAQ,EAAIA,EAC9CwG,EAAW5D,EAAO6D,iBAAiBzH,EAAKf,iBACxCyI,EAAkB,SAAUrI,GAC5B,GAAIA,EAAK,CACL,GAAIsI,GAAetI,EAAIuI,aAAa5H,EAAKd,WACzC,KAAKyI,EACD,OAAO,CAEsB,QAA7BtI,EAAIwI,QAAQjG,cACZvC,EAAIG,IAAMmI,EAEVtI,EAAIU,MAAM+H,gBAAV,OAAmCH,EAAnC,KAIRH,GAAShF,OAAS,IAClBkF,EAAgBF,EAASD,IACzBG,EAAgBF,EAASD,EAAW,IACpCG,EAAgBF,EAASD,EAAW,QAG5CnB,IACA5B,EAAa8C,WAAW,WACpBjB,KACDzH,EAEH,KAAK,GAAIiC,GAAI,EAAGA,EAAIqD,EAAYrD,IAC5B2C,EAAYS,EAAOpD,GAAIb,EAAKkB,gBACxBL,GAAKG,GACLsC,EAASW,EAAOpD,GAAIb,EAAKkB,eAkBrB,IAARkD,IACAZ,EAAYE,EAAS,YACrBF,EAAYC,EAAS,YACR,GAATzC,EACAsC,EAASG,EAAS,YACXzC,GAASkD,EAAa,GAC7BZ,EAASI,EAAS,aAGtBC,IACAA,EAAUrD,UAAY,UAAYU,EAAQ,GAAK,WAAakD,GAapE,IATAkD,IAEIzI,IACA2F,EAAQyD,YAAY,WAChB/G,IACAoG,KACDvI,IAGHoF,EACA,IAAK,GAAI+D,GAAI,EAAGA,EAAI9D,EAAY8D,KAC5B,WACI,GAAIhF,GAAIgF,CACR/D,GAAOjB,GAAGwD,iBAAiB,QAAS,WAChCyB,aAAa1D,GACb0D,aAAazD,GACbxD,EAAQgC,EACRoE,QAKZ1D,IACAA,EAAQ8C,iBAAiB,QAAS,WAClB,GAARpC,GAAgBpD,GAASkD,EAAa,IACtC+D,aAAa1D,GACb0D,aAAazD,GACbxD,IACAoG,OAIR3D,GACAA,EAAQ+C,iBAAiB,QAAS,WAClB,GAARpC,GAAyB,GAATpD,IAChBiH,aAAa1D,GACb0D,aAAazD,GACbxD,IACAoG,MAKZ,IAAIc,GAAS,SAAUC,GACnBF,aAAa1D,GACb0D,aAAazD,GACbV,MAAUsE,GACVzD,EAAQ,CACR,IAAI0D,GAAQpD,EAAWkD,EAAEG,QAAQ,GAAKH,CACtC1D,GAAS4D,EAAME,MACf7D,EAAS2D,EAAMG,MAEf5E,EAAO4C,iBAAiBpB,EAAWqD,GAAO,GAE1C7E,EAAO4C,iBAAiBnB,EAAUqD,GAAM,IAGxCD,EAAQ,SAAUN,GAClB,IAAIlD,KACIkD,EAAEG,QAAQ9F,OAAS,GAAK2F,EAAEQ,OAAqB,IAAZR,EAAEQ,OAD7C,CAMA,GAAIN,GAAQpD,EAAWkD,EAAEG,QAAQ,GAAKH,CAMtC,IALAxD,EAAQ0D,EAAME,MAAQ9D,EACtBG,EAAQyD,EAAMG,MAAQ9D,MACA,KAAXZ,IACPA,KAAcA,GAAW8E,KAAKC,IAAIlE,GAASiE,KAAKC,IAAIjE,MAEnDd,EAKD,OAJAqE,EAAEW,iBACEnK,GACAoK,cAAczE,GAEV5F,GACJ,IAAK,QACa,GAATsC,GAAc2D,EAAQ,GAAO3D,GAASkD,EAAa,GAAKS,EAAQ,KACjEA,GAAgB,IAEpB4B,GAAWvF,EAAQsE,EAASX,EAAO,EACnC,MACJ,KAAK,WACD4B,IAAYvF,EAAQ,GAAKsE,EAASX,EAAO,MAMrD+D,EAAO,QAAPA,GAAiBP,GACJ,GAATxD,IAGJwD,EAAEW,iBACGhF,IACG8E,KAAKC,IAAIlE,GAASW,EAAS,KAC3BX,EAAQ,EAAI3D,IAAUA,KAE1BoG,GAAO,GACHzI,IACA2F,EAAQyD,YAAY,WAChB/G,IACAoG,KACDvI,KAIX+E,EAAOoF,oBAAoB5D,EAAWqD,GAAO,GAC7C7E,EAAOoF,oBAAoB3D,EAAUqD,GAAM,IAG/C9E,GAAO4C,iBAAiBrB,EAAY+C,GAAQ,KAGhD5K,GAAOC,QAAUK,GF+IX,SAAUN,EAAQC,EAASC,GAEjC,YGzkBA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAEpByL,EAAQ,UAGRpL,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,YAEAG,UAEAe,MACIC,QAEQK,KAAMwJ,EACNC,KAAM,cACNC,KAAM,KACNC,YAAY,IAGZ3J,KAASwJ,EAAT,eACAC,KAAM,aACNC,KAAM,OACNC,YAAY,IAGZ3J,KAASwJ,EAAT,kBACAC,KAAM,aACNC,KAAM,OACNC,YAAY,IAGZ3J,KAASwJ,EAAT,aACAC,KAAM,aACNC,KAAM,OACNC,YAAY,IAGZ3J,KAASwJ,EAAT,QACAC,KAAM,YACNC,KAAM,KACNC,YAAY,OAQhCvL,GAAQ6B,UAAUC,gBAAkB,WAChC,GAAMR,GAAOS,KAAKI,KAAKb,KACjBC,EAAQD,EAAKC,MACfsB,EAAO,EACXtB,GAAMuB,QAAQ,SAAUC,GACpB,GAAIyI,GAAW,EACXzI,GAAEwI,aACFC,EAAW,yCAEf3I,6BACeE,EAAEnB,KADjB,wFAEiDmB,EAAEsI,KAFnD,4DAGyCtI,EAAEuI,KAH3C,2BAIUE,EAJV,iCAQJzJ,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,eACXC,UAAWI,MAMvB7C,EAAQ6B,UAAUoB,MAAQ,aAI1BxD,EAAOC,QAAUM,GHmkBV,CAED,SAAUP,EAAQC,EAASC,GAEjC,YI7pBA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,YAEAG,QAEIkL,OAAQ,UACRC,eAAgB,GAChBC,iBAAkB,SAClBC,iBAAiB,GAGrBtK,UAKRtB,GAAQ6B,UAAUC,gBAAkB,WAChC,GAAMvB,GAASwB,KAAKI,KAAK5B,OACrBsL,EAAgB,GAChBC,EAAiB,GACfL,EAASlL,EAAOkL,OAChBC,EAAiBnL,EAAOmL,eACxBC,EAAmBpL,EAAOoL,gBAEjB,aAAXF,IACAK,EAAiB,qBAEM,UAAnBJ,IACAI,gCAA+CH,GAG5B,aAAnBD,IACAI,mCAAkDH,GAEtDE,oKAOW,SAAXJ,IACAK,EAAiB,kBAEM,UAAnBJ,IACAI,gCAA+CH,GAG5B,aAAnBD,IACAI,mCAAkDH,GAEtDE,+NAQJ9J,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,uBAAwBsJ,EACxBrJ,UAAWoJ,MAMvB7L,EAAQ6B,UAAUoB,MAAQ,aAI1BxD,EAAOC,QAAUM,GJ2pBX,SAAUP,EAAQC,EAASC,GAEjC,YKhvBA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WACI+C,KAAM,UAEN9C,UACI2L,MAAO,aAEPC,sBAAuB,SAAUpJ,GACzBA,EAAKqJ,SAAuD,WAA5CC,iBAAiBtJ,EAAKqJ,SAASE,WAC/CvJ,EAAKqJ,QAAQ/J,MAAMiK,SAAW,cAK1C5L,QACI6L,eAAe,EACfR,iBAAiB,GAGrBtK,UAKRtB,GAAQ6B,UAAUC,gBAAkB,WAChC,GAAIsK,GAAgB,EAChBrK,MAAKI,KAAK5B,OAAO6L,gBACjBA,EAAgB,sBAEpBrK,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,oBAAqB4J,EACrB3J,UAAW,OAMvBzC,EAAQ6B,UAAUoB,MAAQ,WACtB,GAAML,GAAOb,IACbA,MAAKC,UAAU2G,iBAAiB,QAAS,SAAU0D,GAC/CzJ,EAAKT,KAAK/B,SAAS2L,QACnBM,EAAGC,qBAIX7M,EAAOC,QAAUM,GLsvBX,SAAUP,EAAQC,EAASC,GAEjC,YAKA,SAAS4M,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAI9J,GAAI,EAAGA,EAAI8J,EAAMnI,OAAQ3B,IAAK,CAAE,GAAI+J,GAAaD,EAAM9J,EAAI+J,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMvJ,OAAOwJ,eAAeN,EAAQE,EAAWK,IAAKL,IAAiB,MAAO,UAAUN,EAAaY,EAAYC,GAAiJ,MAA9HD,IAAYT,EAAiBH,EAAY5K,UAAWwL,GAAiBC,GAAaV,EAAiBH,EAAaa,GAAqBb,MMlzB1hB7M,EAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GAGvBG,ENuzBU,WMtzBZ,QAAAA,GAAYyN,GAAMhB,EAAAxK,KAAAjC,GAGdiC,KAAKI,KAAOvC,EAAM4N,QAEdC,UAEIvK,KAAM,UAEN9C,UAEIsN,sBAAuB,SAAU9K,KAIjC+K,qBAAsB,SAAU/K,KAIhCoJ,sBAAuB,SAAUpJ,KAIjCgL,qBAAsB,SAAUhL,KAIhCiL,sBAAuB,SAAUjL,KAIjCkL,qBAAsB,SAAUlL,KAIhCmL,oBAAqB,SAAUnL,KAI/BoL,mBAAoB,SAAUpL,KAI9BqL,oBAAqB,SAAUrL,KAI/BsL,mBAAoB,SAAUtL,KAI9BuL,iBAAkB,SAAUvL,KAI5BwL,gBAAiB,SAAUxL,KAI3ByL,oBAAqB,SAAUzL,KAI/B0L,mBAAoB,SAAU1L,MAKlCrC,QAEI+B,4BAEAiM,uBACIC,OAAQ,cACRC,MAAO,MAEXrM,kBACAwJ,iBAAiB,EACjB8C,uBAAuB,GAG3BpN,SAGJqN,SAAUpB,IAGdxL,KAAKC,UAAY,KACjBD,KAAKkK,QAAU,KACflK,KAAK6M,kBNm+BT,MAnKAjC,GAAa7M,IACTsN,IAAK,OACLyB,MAAO,WM5zBP9M,KAAK+M,SACL/M,KAAKkB,WNm0BLmK,IAAK,SACLyB,MAAO,WM/zBP9M,KAAKgN,iBAEL,IAAM3O,GAAW2B,KAAKI,KAAK/B,QAC3BA,GAASsN,sBAAsB3L,MAC/BA,KAAKD,kBACL1B,EAASuN,qBAAqB5L,MAE9BA,KAAKiN,aACLjN,KAAKkN,qBNs0BL7B,IAAK,QACLyB,MAAO,eAOPzB,IAAK,kBACLyB,MAAO,WMr0BP9M,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,mBACXC,mHN80BR2K,IAAK,kBACLyB,MAAO,WMt0BP,GAAMzO,GAAW2B,KAAKI,KAAK/B,SACrBG,EAASwB,KAAKI,KAAK5B,MACzB,IAAIA,EAAOqL,iBAAmB7J,KAAKkK,QAAS,CACxC7L,EAAS4L,sBAAsBjK,KAC/B,IAAMmN,GAAe3O,EAAOgO,qBAC5B,IAA4B,iBAAxBW,EAAaV,OAA2B,CACxC,GAAMW,GAAMtP,EAAauP,aAAaC,QAASH,EAAaT,QAAQ,EAChEU,GACApN,KAAKkK,QAAQjE,aAAajG,KAAKC,UAAWmN,GAE1CpN,KAAKkK,QAAQjE,aAAajG,KAAKC,UAAWD,KAAKkK,QAAQ9F,SAAS,IAG5C,gBAAxB+I,EAAaV,QACbzM,KAAKkK,QAAQnE,YAAY/F,KAAKC,WAElC5B,EAASwN,qBAAqB7L,UN80BlCqL,IAAK,kBACLyB,MAAO,WMz0BP,GAAMzO,GAAW2B,KAAKI,KAAK/B,QACvB2B,MAAKC,WAAaD,KAAKC,UAAU0F,aACjCtH,EAASyN,sBAAsB9L,MAC/BA,KAAKC,UAAU0F,WAAW4H,YAAYvN,KAAKC,WAC3C5B,EAAS0N,qBAAqB/L,OAElCA,KAAKwN,yBNg1BLnC,IAAK,sBACLyB,MAAO,WM50BP,GAAMjM,GAAOb,IACTa,GAAKT,KAAK5B,OAAOmO,uBACjB/K,OAAO6L,KAAK5M,EAAKgM,gBAAgB9L,QAAQ,SAAU2B,GAC/CyG,cAActI,EAAKgM,eAAenK,IAClC2F,aAAaxH,EAAKgM,eAAenK,SNq1BzC2I,IAAK,gBACLyB,MAAO,WM/0BP,GAAMzO,GAAW2B,KAAKI,KAAK/B,QAC3BA,GAAS2N,oBAAoBhM,MACzBA,KAAKkK,UACLlK,KAAKI,KAAK5B,OAAOqL,iBAAkB,EACnC7J,KAAKkN,mBAET7O,EAAS4N,mBAAmBjM,SNs1B5BqL,IAAK,gBACLyB,MAAO,WMl1BP,GAAMzO,GAAW2B,KAAKI,KAAK/B,QACvB2B,MAAKC,UAAU0F,aACf3F,KAAKI,KAAK5B,OAAOqL,iBAAkB,EACnCxL,EAAS6N,oBAAoBlM,MAC7BA,KAAKC,UAAU0F,WAAW4H,YAAYvN,KAAKC,WAC3C5B,EAAS8N,mBAAmBnM,UN01BhCqL,IAAK,aACLyB,MAAO,WMr1BP,GAAMzO,GAAW2B,KAAKI,KAAK/B,QAC3BA,GAAS+N,iBAAiBpM,MAC1BA,KAAKkK,QAAUpM,EAAauP,aAAaC,QAAStN,KAAKI,KAAKe,OAAO,GACnE9C,EAASgO,gBAAgBrM,SN41BzBqL,IAAK,gBACLyB,MAAO,WMx1BP,GAAMzO,GAAW2B,KAAKI,KAAK/B,QAE3B2B,MAAKgN,kBAEDhN,KAAKkK,UACL7L,EAASiO,oBAAoBtM,MAC7BA,KAAKkK,QAAQvE,WAAW4H,YAAYvN,KAAKkK,SACzC7L,EAASkO,mBAAmBvM,UNg2BhCqL,IAAK,mBACLyB,MAAO,WM31BP,MAAO9M,MAAKC,UAAUyN,cNg2BnB3P,IM51BXL,GAAOC,QAAUI,GNk2BT,CAEF,SAAUL,EAAQC,EAASC,GAEjC,YO3kCA0H,QAAOsB,iBAAiB,OAAQ,WAC5Bc,WAAW,WACP,GAAM5J,GAAeF,EAAQ,IAiB5B,WAGG,IAFyBE,EAAa6P,qBAGlCtP,UACIuP,QAAS,SAAU/M,GAEC,IADAjD,EAAQ,KAEpBuD,KAAM,UACN3C,QACIkL,OAAQ,aAGRmE,uBAOvB,WAEG,IADcjQ,EAAQ,KAElBuD,KAAM,cACN5B,MACIC,QAEQC,KACIC,MAAO,EACPC,OAAQ,EACRC,IAAK,yEAETC,KAAM,KAGNJ,KACIC,MAAO,EACPC,OAAQ,EACRC,IAAK,yEAETC,KAAM,KAGNJ,KACIC,MAAO,EACPC,OAAQ,EACRC,IAAK,yEAETC,KAAM,KAGNJ,KACIC,MAAO,EACPC,OAAQ,EACRC,IAAK,uEAETC,KAAM,KAGNJ,KACIC,MAAO,EACPC,OAAQ,EACRC,IAAK,wEAETC,KAAM,WAQzB,WAEG,IADmBjC,EAAQ,KACXuD,KAAM,wBAIzB,WACG,GAAM2M,GAASlQ,EAAQ,GACvB,IAAIkQ,IACAzP,UACI0P,QAAS,WACL,GAAID,IAAQtP,QAASwP,OAAQ1E,KAAM,iBAAkB2E,QAAS,WAElEC,OAAQ,WACJ,GAAIJ,IAAQtP,QAASwP,OAAQ1E,KAAM,iBAAkB2E,QAAS,WAElEE,MAAO,WACH,GAAIL,IAAQtP,QAASwP,OAAQ1E,KAAM,iBAAkB2E,QAAS,YAGtEzP,QACI4P,KAAM,gBAMjB,WAEG,IADmBxQ,EAAQ,MACXuD,KAAM,wBAIzB,WAEG,IADevD,EAAQ,MACXuD,KAAM,qBAIrB,WACG,GAAMkN,GAAUzQ,EAAQ,EACR,IAAIyQ,IAChB7P,QACIkL,OAAQ,aAGRmE,gBACK,GAAIQ,IACb7P,QACIkL,OAAQ,UAGXmE,mBAIR,WAEG,IADkBjQ,EAAQ,KACXuD,KAAM,qBAErB,IADgBvD,EAAQ,MACXuD,KAAM,qBAEnB,IADqBvD,EAAQ,MACXuD,KAAM,qBAAqBmN,OAE7C,IADmB1Q,EAAQ,MACXuD,KAAM,wBAIzB,WAEG,IADcvD,EAAQ,QAKzB,WACG,GAAM2Q,GAAO3Q,EAAQ,GACf4Q,EAAO,GAAID,IACblQ,UACI2L,MAAO,WACHwE,EAAKC,uBAQpB,WAEG,IADc7Q,EAAQ,MAElBuD,KAAM,qBACN9C,UACI2L,MAAO,SAAUwB,GACbtM,QAAQC,IAAIqM,UAO3B,WACG,GAAMkD,GAAQ9Q,EAAQ,GACR,IAAI8Q,IACdvN,KAAM,cACN5B,MACIoP,SAEQV,QAAS,uBAGTA,QAAS,uBAGTA,QAAS,uBAGjBW,QAGYX,QAAS,uBAGTA,QAAS,uBAGTA,QAAS,yBAKTA,QAAS,uBAGTA,QAAS,uBAGTA,QAAS,yBAKTA,QAAS,uBAGTA,QAAS,uBAGTA,QAAS,wBAIrBY,OAAQ,SAMnB,WAUGjR,EAAA2K,EAAA,GAAAuG,KAAA,SAA6BC,GACzB,GAAMC,GAAOpR,EAAQ,GACR,IAAIoR,IACb7N,KAAM,aACN9C,UACI2L,MAAO,SAAUwB,GACbtM,QAAQC,IAAIqM,QAN5ByD,KAAA,KAAArR,IAAAsR,MAAAtR,EAAAuR,OAaJvR,EAAQ,GACOA,GAAQ,IACxB,MPyjCD,SAAUF,EAAQC,EAASC,GAEjC,YQ50CA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GACpB2Q,EAAO3Q,EAAQ,GAGfK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,UACI4L,sBAAuB,SAAUpJ,GACC,YAA1BA,EAAKT,KAAK5B,OAAO4P,OACbvN,EAAKT,KAAK5B,OAAOuP,QAAQqB,aACzBvO,EAAK2N,KAAO,GAAID,IACZ/P,QACIqL,iBAAiB,EACjB2C,uBAAwBC,OAAQ,oBAIxC5L,EAAKqJ,SAAuD,WAA5CC,iBAAiBtJ,EAAKqJ,SAASE,WAC/CvJ,EAAKqJ,QAAQ/J,MAAMiK,SAAW,cAK1C2D,QAAS,aAGTG,OAAQ,aAGRC,MAAO,cAIX3P,QAMI4P,KAAM,QAONxE,iBAAkB,SAElBoE,OACIqB,KAAM,IACNC,YAAY,EACZhG,KAAM,iBACN2E,QAAS,MAGbF,SAEIwB,cAAc,EACdC,cAAe,MACfC,YAAY,EACZC,YAAa,wBACbC,cAAc,EACdC,cAAe,GACfC,aAAa,EACbC,aAAc,2CACdC,eAAe,EACfC,eAAgB,KAChBC,cAAc,EACdC,cAAe,KACfC,UAAU,EACVC,cAAe,GACfd,YAAY,EACZhG,KAAM,eACN8F,YAAY,EACZiB,YAAY,IAIpB9Q,UAKRtB,GAAQ6B,UAAUC,gBAAkB,WAChC,GAAMvB,GAASwB,KAAKI,KAAK5B,OACnB4P,cAAmB5P,EAAO4P,KAC1BxE,cAA+BpL,EAAOoL,iBAEtC9I,eACAd,KAAKsQ,cADL,aAEAtQ,KAAKuQ,gBAFL,QAINvQ,MAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,sBAAuB2N,EAAvB,IAA+BxE,EAC/BlJ,UAAWI,MAMvB7C,EAAQ6B,UAAUwQ,YAAc,WAC5B,GAAM9R,GAASwB,KAAKI,KAAK5B,MACzB,IAAoB,UAAhBA,EAAO4P,KACP,MAAO,EAEX,IAAMJ,GAAQxP,EAAOwP,MACjBwC,EAAW,EAIf,OAHIxC,GAAMsB,aACNkB,8CAAuDxC,EAAM1E,KAA7D,YAEJ,aACMkH,EADN,8CAEuCxC,EAAMC,QAF7C,gBAOJhQ,EAAQ6B,UAAUyQ,cAAgB,WAC9B,GAAM/R,GAASwB,KAAKI,KAAK5B,MACzB,IAAoB,YAAhBA,EAAO4P,KACP,MAAO,EAEX,IAAML,GAAUvP,EAAOuP,QACnB0C,EAAa,EACb1C,GAAQwB,eACRkB,kCAA6C1C,EAAQyB,cAArD,SAEJ,IAAIkB,GAAW,EACf,IAAI3C,EAAQ0B,WAAY,CACpB,GAAIe,GAAW,EACXzC,GAAQuB,aACRkB,wCAAiDzC,EAAQzE,KAAzD,WAEJ,IAAIqH,GAAY,uBACZjB,mBACEc,EADF,4CAE6BzC,EAAQ2B,YAFrC,kBAIA3B,GAAQoC,WACRQ,EAAY,uBACZjB,EAAc3B,EAAQ2B,aAE1BgB,4EAEsBC,EAFtB,2BAGcjB,EAHd,yDAQJ,GAAIkB,GAAa,EACjB,IAAI7C,EAAQ4B,aAAc,CACtB,GAAIkB,GAAa,EACb9C,GAAQkC,eACRY,2DAAsE9C,EAAQmC,cAA9E,SAEJ,IAAIY,GAAc,EACd/C,GAAQgC,gBACRe,4CAAwD/C,EAAQiC,eAAhE,UAEJY,kCAA6CC,EAAaC,EAA1D,SAEJ,GAAIC,GAAY,EAIhB,OAHIhD,GAAQ8B,cACRkB,iCAA2ChD,EAAQ+B,aAAnD,UAEJ,aACMW,EADN,aAEMC,EAFN,aAGME,EAHN,aAIMG,EAJN,WASJ9S,EAAQ6B,UAAUoB,MAAQ,WACtB,GAAML,GAAOb,KACPxB,EAASwB,KAAKI,KAAK5B,MAQzB,IANoB,UAAhBA,EAAO4P,MACP1G,WAAW,WACP7G,EAAKmQ,QACNxS,EAAOwP,MAAMqB,MAGA,YAAhB7Q,EAAO4P,KAAoB,CAC3B,GAAMD,GAAQnO,KAAKC,UAAUiC,cAAc,kBACvCiM,IACAA,EAAMvH,iBAAiB,QAAS,WAC5B/F,EAAKmQ,OACLnQ,EAAKT,KAAK/B,SAAS8P,SAG3B,IAAMD,GAASlO,KAAKC,UAAUiC,cAAc,mBACxCgM,IACAA,EAAOtH,iBAAiB,QAAS,WAC7B/F,EAAKmQ,OACLnQ,EAAKT,KAAK/B,SAAS6P,UAG3B,IAAMH,GAAU/N,KAAKC,UAAUiC,cAAc,oBACzC6L,IACAA,EAAQnH,iBAAiB,QAAS,WACzB/F,EAAKT,KAAK5B,OAAOuP,QAAQsC,YAC1BxP,EAAKmQ,OAETnQ,EAAKT,KAAK/B,SAAS0P,cAMnC9P,EAAQ6B,UAAUkR,KAAO,WACrBhR,KAAKyO,gBACDzO,KAAKwO,MACLxO,KAAKwO,KAAKC,iBAIlB/Q,EAAOC,QAAUM,GR4zCX,SAAUP,EAAQC,EAASC,GAEjC,YSjiDA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBqT,GACFC,SAAU,GACVC,SAAU,IACVC,QAAS,EACTC,QAAS,KAEbJ,GAAYI,QAAUrI,KAAKsI,KAAKL,EAAYE,SAAWF,EAAYC,SAGnE,IAAMjT,GAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,UAEIkT,SAAU,aAGVC,SAAU,aAGVC,WAAY,cAIhBjT,UAEAe,KAAM0R,IAKdhT,GAAQ6B,UAAUC,gBAAkB,WAChCC,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,eACXC,8TAMsBV,KAAK0R,eAN3B,ofAkBR1R,KAAK2R,QAAU3R,KAAKC,UAAU4H,iBAAiB,qBAAqB,GACpE7H,KAAK4R,QAAU5R,KAAKC,UAAU4H,iBAAiB,qBAAqB,GACpE7H,KAAK6R,iBAAmB,4BACxB7R,KAAK8R,UAAY9R,KAAKC,UAAUiC,cAAc,4CAIlDjE,EAAQ6B,UAAU4R,aAAe,WAE7B,IAAK,GADD5Q,GAAO,GACFG,EAAI,EAAGA,EAAIjB,KAAKI,KAAKb,KAAK8R,QAASpQ,IACxCH,sBAA0BG,EAAI,GAA9B,MAAoCA,EAAI,GAAxC,WAEJ,OAAOH,IAIX7C,EAAQ6B,UAAUoB,MAAQ,WACtB,GAAML,GAAOb,KACPT,EAAOS,KAAKI,KAAKb,IACF,KAAjBA,EAAK6R,SACLpR,KAAK+R,kBAELxS,EAAK6R,UAAY7R,EAAK8R,SACtBrR,KAAKgS,kBAGThS,KAAK2R,QAAQ/K,iBAAiB,QAAS,WAC9B5G,KAAKiS,UAAUC,SAASrR,EAAKgR,mBAC9BhR,EAAK0Q,aAIbvR,KAAK4R,QAAQhL,iBAAiB,QAAS,WAC9B5G,KAAKiS,UAAUC,SAASrR,EAAKgR,mBAC9BhR,EAAK2Q,aAIbxR,KAAK8R,UAAUlL,iBAAiB,SAAU,WACtC/F,EAAK4Q,gBAKbxT,EAAQ6B,UAAUyR,SAAW,WACzB,GAAMhS,GAAOS,KAAKI,KAAKb,IACvB,IAAIA,EAAK6R,QAAU,EAAG,CAClB7R,EAAK6R,SACL,IAAMe,GAAanS,KAAK8R,UAAU5P,cAAc,iBAC5CiQ,GAAWC,yBACXD,EAAWE,UAAW,EACtBF,EAAWC,uBAAuBC,UAAW,GAEjDrS,KAAKsS,iBACLtS,KAAKI,KAAK/B,SAASkT,SAASvR,MAEX,IAAjBT,EAAK6R,SACLpR,KAAK+R,kBAET7S,QAAQC,IAAII,IAIhBtB,EAAQ6B,UAAU0R,SAAW,WACzB,GAAMjS,GAAOS,KAAKI,KAAKb,IACvB,IAAIA,EAAK6R,QAAU7R,EAAK8R,QAAS,CAC7B9R,EAAK6R,SACL,IAAMe,GAAanS,KAAK8R,UAAU5P,cAAc,iBAC5CiQ,GAAWI,qBACXJ,EAAWE,UAAW,EACtBF,EAAWI,mBAAmBF,UAAW,GAE7CrS,KAAKwS,iBACLxS,KAAKI,KAAK/B,SAASmT,SAASxR,MAE5BT,EAAK6R,UAAY7R,EAAK8R,SACtBrR,KAAKgS,kBAET9S,QAAQC,IAAII,IAIhBtB,EAAQ6B,UAAU2R,WAAa,WAC3B,GAAMlS,GAAOS,KAAKI,KAAKb,IACvBA,GAAK6R,QAAUpR,KAAK8R,UAAUhF,MAC9B9M,KAAKsS,iBACLtS,KAAKwS,iBACgB,IAAjBjT,EAAK6R,SACLpR,KAAK+R,kBAELxS,EAAK6R,UAAY7R,EAAK8R,SACtBrR,KAAKgS,kBAEThS,KAAKI,KAAK/B,SAASoT,WAAWzR,MAC9Bd,QAAQC,IAAII,IAIhBtB,EAAQ6B,UAAUiS,gBAAkB,WAChC/R,KAAK2R,QAAQM,UAAUQ,IAAIzS,KAAK6R,mBAIpC5T,EAAQ6B,UAAU0S,eAAiB,WAC/BxS,KAAK2R,QAAQM,UAAUS,OAAO1S,KAAK6R,mBAIvC5T,EAAQ6B,UAAUkS,gBAAkB,WAChChS,KAAK4R,QAAQK,UAAUQ,IAAIzS,KAAK6R,mBAIpC5T,EAAQ6B,UAAUwS,eAAiB,WAC/BtS,KAAK4R,QAAQK,UAAUS,OAAO1S,KAAK6R,mBAGvCnU,EAAOC,QAAUM,GTshDX,SAAUP,EAAQC,EAASC,GAEjC,YU3sDA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,YAEAG,QACImU,QACIrD,YAAY,IAIpB/P,MACI+J,KAAM,mBACNC,KAAM,OACNoJ,QACIrJ,KAAM,cACNC,KAAM,MACN1J,KAAM,QAOtB5B,GAAQ6B,UAAUC,gBAAkB,WAChC,GAAMR,GAAOS,KAAKI,KAAKb,KACnBqT,EAAiB,EACjB5S,MAAKI,KAAK5B,OAAOmU,OAAOrD,aACxBsD,wCAAuDrT,EAAKoT,OAAOrJ,KAAnE,YAEJtJ,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,YACXC,mEAC0CnB,EAAK+J,KAD/C,yDAEkC/J,EAAKgK,KAFvC,sEAGiDhK,EAAKoT,OAAO9S,KAH7D,2BAIU+S,EAJV,oDAKqCrT,EAAKoT,OAAOpJ,KALjD,iDAaZtL,EAAQ6B,UAAUoB,MAAQ,aAI1BxD,EAAOC,QAAUM,GV2sDX,SAAUP,EAAQC,EAASC,GAEjC,YWxwDA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,YAEAG,UAEAe,UAKRtB,GAAQ6B,UAAUC,gBAAkB,WAChCC,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,aACXC,mGAQZzC,EAAQ6B,UAAUoB,MAAQ,aAI1BxD,EAAOC,QAAUM,GX6wDX,SAAUP,EAAQC,EAASC,GAEjC,YAKA,SAAS4M,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASkI,GAA2BhS,EAAMiB,GAAQ,IAAKjB,EAAQ,KAAM,IAAIiS,gBAAe,4DAAgE,QAAOhR,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BjB,EAAPiB,EAElO,QAASiR,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAItI,WAAU,iEAAoEsI,GAAeD,GAASlT,UAAY8B,OAAOsR,OAAOD,GAAcA,EAAWnT,WAAaqT,aAAerG,MAAOkG,EAAU/H,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+H,IAAYrR,OAAOwR,eAAiBxR,OAAOwR,eAAeJ,EAAUC,GAAcD,EAASK,UAAYJ,GANje,GAAIrI,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAI9J,GAAI,EAAGA,EAAI8J,EAAMnI,OAAQ3B,IAAK,CAAE,GAAI+J,GAAaD,EAAM9J,EAAI+J,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMvJ,OAAOwJ,eAAeN,EAAQE,EAAWK,IAAKL,IAAiB,MAAO,UAAUN,EAAaY,EAAYC,GAAiJ,MAA9HD,IAAYT,EAAiBH,EAAY5K,UAAWwL,GAAiBC,GAAaV,EAAiBH,EAAaa,GAAqBb,MYvzD1hB7M,EAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,IAGpBK,EZg0DQ,SAAUqV,GY/zDpB,QAAArV,GAAYuN,GAAMhB,EAAAxK,KAAA/B,EAAA,IAAAsV,GAAAV,EAAA7S,MAAA/B,EAAAoV,WAAAzR,OAAA4R,eAAAvV,IAAA6D,KAAA9B,KAeRwL,GAfQ,OAiBd+H,GAAKnT,KAAOvC,EAAM4N,QACdC,SAAU6H,EAAKnT,KAEfwM,UAEIvO,YAEAG,UAEAe,WAIRgU,EAAKnT,KAAOvC,EAAM4N,QACdC,SAAU6H,EAAKnT,KACfwM,SAAUpB,IAEd+H,EAAKjF,OAlCSiF,EZs4DlB,MAtEAR,GAAU9U,EAASqV,GAgDnB1I,EAAa3M,IACToN,IAAK,kBACLyB,MAAO,WY30DP9M,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,iBACXC,iHZo1DR2K,IAAK,QACLyB,MAAO,gBAKJ7O,GYv4DWF,EA0DtBL,GAAOC,QAAUM,GZo1DX,SAAUP,EAAQC,EAASC,GAEjC,Yar5DA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,YAEAG,QACIiV,WAAY,KAGhBlU,UAKRtB,GAAQ6B,UAAUC,gBAAkB,WAChCC,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,WACXC,UAAW,mEAMvBzC,EAAQ6B,UAAUoB,MAAQ,WACtB,GAAML,GAAOb,IACbA,MAAKC,UAAU2G,iBAAiB,QAAS,WACrC9I,EAAa4V,UAAUC,GAAI,QAE/BrO,OAAOsB,iBAAiB,SAAU,YACZ3E,SAAS2R,gBAAgBC,WAAa5R,SAAS2M,KAAKiF,YACrDhT,EAAKT,KAAK5B,OAAOiV,WAC9B5S,EAAKZ,UAAUgS,UAAUQ,IAAI,mBAE7B5R,EAAKZ,UAAUgS,UAAUS,OAAO,sBAK5ChV,EAAOC,QAAUM,Gb45DX,SAAUP,EAAQC,EAASC,GAEjC,Yc98DA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,UACI2L,MAAO,cAIXxL,QACIsV,QAAQ,EACRpK,OAAQ,KACRqK,KACIC,GAAI,MACJC,IAAK,QAIb1U,UAKRtB,GAAQ6B,UAAUC,gBAAkB,WAChC,GAAMvB,GAASwB,KAAKI,KAAK5B,MACzBwB,MAAKkU,qBAAuB,uBAC5B,IAAIC,GAAO,EACW,QAAlB3V,EAAOkL,SACPyK,EAAOnU,KAAKkU,sBAEhBlU,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAO3B,EAAO6B,eACdC,gBAAiB9B,EAAO+B,yBACxBC,WACIC,4BAA6B0T,EAC7BzT,yMAIuClC,EAAOuV,IAAIvV,EAAOkL,QAJzD,2BAWZzL,EAAQ6B,UAAUoB,MAAQ,WACtB,GAAML,GAAOb,KACPxB,EAASwB,KAAKI,KAAK5B,MACzBwB,MAAKC,UAAU2G,iBAAiB,QAAS,WAChCpI,EAAOsV,SACHjT,EAAKsT,OAGNtT,EAAKoT,MAFLpT,EAAKmT,MAKbnT,EAAKT,KAAK/B,SAAS2L,OAAON,OAAQlL,EAAOkL,YAKjDzL,EAAQ6B,UAAUqU,KAAO,WACrB,MAAOnU,MAAKC,UAAUgS,UAAUC,SAASlS,KAAKkU,uBAIlDjW,EAAQ6B,UAAUkU,GAAK,WACnB,GAAMxV,GAASwB,KAAKI,KAAK5B,MACpBwB,MAAKmU,SACNnU,KAAKC,UAAUgS,UAAUQ,IAAIzS,KAAKkU,sBAClC1V,EAAOkL,OAAS,KAChB1J,KAAKC,UAAUiC,cAAc,wBAAwBxB,UAArD,GAAoElC,EAAOuV,IAAIvV,EAAOkL,UAK9FzL,EAAQ6B,UAAUmU,IAAM,WACpB,GAAMzV,GAASwB,KAAKI,KAAK5B,MACrBwB,MAAKmU,SACLnU,KAAKC,UAAUgS,UAAUS,OAAO1S,KAAKkU,sBACrC1V,EAAOkL,OAAS,MAChB1J,KAAKC,UAAUiC,cAAc,wBAAwBxB,UAArD,GAAoElC,EAAOuV,IAAIvV,EAAOkL,UAI9FhM,EAAOC,QAAUM,Gd+8DX,SAAUP,EAAQC,EAASC,GAEjC,Ye7iEA,IAAMC,GAAQD,EAAQ,GAChBE,EAAeF,EAAQ,GACvBG,EAAYH,EAAQ,GAGpBK,EAAUJ,EAAMK,oBAClBC,UAAWJ,EAEXK,WAEIC,YAEAG,UAEAe,MACIoP,SAAUV,QAAS,sBAAuBA,QAAS,sBAAuBA,QAAS,sBACnFW,QAASX,QAAS,sBAAuBA,QAAS,sBAAuBA,QAAS,uBAClFY,OAAQ,MAMpB5Q,GAAQ6B,UAAUC,gBAAkB,WAChCC,KAAKC,UAAYnC,EAAaoC,eAC1BC,MAAOH,KAAKI,KAAK5B,OAAO6B,eACxBC,gBAAiBN,KAAKI,KAAK5B,OAAO+B,yBAClCC,WACIC,UAAW,UACXC,oIAGcV,KAAKoU,wBAHnB,yHAOUpU,KAAKqU,sBAPf,+FAUUrU,KAAKsU,wBAVf,6CAiBZrW,EAAQ6B,UAAUsU,sBAAwB,WACtC,GAAItT,GAAO,EAUX,OATAd,MAAKI,KAAKb,KAAKoP,OAAO5N,QAAQ,SAAUC,GACpCF,mHAGcE,EAAEiN,QAHhB,2DAQGnN,GAGX7C,EAAQ6B,UAAUuU,oBAAsB,WACpC,GAAIvT,GAAO,EAcX,OAbAd,MAAKI,KAAKb,KAAKqP,KAAK7N,QAAQ,SAAUwT,GAClC,GAAIC,GAAM,EACVD,GAAGxT,QAAQ,SAAU0T,GACjBD,+HAGcC,EAAGxG,QAHjB,uEAQJnN,+BAAoC0T,EAApC,WAEG1T,GAGX7C,EAAQ6B,UAAUwU,sBAAwB,WACtC,MAAOtU,MAAKI,KAAKb,KAAKsP,QAI1B5Q,EAAQ6B,UAAUoB,MAAQ,aAI1BxD,EAAOC,QAAUM,Gf4hEX,SAAUP,EAAQC,OAKrB","file":"js/pages/dev-components.4d7d2aea94dffce6617f.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */,\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\nvar TouchSlide = __webpack_require__(5); // 轮播图插件\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            startFun: function startFun() {},\n            endFun: function endFun() {}\n        },\n        // 配置\n        config: {\n            isShowHref: true, // 是否有跳转\n            // TouchSlide插件的配置\n            touchSlide: {\n                slideCell: '', // 外部容器,这个值会在底部进行覆盖,因为在这里没办法获取this\n                mainCell: '.g-slide-body', // 切换元素的包裹层对象\n                titCell: '.g-slide-header .g-slide-items', // 导航元素对象\n                effect: 'leftLoop', // 效果'left' 'leftLoop'\n                autoPlay: true, // 自动播放\n                delayTime: 200, // 切换一次的持续时间\n                interTime: 3000, // 多久切换一次\n                startFun: function startFun() {\n                    console.log('此处的函数会被覆盖,请在callback里执行回调');\n                },\n                endFun: function endFun() {\n                    console.log('此处的函数会被覆盖,请在callback里执行回调');\n                },\n                defaultIndex: 0, // 默认的当前位置索引\n                switchLoadClass: '.pre-load', // 预加载的class\n                switchLoad: 'data-src' // 预加载的属性\n            }\n        },\n        // 数据\n        data: {\n            items: [{\n                img: {\n                    width: 0,\n                    height: 0,\n                    src: 'http://img1.imgtn.bdimg.com/it/u=1056872014,4038868309&fm=23&gp=0.jpg'\n                },\n                href: ''\n            }]\n        }\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-slide',\n            innerHTML: '\\n                ' + this.renderHeader() + '\\n                ' + this.renderBody() + '\\n            '\n        }\n    });\n};\n\nSubType.prototype.renderHeader = function () {\n    var self = this;\n    var html = '';\n    var data = self.opts.data;\n    var className = '';\n    data.items.forEach(function (v, i) {\n        if (i === self.opts.config.touchSlide.defaultIndex) {\n            className = 'on';\n        }\n        html += '<div class=\"g-slide-items ' + className + '\"></div>';\n    });\n    return '<div class=\"g-slide-header\">' + html + '</div>';\n};\n\nSubType.prototype.renderBody = function () {\n    var self = this;\n    var html = '';\n    var data = self.opts.data;\n    data.items.forEach(function (v) {\n        if (self.opts.config.isShowHref) {\n            html += '<a href=\"' + (v.href || 'javascript:;') + '\" class=\"g-slide-items pre-load\" data-src=\"' + v.img.src + '\"></a>';\n        } else {\n            html += '<a class=\"g-slide-items pre-load\" data-src=\"' + v.img.src + '\"></a>';\n        }\n    });\n    return '<div class=\"g-slide-body\">' + html + '</div>';\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    var self = this;\n    var callback = self.opts.callback;\n    var config = self.opts.config;\n    var touchSlide = config.touchSlide;\n    touchSlide.slideCell = self.opts.wrap; // 外部容器,必须是id\n    touchSlide.startFun = function (i) {\n        // 因为以下功能在插件本身进行了实现(本人对touch-slide插件进行了小修改),所以这里就注释了\n        // var allImg = self.moduleDom.querySelectorAll('.g-slide-body .g-slide-items');\n        // var nowIndex = ( i + 1);\n        // if (touchSlide.effect == 'left') {\n        //     nowIndex = i;\n        // }\n        // var nowImg = allImg[nowIndex];\n        // var prevImg = allImg[nowIndex - 1];\n        // var nextImg = allImg[nowIndex + 1];\n        // nowImg.style.backgroundImage = `url(${nowImg.dataset.src})`;\n        // prevImg && (prevImg.style.backgroundImage = `url(${prevImg.dataset.src})`);\n        // nextImg && (nextImg.style.backgroundImage = `url(${nextImg.dataset.src})`);\n        callback.startFun({ self: self, index: i });\n    };\n    touchSlide.endFun = function (i) {\n        callback.endFun({ self: self, index: i });\n    };\n    TouchSlide(self.opts.config.touchSlide);\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*!\n * TouchSlide v1.1\n * javascript触屏滑动特效插件，移动端滑动特效，触屏焦点图，触屏Tab切换，触屏多图切换等\n * 详尽信息请看官网：http://www.SuperSlide2.com/TouchSlide/\n *\n * Copyright 2013 大话主席\n *\n * 请尊重原创，保留头部版权\n * 在保留版权的前提下可应用于个人或商业用途\n\n * 1.1 宽度自适应（修复安卓横屏时滑动范围不变的bug）\n */\n\n/*\n * 本人对此文件进行了稍微改动,还请见谅\n * 1.支持传入class和dom节点\n * 2.样式修改成flex布局\n * 3.把一些不规范的语法警告提示修正\n * 4.添加预加载功能pre-load,去掉插件自带的懒加载功能\n * 5.给主体区域的切换每一项加上className\n * */\n\nvar TouchSlide = function TouchSlide(a) {\n    a = a || {};\n    var opts = {\n        slideCell: a.slideCell || \"#touchSlide\", //运行效果主对象，必须用id！，例如 slideCell:\"#touchSlide\"\n        titCell: a.titCell || \".hd li\", // 导航对象，当自动分页设为true时为“导航对象包裹层”\n        mainCell: a.mainCell || \".bd\", // 切换对象包裹层\n        effect: a.effect || \"left\", // 效果，支持 left、leftLoop\n        autoPlay: a.autoPlay || false, // 自动播放\n        delayTime: a.delayTime || 200, // 效果持续时间\n        interTime: a.interTime || 2500, // 自动运行间隔\n        defaultIndex: a.defaultIndex || 0, // 默认的当前位置索引。0是第一个； defaultIndex:1 时，相当于从第2个开始执行\n        titOnClassName: a.titOnClassName || \"on\", // 当前导航对象添加的className\n        autoPage: a.autoPage || false, // 自动分页，当为true时titCell为“导航对象包裹层”\n        prevCell: a.prevCell || \".prev\", // 前一页按钮\n        nextCell: a.nextCell || \".next\", // 后一页按钮\n        pageStateCell: a.pageStateCell || \".pageState\", // 分页状态对象，用于显示分页状态，例如：2/3\n        pnLoop: a.pnLoop == 'undefined ' ? true : a.pnLoop, // 前后按钮点击是否继续执行效果，当为最前/后页是会自动添加“prevStop”/“nextStop”控制样色\n        startFun: a.startFun || null, // 每次切换效果开始时执行函数，用于处理特殊情况或创建更多效果。用法 satrtFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        endFun: a.endFun || null, // 每次切换效果结束时执行函数，用于处理特殊情况或创建更多效果。用法 endFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        switchLoadClass: a.switchLoadClass || '.pre-load', //预加载的class\n        switchLoad: a.switchLoad || 'data-src' //预加载的属性\n    };\n    var slideCell = null;\n    //如果是字符串\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'string') {\n        slideCell = document.querySelector(opts.slideCell);\n    }\n    //如果是dom节点(一个元素)    原生的\n    if (opts.slideCell.nodeType == 1) {\n        slideCell = opts.slideCell;\n    }\n    /*\n     * 如果是dom集合(一组元素)    HtmlCollection(通过getElementsBy系列获取到的)\n     * 如果是dom集合(一组元素)    NodeList(通过querySelectorAll获取到的)\n     * */\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'htmlcollection' || Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'nodelist') {\n        slideCell = opts.slideCell[0];\n    }\n    if (!slideCell) {\n        return;\n    }\n    //简单模拟jquery选择器\n    var obj = function obj(str, parEle) {\n        str = str.split(\" \");\n        var par = [];\n        parEle = parEle || document;\n        var retn = [parEle];\n        for (var attr in str) {\n            if (str.hasOwnProperty(attr)) {\n                if (str[attr].length != 0) {\n                    par.push(str[attr]);\n                }\n            }\n        }\n        //去掉重复空格\n        for (var i in par) {\n            if (par.hasOwnProperty(i)) {\n                if (retn.length == 0) {\n                    return false;\n                }\n                var _retn = [];\n                for (var r in retn) {\n                    if (retn.hasOwnProperty(r)) {\n                        if (par[i][0] == \"#\") {\n                            _retn.push(document.getElementById(par[i].replace(\"#\", \"\")));\n                        } else if (par[i][0] == \".\") {\n                            var tag = retn[r].getElementsByTagName('*');\n                            for (var j = 0; j < tag.length; j++) {\n                                var cln = tag[j].className;\n                                if (cln && cln.search && cln.search(new RegExp(\"\\\\b\" + par[i].replace(\".\", \"\") + \"\\\\b\")) != -1) {\n                                    _retn.push(tag[j]);\n                                }\n                            }\n                        } else {\n                            var tag2 = retn[r].getElementsByTagName(par[i]);\n                            for (var k = 0; k < tag2.length; k++) {\n                                _retn.push(tag2[k]);\n                            }\n                        }\n                    }\n                }\n                retn = _retn;\n            }\n        }\n        return retn.length == 0 || retn[0] == parEle ? false : retn;\n    };\n    // 创建包裹层\n    var wrap = function wrap(el, v) {\n        var tmp = document.createElement('div');\n        tmp.innerHTML = v;\n        tmp = tmp.children[0];\n        var _el = el.cloneNode(true);\n        tmp.appendChild(_el);\n        el.parentNode.replaceChild(tmp, el);\n        conBox = _el; // 重置conBox\n        return tmp;\n    };\n    // class处理\n    var addClass = function addClass(ele, className) {\n        if (!ele || !className || ele.className && ele.className.search(new RegExp(\"\\\\b\" + className + \"\\\\b\")) != -1) {\n            return;\n        }\n        ele.className += (ele.className ? \" \" : \"\") + className;\n    };\n    var removeClass = function removeClass(ele, className) {\n        if (!ele || !className || ele.className && ele.className.search(new RegExp(\"\\\\b\" + className + \"\\\\b\")) == -1) {\n            return;\n        }\n        ele.className = ele.className.replace(new RegExp(\"\\\\s*\\\\b\" + className + \"\\\\b\", \"g\"), \"\");\n    };\n    //全局对象\n    var effect = opts.effect;\n    var prevBtn = obj(opts.prevCell, slideCell)[0];\n    var nextBtn = obj(opts.nextCell, slideCell)[0];\n    var pageState = obj(opts.pageStateCell)[0];\n    var conBox = obj(opts.mainCell, slideCell)[0]; //内容元素父层对象\n    if (!conBox) {\n        return;\n    }\n    var conBoxSize = conBox.children.length;\n    var navObj = obj(opts.titCell, slideCell); //导航子元素结合\n    var navObjSize = navObj ? navObj.length : conBoxSize;\n    /*字符串转换*/\n    var index = parseInt(opts.defaultIndex);\n    var delayTime = parseInt(opts.delayTime);\n    var interTime = parseInt(opts.interTime);\n    var autoPlay = !(opts.autoPlay == \"false\" || opts.autoPlay == false);\n    var autoPage = !(opts.autoPage == \"false\" || opts.autoPage == false);\n    var loop = !(opts.pnLoop == \"false\" || opts.pnLoop == false);\n    var oldIndex = index;\n    var inter = null; // autoPlay的setInterval\n    var timeout = null; // leftLoop的setTimeout\n    var endTimeout = null; //translate的setTimeout\n    var startX = 0;\n    var startY = 0;\n    var distX = 0;\n    var distY = 0;\n    //var dist = 0; //手指滑动距离\n    var isTouchPad = /hp-tablet/gi.test(navigator.appVersion);\n    var hasTouch = 'ontouchstart' in window && !isTouchPad;\n    var touchStart = hasTouch ? 'touchstart' : 'mousedown';\n    var touchMove = hasTouch ? 'touchmove' : '';\n    var touchEnd = hasTouch ? 'touchend' : 'mouseup';\n    var slideW = conBox.parentNode.clientWidth; // mainCell滑动距离\n    var twCell;\n    var scrollY;\n    var tempSize = conBoxSize;\n    //处理分页\n    if (navObjSize == 0) {\n        navObjSize = conBoxSize;\n    }\n    if (autoPage) {\n        navObjSize = conBoxSize;\n        navObj = navObj[0];\n        navObj.innerHTML = \"\";\n        var str = \"\";\n\n        if (opts.autoPage == true || opts.autoPage == \"true\") {\n            for (var i = 0; i < navObjSize; i++) {\n                str += \"<li>\" + (i + 1) + \"</li>\";\n            }\n        } else {\n            for (var x = 0; x < navObjSize; x++) {\n                str += opts.autoPage.replace(\"$\", x + 1);\n            }\n        }\n        navObj.innerHTML = str;\n        navObj = navObj.children; //重置navObj\n    }\n    if (effect == \"leftLoop\") {\n        tempSize += 2;\n        conBox.appendChild(conBox.children[0].cloneNode(true));\n        conBox.insertBefore(conBox.children[conBoxSize - 1].cloneNode(true), conBox.children[0]);\n    }\n    twCell = wrap(conBox, '<div class=\"tempWrap\" style=\"height:inherit;overflow:hidden; position:relative;\"></div>');\n    conBox.style.cssText = \"display:flex;width:\" + tempSize * slideW + \"px;\" + \"position:relative;overflow:hidden;padding:0;margin:0;\";\n    for (var y = 0; y < tempSize; y++) {\n        conBox.children[y].style.cssText = \"height:inherit;display:flex;align-items: center;justify-content: center;width:\" + slideW + \"px\";\n    }\n    var doStartFun = function doStartFun() {\n        if (typeof opts.startFun == 'function') {\n            opts.startFun(index, navObjSize);\n        }\n    };\n    var doEndFun = function doEndFun() {\n        if (typeof opts.endFun == 'function') {\n            opts.endFun(index, navObjSize);\n        }\n    };\n    //动态设置滑动宽度\n    var orientationChange = function orientationChange() {\n        slideW = twCell.clientWidth;\n        conBox.style.width = tempSize * slideW + \"px\";\n        for (var i = 0; i < tempSize; i++) {\n            conBox.children[i].style.width = slideW + \"px\";\n        }\n        var ind = effect == \"leftLoop\" ? index + 1 : index;\n        translate(-ind * slideW, 0);\n    };\n    window.addEventListener(\"resize\", orientationChange, false);\n    //滑动效果\n    var translate = function translate(dist, speed, ele) {\n        if (!!ele) {\n            ele = ele.style;\n        } else {\n            ele = conBox.style;\n        }\n        ele.webkitTransitionDuration = ele.MozTransitionDuration = ele.msTransitionDuration = ele.OTransitionDuration = ele.transitionDuration = speed + 'ms';\n        ele.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';\n        ele.msTransform = ele.MozTransform = ele.OTransform = 'translateX(' + dist + 'px)';\n    };\n    //效果函数\n    var doPlay = function doPlay(isTouch) {\n        switch (effect) {\n            case \"left\":\n                if (index >= navObjSize) {\n                    index = isTouch ? index - 1 : 0;\n                } else if (index < 0) {\n                    index = isTouch ? 0 : navObjSize - 1;\n                }\n                translate(-index * slideW, delayTime);\n                oldIndex = index;\n                break;\n            case \"leftLoop\":\n                translate(-(index + 1) * slideW, delayTime);\n                if (index == -1) {\n                    timeout = setTimeout(function () {\n                        translate(-navObjSize * slideW, 0);\n                    }, delayTime);\n                    index = navObjSize - 1;\n                } else if (index == navObjSize) {\n                    timeout = setTimeout(function () {\n                        translate(-slideW, 0);\n                    }, delayTime);\n                    index = 0;\n                }\n                oldIndex = index;\n                break;\n\n        }\n        //预加载\n        (function () {\n            var nowIndex = effect == \"leftLoop\" ? index + 1 : index;\n            var allImage = conBox.querySelectorAll(opts.switchLoadClass);\n            var changeImagesSrc = function changeImagesSrc(img) {\n                if (img) {\n                    var imgSwitchSrc = img.getAttribute(opts.switchLoad);\n                    if (!imgSwitchSrc) {\n                        return false;\n                    }\n                    if (img.tagName.toLowerCase() == 'img') {\n                        img.src = imgSwitchSrc;\n                    } else {\n                        img.style.backgroundImage = \"url(\" + imgSwitchSrc + \")\";\n                    }\n                }\n            };\n            if (allImage.length > 0) {\n                changeImagesSrc(allImage[nowIndex]);\n                changeImagesSrc(allImage[nowIndex - 1]);\n                changeImagesSrc(allImage[nowIndex + 1]);\n            }\n        })();\n        doStartFun();\n        endTimeout = setTimeout(function () {\n            doEndFun();\n        }, delayTime);\n        //给按钮区域的切换每一项加上className\n        for (var i = 0; i < navObjSize; i++) {\n            removeClass(navObj[i], opts.titOnClassName);\n            if (i == index) {\n                addClass(navObj[i], opts.titOnClassName);\n            }\n        }\n        /*\n         * 给主体区域的切换每一项加上className\n         * 注:如果想配合className写css3小效果,建议使用effect属性的left值\n         * 否则切换到尾帧和切换到首帧时,视觉上的体验不好\n         * */\n        // (function () {\n        //     var nowJ = effect == \"leftLoop\" ? index + 1 : index;\n        //     for (var j = 0; j < conBox.children.length; j++) {\n        //         removeClass(conBox.children[j], opts.titOnClassName);\n        //         if (j == nowJ) {\n        //             addClass(conBox.children[j], opts.titOnClassName);\n        //         }\n        //     }\n        // })();\n        //loop控制是否继续循环\n        if (loop == false) {\n            removeClass(nextBtn, \"nextStop\");\n            removeClass(prevBtn, \"prevStop\");\n            if (index == 0) {\n                addClass(prevBtn, \"prevStop\");\n            } else if (index == navObjSize - 1) {\n                addClass(nextBtn, \"nextStop\");\n            }\n        }\n        if (pageState) {\n            pageState.innerHTML = \"<span>\" + (index + 1) + \"</span>/\" + navObjSize;\n        }\n    };\n    //初始化执行\n    doPlay();\n    //自动播放\n    if (autoPlay) {\n        inter = setInterval(function () {\n            index++;\n            doPlay();\n        }, interTime);\n    }\n    //点击事件\n    if (navObj) {\n        for (var z = 0; z < navObjSize; z++) {\n            (function () {\n                var j = z;\n                navObj[j].addEventListener('click', function () {\n                    clearTimeout(timeout);\n                    clearTimeout(endTimeout);\n                    index = j;\n                    doPlay();\n                });\n            })();\n        }\n    }\n    if (nextBtn) {\n        nextBtn.addEventListener('click', function () {\n            if (loop == true || index != navObjSize - 1) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index++;\n                doPlay();\n            }\n        });\n    }\n    if (prevBtn) {\n        prevBtn.addEventListener('click', function () {\n            if (loop == true || index != 0) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index--;\n                doPlay();\n            }\n        });\n    }\n    //触摸开始函数\n    var tStart = function tStart(e) {\n        clearTimeout(timeout);\n        clearTimeout(endTimeout);\n        scrollY = undefined;\n        distX = 0;\n        var point = hasTouch ? e.touches[0] : e;\n        startX = point.pageX;\n        startY = point.pageY;\n        //添加“触摸移动”事件监听\n        conBox.addEventListener(touchMove, tMove, false);\n        //添加“触摸结束”事件监听\n        conBox.addEventListener(touchEnd, tEnd, false);\n    };\n    //触摸移动函数\n    var tMove = function tMove(e) {\n        if (hasTouch) {\n            if (e.touches.length > 1 || e.scale && e.scale !== 1) {\n                return;\n            }\n        }\n        //多点或缩放\n        var point = hasTouch ? e.touches[0] : e;\n        distX = point.pageX - startX;\n        distY = point.pageY - startY;\n        if (typeof scrollY == 'undefined') {\n            scrollY = !!(scrollY || Math.abs(distX) < Math.abs(distY));\n        }\n        if (!scrollY) {\n            e.preventDefault();\n            if (autoPlay) {\n                clearInterval(inter);\n            }\n            switch (effect) {\n                case \"left\":\n                    if (index == 0 && distX > 0 || index >= navObjSize - 1 && distX < 0) {\n                        distX = distX * 0.4;\n                    }\n                    translate(-index * slideW + distX, 0);\n                    break;\n                case \"leftLoop\":\n                    translate(-(index + 1) * slideW + distX, 0);\n                    break;\n            }\n        }\n    };\n    //触摸结束函数\n    var tEnd = function tEnd(e) {\n        if (distX == 0) {\n            return;\n        }\n        e.preventDefault();\n        if (!scrollY) {\n            if (Math.abs(distX) > slideW / 10) {\n                distX > 0 ? index-- : index++;\n            }\n            doPlay(true);\n            if (autoPlay) {\n                inter = setInterval(function () {\n                    index++;\n                    doPlay();\n                }, interTime);\n            }\n        }\n\n        conBox.removeEventListener(touchMove, tMove, false);\n        conBox.removeEventListener(touchEnd, tEnd, false);\n    };\n    //添加“触摸开始”事件监听\n    conBox.addEventListener(touchStart, tStart, false);\n};\n\nmodule.exports = TouchSlide;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2);\n// 超类型(子类型继承的对象)\nvar route = '/phone/';\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {},\n        // 数据\n        data: {\n            items: [{\n                href: route,\n                icon: 'icon-shouye',\n                text: '首页',\n                isShowMark: false\n            }, {\n                href: route + 'dev-globals/',\n                icon: 'icon-kaifa',\n                text: '开发全局',\n                isShowMark: false\n            }, {\n                href: route + 'dev-components/',\n                icon: 'icon-kaifa',\n                text: '开发组件',\n                isShowMark: false\n            }, {\n                href: route + 'dev-words/',\n                icon: 'icon-kaifa',\n                text: '标准词汇',\n                isShowMark: false\n            }, {\n                href: route + 'mine/',\n                icon: 'icon-wode',\n                text: '我的',\n                isShowMark: false\n            }]\n        }\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    var data = this.opts.data;\n    var items = data.items;\n    var html = '';\n    items.forEach(function (v) {\n        var markHtml = '';\n        if (v.isShowMark) {\n            markHtml = '<div class=\"g-navigation-mark\"></div>';\n        }\n        html += '\\n            <a href=\"' + v.href + '\" class=\"g-navigation-item\">\\n                <div class=\"g-navigation-icon iconfont ' + v.icon + '\"></div>\\n                <div class=\"g-navigation-text\">' + v.text + '</div>\\n                ' + markHtml + '\\n            </a>\\n        ';\n    });\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-navigation',\n            innerHTML: html\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 7 */,\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {\n            // isShowMask: false,  //是否显示遮罩(默认不显示)\n            status: 'loading', // 加载状态 loading(加载中) over(加载完毕)\n            positionMethod: '', // 模块的定位方式 'fixed'(相对于整个文档) 'absolute'(相对于外部容器)\n            positionLocation: 'center', // 模块的定位位置\n            moduleDomIsShow: false // 内部模块是否显示(默认不显示)\n        },\n        // 数据\n        data: {}\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    var config = this.opts.config;\n    var moduleDomHtml = '';\n    var moduleDomClass = '';\n    var status = config.status;\n    var positionMethod = config.positionMethod;\n    var positionLocation = config.positionLocation;\n    // 加载中\n    if (status === 'loading') {\n        moduleDomClass = 'g-loading-loading ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += 'g-loading-fixed g-loading-' + positionLocation;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += 'g-loading-absolute g-loading-' + positionLocation;\n        }\n        moduleDomHtml = '\\n            <div class=\"g-loading-wrap\">\\n                <div class=\"g-loading-loading-icon iconfont icon-jiazaizhong\"></div>\\n            </div>\\n        ';\n    }\n    // 加载完毕\n    if (status === 'over') {\n        moduleDomClass = 'g-loading-over ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += 'g-loading-fixed g-loading-' + positionLocation;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += 'g-loading-absolute g-loading-' + positionLocation;\n        }\n        moduleDomHtml = '\\n            <div class=\"g-loading-wrap\">\\n                <div class=\"g-loading-over-icon iconfont icon-meiyoushuju\"></div>\\n                <div class=\"g-loading-over-text\">\\u6CA1\\u6709\\u6570\\u636E\\u4E86</div>\\n            </div>\\n        ';\n    }\n    // 模块创建\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-loading ' + moduleDomClass,\n            innerHTML: moduleDomHtml\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        wrap: '.g-wrap',\n        // 回调\n        callback: {\n            click: function click() {},\n            moduleDomRenderBefore: function moduleDomRenderBefore(self) {\n                if (self.wrapDom && getComputedStyle(self.wrapDom).position === 'static') {\n                    self.wrapDom.style.position = 'relative';\n                }\n            }\n        },\n        // 配置\n        config: {\n            isTransparent: false, // 是不是透明的(默认不透明)\n            moduleDomIsShow: false // 内部模块是否显示(默认不显示)\n        },\n        // 数据\n        data: {}\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    var isTransparent = '';\n    if (this.opts.config.isTransparent) {\n        isTransparent = 'g-mask-transparent';\n    }\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-mask ' + isTransparent,\n            innerHTML: ''\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    var self = this;\n    this.moduleDom.addEventListener('click', function (ev) {\n        self.opts.callback.click();\n        ev.stopPropagation();\n    });\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\n\n// 底层构造函数\n\nvar SuperType = function () {\n    function SuperType(json) {\n        _classCallCheck(this, SuperType);\n\n        // 函数外部传来的参数\n        // (这个属性在其他模块的内部需要被重写)\n        this.opts = tools.extend({\n            // 内部默认参数\n            defaults: {\n                // 父级\n                wrap: '.g-body', // 这个仅支持传入选择器和原生dom节点\n                // 回调\n                callback: {\n                    // 内部模块创建之前\n                    moduleDomCreateBefore: function moduleDomCreateBefore(self) {\n                        // 内部模块创建之前的回调待续...\n                    },\n                    // 内部模块创建之后\n                    moduleDomCreateAfter: function moduleDomCreateAfter(self) {\n                        // 内部模块创建之后的回调待续...\n                    },\n                    // 内部模块渲染之前\n                    moduleDomRenderBefore: function moduleDomRenderBefore(self) {\n                        // 内部模块渲染之前的回调待续...\n                    },\n                    // 内部模块渲染之后\n                    moduleDomRenderAfter: function moduleDomRenderAfter(self) {\n                        // 内部模块渲染之后的回调待续...\n                    },\n                    // 内部模块移除之前\n                    moduleDomRemoveBefore: function moduleDomRemoveBefore(self) {\n                        // 内部模块移除之前的回调待续...\n                    },\n                    // 内部模块移除之后\n                    moduleDomRemoveAfter: function moduleDomRemoveAfter(self) {\n                        // 内部模块移除之后的回调待续...\n                    },\n                    // 内部模块显示之前\n                    moduleDomShowBefore: function moduleDomShowBefore(self) {\n                        // 内部模块显示之前的回调待续...\n                    },\n                    // 内部模块显示之后\n                    moduleDomShowAfter: function moduleDomShowAfter(self) {\n                        // 内部模块显示之后的回调待续...\n                    },\n                    // 内部模块隐藏之前\n                    moduleDomHideBefore: function moduleDomHideBefore(self) {\n                        // 内部模块隐藏之前的回调待续...\n                    },\n                    // 内部模块隐藏之后\n                    moduleDomHideAfter: function moduleDomHideAfter(self) {\n                        // 内部模块隐藏之后的回调待续...\n                    },\n                    // 外部容器获取之前\n                    wrapDomGetBefore: function wrapDomGetBefore(self) {\n                        // 外部容器获取之前的回调待续...\n                    },\n                    // 外部容器获取之后\n                    wrapDomGetAfter: function wrapDomGetAfter(self) {\n                        // 外部容器获取之后的回调待续...\n                    },\n                    // 外部容器移除之前\n                    wrapDomRemoveBefore: function wrapDomRemoveBefore(self) {\n                        // 外部容器移除之前的回调待续...\n                    },\n                    // 外部容器移除之后\n                    wrapDomRemoveAfter: function wrapDomRemoveAfter(self) {\n                        // 外部容器移除之后的回调待续...\n                    }\n                },\n                // 配置\n                config: {\n                    // 内部模块的自定义属性\n                    moduleDomCustomAttribute: {},\n                    // 内部模块插入到外部容器的方式\n                    moduleDomRenderMethod: {\n                        method: 'appendChild', // 'appendChild','insertBefore'\n                        child: null\n                    },\n                    moduleDomStyle: {}, // 内部模块的样式\n                    moduleDomIsShow: true, // 内部模块是否显示(默认显示)\n                    moduleDomIsClearTimer: true // 内部模块是否清除所有定时器(默认清除)\n                },\n                // 数据\n                data: {}\n            },\n            // 外部传入参数\n            inherits: json\n        });\n        // 函数内部自带的属性\n        this.moduleDom = null; // 内部的模块\n        this.wrapDom = null; // 内部模块的外部承载容器,如果没有也没关系,不过不往里面append罢了\n        this.moduleDomTimer = {}; // 内部模块的定时器存储(假设内部模块有定时器)\n        // this.init();//初始化(用es6继承的话,在超类里调初始化没有意义,因为子类的参数还没有被赋予新值,建议不要在超类里初始化,在子类里初始化)\n    }\n\n    // 初始化\n\n\n    _createClass(SuperType, [{\n        key: 'init',\n        value: function init() {\n            this.render();\n            this.power();\n        }\n\n        // 渲染\n\n    }, {\n        key: 'render',\n        value: function render() {\n            this.moduleDomRemove(); // 内部模块的移除(重新初始化的时候要移除掉以前有的内部模块)\n\n            var callback = this.opts.callback;\n            callback.moduleDomCreateBefore(this);\n            this.moduleDomCreate(); // 内部模块的创建\n            callback.moduleDomCreateAfter(this);\n\n            this.wrapDomGet(); // 外部容器的获取\n            this.moduleDomRender(); // 内部模块的渲染(如果外部容器存在,就把内部模块填充到外部容器里)\n        }\n\n        // 功能(这个方法在其他模块的内部需要被重写)\n\n    }, {\n        key: 'power',\n        value: function power() {}\n        // 功能待续...\n\n\n        // 内部模块的创建(这个方法在其他模块的内部需要被重写)\n\n    }, {\n        key: 'moduleDomCreate',\n        value: function moduleDomCreate() {\n            this.moduleDom = applications.createElement({\n                style: this.opts.config.moduleDomStyle,\n                customAttribute: this.opts.config.moduleDomCustomAttribute,\n                attribute: {\n                    className: 'g-super-type-es6',\n                    innerHTML: '\\n                    <div class=\"g-super-type-es6-text\">\\u5468\\u534E\\u98DE\\u7231\\u4FAF\\u4E3D\\u6770,\\u4FAF\\u4E3D\\u6770\\u7231\\u5468\\u534E\\u98DE</div>\\n                '\n                }\n            });\n        }\n\n        // 内部模块的渲染\n\n    }, {\n        key: 'moduleDomRender',\n        value: function moduleDomRender() {\n            var callback = this.opts.callback;\n            var config = this.opts.config;\n            if (config.moduleDomIsShow && this.wrapDom) {\n                callback.moduleDomRenderBefore(this);\n                var renderMethod = config.moduleDomRenderMethod;\n                if (renderMethod.method === 'insertBefore') {\n                    var dom = applications.getDomArray({ element: renderMethod.child })[0];\n                    if (dom) {\n                        this.wrapDom.insertBefore(this.moduleDom, dom);\n                    } else {\n                        this.wrapDom.insertBefore(this.moduleDom, this.wrapDom.children[0]);\n                    }\n                }\n                if (renderMethod.method === 'appendChild') {\n                    this.wrapDom.appendChild(this.moduleDom);\n                }\n                callback.moduleDomRenderAfter(this);\n            }\n        }\n\n        // 内部模块的移除\n\n    }, {\n        key: 'moduleDomRemove',\n        value: function moduleDomRemove() {\n            var callback = this.opts.callback;\n            if (this.moduleDom && this.moduleDom.parentNode) {\n                callback.moduleDomRemoveBefore(this);\n                this.moduleDom.parentNode.removeChild(this.moduleDom);\n                callback.moduleDomRemoveAfter(this);\n            }\n            this.moduleDomClearTimer();\n        }\n\n        // 内部模块的定时器清除(假设内部模块有定时器)\n\n    }, {\n        key: 'moduleDomClearTimer',\n        value: function moduleDomClearTimer() {\n            var self = this;\n            if (self.opts.config.moduleDomIsClearTimer) {\n                Object.keys(self.moduleDomTimer).forEach(function (attr) {\n                    clearInterval(self.moduleDomTimer[attr]);\n                    clearTimeout(self.moduleDomTimer[attr]);\n                });\n            }\n        }\n\n        // 内部模块的显示(显示隐藏和是否清除定时器无关)\n\n    }, {\n        key: 'moduleDomShow',\n        value: function moduleDomShow() {\n            var callback = this.opts.callback;\n            callback.moduleDomShowBefore(this);\n            if (this.wrapDom) {\n                this.opts.config.moduleDomIsShow = true;\n                this.moduleDomRender();\n            }\n            callback.moduleDomShowAfter(this);\n        }\n\n        // 内部模块的隐藏(显示隐藏和是否清除定时器无关)\n\n    }, {\n        key: 'moduleDomHide',\n        value: function moduleDomHide() {\n            var callback = this.opts.callback;\n            if (this.moduleDom.parentNode) {\n                this.opts.config.moduleDomIsShow = false;\n                callback.moduleDomHideBefore(this);\n                this.moduleDom.parentNode.removeChild(this.moduleDom);\n                callback.moduleDomHideAfter(this);\n            }\n        }\n\n        // 外部容器的获取\n\n    }, {\n        key: 'wrapDomGet',\n        value: function wrapDomGet() {\n            var callback = this.opts.callback;\n            callback.wrapDomGetBefore(this);\n            this.wrapDom = applications.getDomArray({ element: this.opts.wrap })[0];\n            callback.wrapDomGetAfter(this);\n        }\n\n        // 外部容器的移除\n\n    }, {\n        key: 'wrapDomRemove',\n        value: function wrapDomRemove() {\n            var callback = this.opts.callback;\n            // 先移除内部的模块\n            this.moduleDomRemove();\n            // 再移除外部的容器\n            if (this.wrapDom) {\n                callback.wrapDomRemoveBefore(this);\n                this.wrapDom.parentNode.removeChild(this.wrapDom);\n                callback.wrapDomRemoveAfter(this);\n            }\n        }\n\n        // 获取内部模块的整体html结构\n\n    }, {\n        key: 'getModuleDomHtml',\n        value: function getModuleDomHtml() {\n            return this.moduleDom.outerHTML;\n        }\n    }]);\n\n    return SuperType;\n}();\n\nmodule.exports = SuperType;\n\n/***/ }),\n/* 11 */,\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nwindow.addEventListener('load', function () {\n    setTimeout(function () {\n        var applications = __webpack_require__(0);\n\n        // ajax测试\n        (function () {\n            // var Ajax = require('../tools/ajax');\n            // new Ajax({\n            //     callback: {},\n            //     config: {\n            //         url: '/api/getList'\n            //     },\n            //     data: {\n            //         hellow: 'hellow'\n            //     }\n            // })\n        })();\n\n        // base函数测试\n        (function () {\n            var WhenScrollBottom = applications.whenScrollBottom();\n            // 测试滚动到底部loading\n            new WhenScrollBottom({\n                callback: {\n                    success: function success(self) {\n                        var Loading = __webpack_require__(8);\n                        var loading = new Loading({\n                            wrap: '.g-body',\n                            config: {\n                                status: 'loading'\n                            }\n                        });\n                        loading.moduleDomShow();\n                    }\n                }\n            });\n        })();\n\n        // slide切换\n        (function () {\n            var Slide = __webpack_require__(4);\n            new Slide({\n                wrap: '.page-slide',\n                data: {\n                    items: [{\n                        img: {\n                            width: 0,\n                            height: 0,\n                            src: 'http://img1.imgtn.bdimg.com/it/u=1056872014,4038868309&fm=23&gp=0.jpg'\n                        },\n                        href: ''\n                    }, {\n                        img: {\n                            width: 0,\n                            height: 0,\n                            src: 'http://img3.imgtn.bdimg.com/it/u=1732308780,3782498029&fm=23&gp=0.jpg'\n                        },\n                        href: ''\n                    }, {\n                        img: {\n                            width: 0,\n                            height: 0,\n                            src: 'http://img3.imgtn.bdimg.com/it/u=4027566086,3099254237&fm=23&gp=0.jpg'\n                        },\n                        href: ''\n                    }, {\n                        img: {\n                            width: 0,\n                            height: 0,\n                            src: 'http://img4.imgtn.bdimg.com/it/u=120609946,455952432&fm=23&gp=0.jpg'\n                        },\n                        href: ''\n                    }, {\n                        img: {\n                            width: 0,\n                            height: 0,\n                            src: 'http://img2.imgtn.bdimg.com/it/u=2763208243,961494673&fm=23&gp=0.jpg'\n                        },\n                        href: ''\n                    }]\n                }\n            });\n        })();\n\n        // 导航\n        (function () {\n            var Navigation = __webpack_require__(6);\n            new Navigation({ wrap: '.page-navigation' });\n        })();\n\n        // 弹窗测试\n        (function () {\n            var Dialog = __webpack_require__(13);\n            new Dialog({\n                callback: {\n                    confirm: function confirm() {\n                        new Dialog({ config: { alert: { icon: 'icon-chenggong', content: '已确认' } } });\n                    },\n                    cancel: function cancel() {\n                        new Dialog({ config: { alert: { icon: 'icon-chenggong', content: '已取消' } } });\n                    },\n                    close: function close() {\n                        new Dialog({ config: { alert: { icon: 'icon-chenggong', content: '已关闭' } } });\n                    }\n                },\n                config: {\n                    type: 'confirm'\n                }\n            });\n        })();\n\n        // 分页测试\n        (function () {\n            var Pagination = __webpack_require__(14);\n            new Pagination({ wrap: '.page-pagination' });\n        })();\n\n        // 没有数据\n        (function () {\n            var NoData = __webpack_require__(15);\n            new NoData({ wrap: '.page-no-data' });\n        })();\n\n        // 加载中\n        (function () {\n            var Loading = __webpack_require__(8);\n            var loading = new Loading({\n                config: {\n                    status: 'loading'\n                }\n            });\n            loading.moduleDomShow();\n            var over = new Loading({\n                config: {\n                    status: 'over'\n                }\n            });\n            over.moduleDomShow();\n        })();\n\n        // 超类型模块测试\n        (function () {\n            var SuperType = __webpack_require__(2);\n            new SuperType({ wrap: '.page-super-type' });\n            var SubType = __webpack_require__(16);\n            new SubType({ wrap: '.page-super-type' });\n            var SuperTypeEs6 = __webpack_require__(10);\n            new SuperTypeEs6({ wrap: '.page-super-type' }).init(); // es6继承,不建立在超类型内部直接调init方法\n            var SubTypeEs6 = __webpack_require__(17);\n            new SubTypeEs6({ wrap: '.page-super-type' });\n        })();\n\n        // 返回顶部\n        (function () {\n            var GoTop = __webpack_require__(18);\n            new GoTop();\n        })();\n\n        // 遮罩\n        (function () {\n            var Mask = __webpack_require__(9);\n            var mask = new Mask({\n                callback: {\n                    click: function click() {\n                        mask.moduleDomHide();\n                    }\n                }\n            });\n            // mask.moduleDomShow();\n        })();\n\n        // 单选开关\n        (function () {\n            var Radio = __webpack_require__(19);\n            new Radio({\n                wrap: '.page-radio-switch',\n                callback: {\n                    click: function click(json) {\n                        console.log(json);\n                    }\n                }\n            });\n        })();\n\n        // 表格\n        (function () {\n            var Table = __webpack_require__(20);\n            var table = new Table({\n                wrap: '.page-table',\n                data: {\n                    header: [{\n                        content: '<div>header0</div>'\n                    }, {\n                        content: '<div>header1</div>'\n                    }, {\n                        content: '<div>header2</div>'\n                    }],\n                    body: [[{\n                        content: '<div>body0-0</div>'\n                    }, {\n                        content: '<div>body1-0</div>'\n                    }, {\n                        content: '<div>body2-0</div>'\n                    }], [{\n                        content: '<div>body0-1</div>'\n                    }, {\n                        content: '<div>body1-1</div>'\n                    }, {\n                        content: '<div>body2-1</div>'\n                    }], [{\n                        content: '<div>body0-2</div>'\n                    }, {\n                        content: '<div>body1-2</div>'\n                    }, {\n                        content: '<div>body2-2</div>'\n                    }]],\n                    footer: ''\n                }\n            });\n        })();\n\n        // 星评\n        (function () {\n            // const Star = require('../components/g-star');\n            // const star = new Star({\n            //     wrap: `.page-star`,\n            //     callback: {\n            //         click: function (json) {\n            //             console.log(json);\n            //         }\n            //     }\n            // });\n            __webpack_require__.e/* require.ensure */(0).then((function (require) {\n                var Star = __webpack_require__(56);\n                var star = new Star({\n                    wrap: '.page-star',\n                    callback: {\n                        click: function click(json) {\n                            console.log(json);\n                        }\n                    }\n                });\n            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n        })();\n\n        __webpack_require__(21); // 当前页面用到的样式\n        var common = __webpack_require__(3); // 每个页面都要用到的js(一定要放到最底部)\n    }, 0);\n});\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\nvar Mask = __webpack_require__(9); // 遮罩\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            moduleDomRenderBefore: function moduleDomRenderBefore(self) {\n                if (self.opts.config.type === 'confirm') {\n                    if (self.opts.config.confirm.isShowMask) {\n                        self.mask = new Mask({\n                            config: {\n                                moduleDomIsShow: true,\n                                moduleDomRenderMethod: { method: 'insertBefore' }\n                            }\n                        });\n                    }\n                    if (self.wrapDom && getComputedStyle(self.wrapDom).position === 'static') {\n                        self.wrapDom.style.position = 'relative';\n                    }\n                }\n            },\n            // 确认\n            confirm: function confirm() {},\n            // 取消\n            cancel: function cancel() {},\n            // 关闭\n            close: function close() {}\n        },\n        // 配置\n        config: {\n            /*\n             * 弹窗类型\n             * `alert`  提示信息类型\n             * `confirm`    确认框类型\n             * */\n            type: 'alert', // 默认是提示框\n            /*\n             * 弹窗位置\n             * `center` 居中\n             * `bottom` 居下\n             * `top` 居上\n             * */\n            positionLocation: 'center', // 弹窗的定位位置    positionMethod定位方式强制fixed\n            // 提示框\n            alert: {\n                time: 2000, // 展示的时间\n                isShowIcon: true, // 是否显示icon\n                icon: 'icon-chenggong', // icon的class\n                content: '成功' // 内容信息\n            },\n            // 确认框\n            confirm: {\n                // 点击确认是否关闭弹窗\n                isShowHeader: true, // 是否显示头部\n                headerContent: '提示:', // 头部内容\n                isShowBody: true, // 是否显示主体\n                bodyContent: '<div>确定要执行这个操作?</div>', // 主体内容\n                isShowFooter: true, // 是否显示尾部\n                footerContent: '', // 尾部内容\n                isShowClose: true, // 是否显示关闭按钮\n                closeContent: '<div class=\"iconfont icon-guanbi\"></div>', // 关闭按钮的内容\n                isShowConfirm: true, // 是否显示确认按钮\n                confirmContent: '确认', // 确认按钮的内容\n                isShowCancel: true, // 是否显示取消按钮\n                cancelContent: '取消', // 取消按钮的内容\n                isCustom: false, // 是否自定义\n                customContent: '', // 自定义的内容\n                isShowIcon: true, // 是否显示icon\n                icon: 'icon-jinggao', // icon的类型\n                isShowMask: true, // 是否显示遮罩\n                isHandHide: false // 是否手动隐藏(一般只用于点击确认时)\n            }\n        },\n        // 数据\n        data: {}\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    var config = this.opts.config;\n    var type = 'g-dialog-' + config.type; // 弹窗类型\n    var positionLocation = 'g-dialog-' + config.positionLocation; // 弹窗的定位位置\n    // 弹窗结构\n    var html = '\\n        ' + this.renderAlert() + '\\n        ' + this.renderConfirm() + '\\n    ';\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-dialog ' + type + ' ' + positionLocation,\n            innerHTML: html\n        }\n    });\n};\n\n// 提示框\nSubType.prototype.renderAlert = function () {\n    var config = this.opts.config;\n    if (config.type !== 'alert') {\n        return '';\n    }\n    var alert = config.alert;\n    var htmlIcon = '';\n    if (alert.isShowIcon) {\n        htmlIcon = '<div class=\"g-dialog-alert-icon iconfont ' + alert.icon + '\"></div>';\n    }\n    return '\\n        ' + htmlIcon + '\\n        <div class=\"g-dialog-alert-text\">' + alert.content + '</div>\\n    ';\n};\n\n// 确认框\nSubType.prototype.renderConfirm = function () {\n    var config = this.opts.config;\n    if (config.type !== 'confirm') {\n        return '';\n    }\n    var confirm = config.confirm;\n    var htmlHeader = '';\n    if (confirm.isShowHeader) {\n        htmlHeader = '<div class=\"g-dialog-header\">' + confirm.headerContent + '</div>';\n    }\n    var htmlBody = '';\n    if (confirm.isShowBody) {\n        var htmlIcon = '';\n        if (confirm.isShowIcon) {\n            htmlIcon = '<div class=\"g-dialog-icon iconfont ' + confirm.icon + '\"></div>';\n        }\n        var bodyClass = 'g-dialog-body-system';\n        var bodyContent = '\\n            ' + htmlIcon + '\\n            <div class=\"g-dialog-text\">' + confirm.bodyContent + '</div>\\n        ';\n        if (confirm.isCustom) {\n            bodyClass = 'g-dialog-body-custom';\n            bodyContent = confirm.bodyContent;\n        }\n        htmlBody = '\\n            <div class=\"g-dialog-body\">\\n                <div class=\"' + bodyClass + '\">\\n                    ' + bodyContent + '\\n                </div>\\n            </div>\\n        ';\n    }\n    var htmlFooter = '';\n    if (confirm.isShowFooter) {\n        var htmlCancel = '';\n        if (confirm.isShowCancel) {\n            htmlCancel = '<div class=\"g-button g-button-cancel g-dialog-cancel\">' + confirm.cancelContent + '</div>';\n        }\n        var htmlConfirm = '';\n        if (confirm.isShowConfirm) {\n            htmlConfirm = '<div class=\"g-button g-dialog-confirm\">' + confirm.confirmContent + '</div>';\n        }\n        htmlFooter = '<div class=\"g-dialog-footer\">' + htmlCancel + htmlConfirm + '</div>';\n    }\n    var htmlClose = '';\n    if (confirm.isShowClose) {\n        htmlClose = '<div class=\"g-dialog-close\">' + confirm.closeContent + '</div>';\n    }\n    return '\\n        ' + htmlHeader + '\\n        ' + htmlBody + '\\n        ' + htmlFooter + '\\n        ' + htmlClose + ' \\n    ';\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    var self = this;\n    var config = this.opts.config;\n    // 提示框\n    if (config.type === 'alert') {\n        setTimeout(function () {\n            self.hide();\n        }, config.alert.time);\n    }\n    // 确认框\n    if (config.type === 'confirm') {\n        var close = this.moduleDom.querySelector('.g-dialog-close');\n        if (close) {\n            close.addEventListener('click', function () {\n                self.hide();\n                self.opts.callback.close();\n            });\n        }\n        var cancel = this.moduleDom.querySelector('.g-dialog-cancel');\n        if (cancel) {\n            cancel.addEventListener('click', function () {\n                self.hide();\n                self.opts.callback.cancel();\n            });\n        }\n        var confirm = this.moduleDom.querySelector('.g-dialog-confirm');\n        if (confirm) {\n            confirm.addEventListener('click', function () {\n                if (!self.opts.config.confirm.isHandHide) {\n                    self.hide();\n                }\n                self.opts.callback.confirm();\n            });\n        }\n    }\n};\n\nSubType.prototype.hide = function () {\n    this.moduleDomHide();\n    if (this.mask) {\n        this.mask.moduleDomHide();\n    }\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 默认数据\nvar defaultData = {\n    nowCount: 10, // 当前页的数据条数\n    allCount: 100, // 数据总条数\n    nowPage: 1, // 当前页\n    allPage: null // 总页数\n};\ndefaultData.allPage = Math.ceil(defaultData.allCount / defaultData.nowCount);\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            // 上一页的回调\n            prevPage: function prevPage() {},\n            // 下一页的回调\n            nextPage: function nextPage() {},\n            // 选择某一页的回调\n            selectPage: function selectPage() {}\n        },\n        // 配置\n        config: {},\n        // 数据\n        data: defaultData\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-pagination',\n            innerHTML: '\\n                <div class=\"g-pagination-text\">\\u7B2C</div>\\n                <div class=\"g-pagination-now-page\">\\n                    <label class=\"g-select\">\\n                        <span class=\"g-select-wrap\">\\n                            <select class=\"g-select-select\">\\n                                ' + this.renderOption() + '\\n                            </select>\\n                            <span class=\"g-select-mark iconfont icon-select\"></span>\\n                        </span>\\n                    </label>\\n                </div>\\n                <div class=\"g-pagination-text\">\\u9875</div>\\n                <a href=\"javascript:;\" class=\"g-pagination-btn g-pagination-btn-inactive iconfont icon-shangyiye\"></a>\\n                <a href=\"javascript:;\" class=\"g-pagination-btn iconfont icon-xiayiye\"></a>\\n            '\n        }\n    });\n    this.prevDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[0]; // 上一页的按钮\n    this.nextDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[1]; // 下一页的按钮\n    this.btnInactiveClass = 'g-pagination-btn-inactive'; // 上一页和下一页的禁用状态\n    this.selectDom = this.moduleDom.querySelector('.g-pagination-now-page .g-select-select'); // 选择某一页的按钮\n};\n\n// 渲染第几页里面的页码\nSubType.prototype.renderOption = function () {\n    var html = '';\n    for (var i = 0; i < this.opts.data.allPage; i++) {\n        html += '<option value=\"' + (i + 1) + '\">' + (i + 1) + '</option>';\n    }\n    return html;\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    var self = this;\n    var data = this.opts.data;\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n\n    this.prevDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.prevPage();\n        }\n    });\n\n    this.nextDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.nextPage();\n        }\n    });\n\n    this.selectDom.addEventListener('change', function () {\n        self.selectPage();\n    });\n};\n\n// 上一页\nSubType.prototype.prevPage = function () {\n    var data = this.opts.data;\n    if (data.nowPage > 1) {\n        data.nowPage--;\n        var oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.previousElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.previousElementSibling.selected = true;\n        }\n        this.nextPageEnable();\n        this.opts.callback.prevPage(this);\n    }\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    console.log(data);\n};\n\n// 下一页\nSubType.prototype.nextPage = function () {\n    var data = this.opts.data;\n    if (data.nowPage < data.allPage) {\n        data.nowPage++;\n        var oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.nextElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.nextElementSibling.selected = true;\n        }\n        this.prevPageEnable();\n        this.opts.callback.nextPage(this);\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    console.log(data);\n};\n\n// 选择第几页\nSubType.prototype.selectPage = function () {\n    var data = this.opts.data;\n    data.nowPage = this.selectDom.value;\n    this.nextPageEnable();\n    this.prevPageEnable();\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    this.opts.callback.selectPage(this);\n    console.log(data);\n};\n\n// 上一页禁用\nSubType.prototype.prevPageDisable = function () {\n    this.prevDom.classList.add(this.btnInactiveClass);\n};\n\n// 上一页启用\nSubType.prototype.prevPageEnable = function () {\n    this.prevDom.classList.remove(this.btnInactiveClass);\n};\n\n// 下一页禁用\nSubType.prototype.nextPageDisable = function () {\n    this.nextDom.classList.add(this.btnInactiveClass);\n};\n\n// 下一页启用\nSubType.prototype.nextPageEnable = function () {\n    this.nextDom.classList.remove(this.btnInactiveClass);\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {\n            button: {\n                isShowIcon: false\n            }\n        },\n        // 数据\n        data: {\n            icon: 'icon-meiyoushuju',\n            text: '没有数据',\n            button: {\n                icon: 'icon-shouye',\n                text: '回首页',\n                href: '/'\n            }\n        }\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    var data = this.opts.data;\n    var buttonIconHtml = '';\n    if (this.opts.config.button.isShowIcon) {\n        buttonIconHtml = '<div class=\"g-button-icon iconfont ' + data.button.icon + '\"></div>';\n    }\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-no-data',\n            innerHTML: '\\n                <div class=\"g-no-data-icon iconfont ' + data.icon + '\"></div>\\n                <div class=\"g-no-data-text\">' + data.text + '</div>\\n                <a class=\"g-no-data-button g-button\" href=\"' + data.button.href + '\">\\n                    ' + buttonIconHtml + '\\n                    <div class=\"g-button-text\">' + data.button.text + '</div>\\n                </a>\\n            '\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {},\n        // 数据\n        data: {}\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-sub-type',\n            innerHTML: '\\n                <div class=\"g-sub-type-text\">\\u5468\\u534E\\u98DE\\u7231\\u4FAF\\u4E3D\\u6770,\\u4FAF\\u4E3D\\u6770\\u7231\\u5468\\u534E\\u98DE</div>\\n            '\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(10); // 超类型(子类型继承的对象)\n\n// 子类型\n\nvar SubType = function (_SuperType) {\n    _inherits(SubType, _SuperType);\n\n    function SubType(json) {\n        _classCallCheck(this, SubType);\n\n        // 这里会执行一次超类里的init\n        // 制定内部的默认值\n        var _this = _possibleConstructorReturn(this, (SubType.__proto__ || Object.getPrototypeOf(SubType)).call(this, json));\n        /*\n         * 继承超类型的属性和方法\n         * 就算使用Super.call继承属性,也会先执行内部的init函数,这个和es6的比较\n         * 我封装的es5继承函数constructor-inherit是先处理的参数this.opts,再进行的继承\n         * 这里的es6继承,是先进行的继承,再处理的参数,因为继承之前,子类无this属性\n         * 不管是es5的继承,还是es6的继承,都会执行函数内部的一切,例如\n         * 我封装的constructor-inherit继承属性时Super.call(this,this.opts),函数内部的init方法被执行了\n         * 执行前我处理了参数this.opts,所有一切还算稳定,我喜欢这个写法\n         * es6继承属性和方法用super(json),继承时函数内部的init方法也被执行了,执行后才处理的参数this.opts\n         * 后处理参数的话,即使我更新了默认的参数配置,覆盖了超类的方法,也获取不到最新参数上的数据,导致默认参数无效\n         * 因为函数执行super(json)的时候,init已经被调用了,数据是后更新的,所以不能获取到,因此\n         * 我需要清除内部模块,并进行重新调用,这点我很不喜欢,所以我现在的场景还是更适合es5的面向对象\n         * 注:init方法是我封装的超类型里的初始化方法,this.opts是超类型里的参数,参数我喜欢用对象的形式\n         * */\n\n\n        _this.opts = tools.extend({\n            defaults: _this.opts,\n            // inherits里放默认参数(继承超类型)\n            inherits: {\n                // 回调\n                callback: {},\n                // 配置\n                config: {},\n                // 数据\n                data: {}\n            }\n        });\n        // 接收外部的参数\n        _this.opts = tools.extend({\n            defaults: _this.opts,\n            inherits: json\n        });\n        _this.init(); // 用es6继承的话,在子类里调初始化才有意义,因为子类的参数已经被赋予新值,建议不要在超类里初始化,在子类里初始化\n        return _this;\n    }\n\n    // 内部模块的创建(覆盖超类型)\n\n\n    _createClass(SubType, [{\n        key: 'moduleDomCreate',\n        value: function moduleDomCreate() {\n            this.moduleDom = applications.createElement({\n                style: this.opts.config.moduleDomStyle,\n                customAttribute: this.opts.config.moduleDomCustomAttribute,\n                attribute: {\n                    className: 'g-sub-type-es6',\n                    innerHTML: '\\n                    <div class=\"g-sub-type-es6-text\">\\u5468\\u534E\\u98DE\\u7231\\u4FAF\\u4E3D\\u6770,\\u4FAF\\u4E3D\\u6770\\u7231\\u5468\\u534E\\u98DE</div>\\n                '\n                }\n            });\n        }\n\n        // 功能重写(覆盖超类型)\n\n    }, {\n        key: 'power',\n        value: function power() {\n            // 功能重写待续...\n        }\n    }]);\n\n    return SubType;\n}(SuperType);\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {\n            showHeight: 200\n        },\n        // 数据\n        data: {}\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-go-top',\n            innerHTML: '<div class=\"g-go-top-icon iconfont icon-shangjiantou\"></div>'\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    var self = this;\n    this.moduleDom.addEventListener('click', function () {\n        applications.scrollTo({ to: '0' });\n    });\n    window.addEventListener('scroll', function () {\n        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n        if (scrollTop >= self.opts.config.showHeight) {\n            self.moduleDom.classList.add('g-go-top-active');\n        } else {\n            self.moduleDom.classList.remove('g-go-top-active');\n        }\n    });\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            click: function click() {}\n        },\n        // 配置\n        config: {\n            isHand: false, // 是否手动控制\n            status: 'on', // 状态\n            txt: {\n                on: '已开启',\n                off: '已关闭'\n            }\n        },\n        // 数据\n        data: {}\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    var config = this.opts.config;\n    this.moduleDomActiveClass = 'g-radio-switch-active';\n    var isOn = '';\n    if (config.status === 'on') {\n        isOn = this.moduleDomActiveClass;\n    }\n    this.moduleDom = applications.createElement({\n        style: config.moduleDomStyle,\n        customAttribute: config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-radio-switch ' + isOn,\n            innerHTML: '\\n                <div class=\"g-radio-switch-wrap\">\\n                    <div class=\"g-radio-switch-round\"></div>\\n                </div>\\n                <div class=\"g-radio-switch-text\">' + config.txt[config.status] + '</div>\\n            '\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    var self = this;\n    var config = this.opts.config;\n    this.moduleDom.addEventListener('click', function () {\n        if (!config.isHand) {\n            if (!self.isOn()) {\n                self.on();\n            } else {\n                self.off();\n            }\n        }\n        self.opts.callback.click({ status: config.status });\n    });\n};\n\n// 是否处于开启状态\nSubType.prototype.isOn = function () {\n    return this.moduleDom.classList.contains(this.moduleDomActiveClass);\n};\n\n// 开启\nSubType.prototype.on = function () {\n    var config = this.opts.config;\n    if (!this.isOn()) {\n        this.moduleDom.classList.add(this.moduleDomActiveClass);\n        config.status = 'on';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = '' + config.txt[config.status];\n    }\n};\n\n// 关闭\nSubType.prototype.off = function () {\n    var config = this.opts.config;\n    if (this.isOn()) {\n        this.moduleDom.classList.remove(this.moduleDomActiveClass);\n        config.status = 'off';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = '' + config.txt[config.status];\n    }\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(1); // 工具方法集合\nvar applications = __webpack_require__(0); // 应用方法集合\nvar SuperType = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {},\n        // 数据\n        data: {\n            header: [{ content: 'undefined-header0' }, { content: 'undefined-header1' }, { content: 'undefined-header2' }],\n            body: [[{ content: 'undefined-body0-0' }, { content: 'undefined-body0-1' }, { content: 'undefined-body0-2' }]],\n            footer: ''\n        }\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-table',\n            innerHTML: '\\n                <div class=\"g-table-header\">\\n                    <div class=\"g-table-row\">\\n                        ' + this.moduleDomCreateHeader() + '\\n                    </div>\\n                </div>\\n                <div class=\"g-table-body\">\\n                    ' + this.moduleDomCreateBody() + '\\n                </div>\\n                <div class=\"g-table-footer\">\\n                    ' + this.moduleDomCreateFooter() + '\\n                </div>\\n            '\n        }\n    });\n};\n\nSubType.prototype.moduleDomCreateHeader = function () {\n    var html = '';\n    this.opts.data.header.forEach(function (v) {\n        html += '\\n            <div class=\"g-table-col\">\\n                <div class=\"g-table-col-wrap\">\\n                    ' + v.content + '\\n                </div>\\n            </div>\\n        ';\n    });\n    return html;\n};\n\nSubType.prototype.moduleDomCreateBody = function () {\n    var html = '';\n    this.opts.data.body.forEach(function (v0) {\n        var row = '';\n        v0.forEach(function (v1) {\n            row += '\\n                <div class=\"g-table-col\">\\n                    <div class=\"g-table-col-wrap\">\\n                        ' + v1.content + '\\n                    </div>\\n                </div>\\n            ';\n        });\n        html += '<div class=\"g-table-row\">' + row + '</div>';\n    });\n    return html;\n};\n\nSubType.prototype.moduleDomCreateFooter = function () {\n    return this.opts.data.footer;\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n],[12]);\n\n\n// WEBPACK FOOTER //\n// js/pages/dev-components.4d7d2aea94dffce6617f.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\nconst TouchSlide = require('../plugs/touch-slide');// 轮播图插件\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            startFun: function () {\n            },\n            endFun: function () {\n            },\n        },\n        // 配置\n        config: {\n            isShowHref: true, // 是否有跳转\n            // TouchSlide插件的配置\n            touchSlide: {\n                slideCell: '', // 外部容器,这个值会在底部进行覆盖,因为在这里没办法获取this\n                mainCell: '.g-slide-body', // 切换元素的包裹层对象\n                titCell: '.g-slide-header .g-slide-items', // 导航元素对象\n                effect: 'leftLoop', // 效果'left' 'leftLoop'\n                autoPlay: true, // 自动播放\n                delayTime: 200, // 切换一次的持续时间\n                interTime: 3000, // 多久切换一次\n                startFun: function () {\n                    console.log('此处的函数会被覆盖,请在callback里执行回调');\n                },\n                endFun: function () {\n                    console.log('此处的函数会被覆盖,请在callback里执行回调');\n                },\n                defaultIndex: 0, // 默认的当前位置索引\n                switchLoadClass: '.pre-load', // 预加载的class\n                switchLoad: 'data-src', // 预加载的属性\n            },\n        },\n        // 数据\n        data: {\n            items: [\n                {\n                    img: {\n                        width: 0,\n                        height: 0,\n                        src: 'http://img1.imgtn.bdimg.com/it/u=1056872014,4038868309&fm=23&gp=0.jpg',\n                    },\n                    href: '',\n                },\n            ],\n        },\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-slide',\n            innerHTML: `\n                ${this.renderHeader()}\n                ${this.renderBody()}\n            `,\n        },\n    });\n};\n\nSubType.prototype.renderHeader = function () {\n    const self = this;\n    let html = '';\n    const data = self.opts.data;\n    let className = '';\n    data.items.forEach(function (v, i) {\n        if (i === self.opts.config.touchSlide.defaultIndex) {\n            className = 'on';\n        }\n        html += `<div class=\"g-slide-items ${className}\"></div>`;\n    });\n    return `<div class=\"g-slide-header\">${html}</div>`;\n};\n\nSubType.prototype.renderBody = function () {\n    const self = this;\n    let html = '';\n    const data = self.opts.data;\n    data.items.forEach(function (v) {\n        if (self.opts.config.isShowHref) {\n            html += `<a href=\"${v.href || 'javascript:;'}\" class=\"g-slide-items pre-load\" data-src=\"${v.img.src}\"></a>`;\n        } else {\n            html += `<a class=\"g-slide-items pre-load\" data-src=\"${v.img.src}\"></a>`;\n        }\n    });\n    return `<div class=\"g-slide-body\">${html}</div>`;\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    const self = this;\n    const callback = self.opts.callback;\n    const config = self.opts.config;\n    const touchSlide = config.touchSlide;\n    touchSlide.slideCell = self.opts.wrap;// 外部容器,必须是id\n    touchSlide.startFun = function (i) {\n        // 因为以下功能在插件本身进行了实现(本人对touch-slide插件进行了小修改),所以这里就注释了\n        // var allImg = self.moduleDom.querySelectorAll('.g-slide-body .g-slide-items');\n        // var nowIndex = ( i + 1);\n        // if (touchSlide.effect == 'left') {\n        //     nowIndex = i;\n        // }\n        // var nowImg = allImg[nowIndex];\n        // var prevImg = allImg[nowIndex - 1];\n        // var nextImg = allImg[nowIndex + 1];\n        // nowImg.style.backgroundImage = `url(${nowImg.dataset.src})`;\n        // prevImg && (prevImg.style.backgroundImage = `url(${prevImg.dataset.src})`);\n        // nextImg && (nextImg.style.backgroundImage = `url(${nextImg.dataset.src})`);\n        callback.startFun({self: self, index: i});\n    };\n    touchSlide.endFun = function (i) {\n        callback.endFun({self: self, index: i});\n    };\n    TouchSlide(self.opts.config.touchSlide);\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-slide.js","/*!\n * TouchSlide v1.1\n * javascript触屏滑动特效插件，移动端滑动特效，触屏焦点图，触屏Tab切换，触屏多图切换等\n * 详尽信息请看官网：http://www.SuperSlide2.com/TouchSlide/\n *\n * Copyright 2013 大话主席\n *\n * 请尊重原创，保留头部版权\n * 在保留版权的前提下可应用于个人或商业用途\n\n * 1.1 宽度自适应（修复安卓横屏时滑动范围不变的bug）\n */\n\n/*\n * 本人对此文件进行了稍微改动,还请见谅\n * 1.支持传入class和dom节点\n * 2.样式修改成flex布局\n * 3.把一些不规范的语法警告提示修正\n * 4.添加预加载功能pre-load,去掉插件自带的懒加载功能\n * 5.给主体区域的切换每一项加上className\n * */\n\nvar TouchSlide = function (a) {\n    a = a || {};\n    var opts = {\n        slideCell: a.slideCell || \"#touchSlide\", //运行效果主对象，必须用id！，例如 slideCell:\"#touchSlide\"\n        titCell: a.titCell || \".hd li\", // 导航对象，当自动分页设为true时为“导航对象包裹层”\n        mainCell: a.mainCell || \".bd\", // 切换对象包裹层\n        effect: a.effect || \"left\", // 效果，支持 left、leftLoop\n        autoPlay: a.autoPlay || false, // 自动播放\n        delayTime: a.delayTime || 200, // 效果持续时间\n        interTime: a.interTime || 2500, // 自动运行间隔\n        defaultIndex: a.defaultIndex || 0, // 默认的当前位置索引。0是第一个； defaultIndex:1 时，相当于从第2个开始执行\n        titOnClassName: a.titOnClassName || \"on\", // 当前导航对象添加的className\n        autoPage: a.autoPage || false, // 自动分页，当为true时titCell为“导航对象包裹层”\n        prevCell: a.prevCell || \".prev\", // 前一页按钮\n        nextCell: a.nextCell || \".next\", // 后一页按钮\n        pageStateCell: a.pageStateCell || \".pageState\", // 分页状态对象，用于显示分页状态，例如：2/3\n        pnLoop: a.pnLoop == 'undefined ' ? true : a.pnLoop, // 前后按钮点击是否继续执行效果，当为最前/后页是会自动添加“prevStop”/“nextStop”控制样色\n        startFun: a.startFun || null, // 每次切换效果开始时执行函数，用于处理特殊情况或创建更多效果。用法 satrtFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        endFun: a.endFun || null, // 每次切换效果结束时执行函数，用于处理特殊情况或创建更多效果。用法 endFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        switchLoadClass: a.switchLoadClass || '.pre-load',//预加载的class\n        switchLoad: a.switchLoad || 'data-src' //预加载的属性\n    };\n    var slideCell = null;\n    //如果是字符串\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'string') {\n        slideCell = document.querySelector(opts.slideCell);\n    }\n    //如果是dom节点(一个元素)    原生的\n    if (opts.slideCell.nodeType == 1) {\n        slideCell = opts.slideCell;\n    }\n    /*\n     * 如果是dom集合(一组元素)    HtmlCollection(通过getElementsBy系列获取到的)\n     * 如果是dom集合(一组元素)    NodeList(通过querySelectorAll获取到的)\n     * */\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'htmlcollection' || Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'nodelist') {\n        slideCell = opts.slideCell[0];\n    }\n    if (!slideCell) {\n        return;\n    }\n    //简单模拟jquery选择器\n    var obj = function (str, parEle) {\n        str = str.split(\" \");\n        var par = [];\n        parEle = parEle || document;\n        var retn = [parEle];\n        for (var attr in str) {\n            if (str.hasOwnProperty(attr)) {\n                if (str[attr].length != 0) {\n                    par.push(str[attr]);\n                }\n            }\n        }\n        //去掉重复空格\n        for (var i in par) {\n            if (par.hasOwnProperty(i)) {\n                if (retn.length == 0) {\n                    return false;\n                }\n                var _retn = [];\n                for (var r in retn) {\n                    if (retn.hasOwnProperty(r)) {\n                        if (par[i][0] == \"#\") {\n                            _retn.push(document.getElementById(par[i].replace(\"#\", \"\")));\n                        } else if (par[i][0] == \".\") {\n                            var tag = retn[r].getElementsByTagName('*');\n                            for (var j = 0; j < tag.length; j++) {\n                                var cln = tag[j].className;\n                                if (cln && cln.search && cln.search(new RegExp(\"\\\\b\" + par[i].replace(\".\", \"\") + \"\\\\b\")) != -1) {\n                                    _retn.push(tag[j]);\n                                }\n                            }\n                        } else {\n                            var tag2 = retn[r].getElementsByTagName(par[i]);\n                            for (var k = 0; k < tag2.length; k++) {\n                                _retn.push(tag2[k])\n                            }\n                        }\n                    }\n                }\n                retn = _retn;\n            }\n        }\n        return retn.length == 0 || retn[0] == parEle ? false : retn;\n    };\n    // 创建包裹层\n    var wrap = function (el, v) {\n        var tmp = document.createElement('div');\n        tmp.innerHTML = v;\n        tmp = tmp.children[0];\n        var _el = el.cloneNode(true);\n        tmp.appendChild(_el);\n        el.parentNode.replaceChild(tmp, el);\n        conBox = _el; // 重置conBox\n        return tmp;\n    };\n    // class处理\n    var addClass = function (ele, className) {\n        if (!ele || !className || (ele.className && ele.className.search(new RegExp(\"\\\\b\" + className + \"\\\\b\")) != -1)) {\n            return;\n        }\n        ele.className += (ele.className ? \" \" : \"\") + className;\n    };\n    var removeClass = function (ele, className) {\n        if (!ele || !className || (ele.className && ele.className.search(new RegExp(\"\\\\b\" + className + \"\\\\b\")) == -1)) {\n            return;\n        }\n        ele.className = ele.className.replace(new RegExp(\"\\\\s*\\\\b\" + className + \"\\\\b\", \"g\"), \"\");\n    };\n    //全局对象\n    var effect = opts.effect;\n    var prevBtn = obj(opts.prevCell, slideCell)[0];\n    var nextBtn = obj(opts.nextCell, slideCell)[0];\n    var pageState = obj(opts.pageStateCell)[0];\n    var conBox = obj(opts.mainCell, slideCell)[0];//内容元素父层对象\n    if (!conBox) {\n        return;\n    }\n    var conBoxSize = conBox.children.length;\n    var navObj = obj(opts.titCell, slideCell);//导航子元素结合\n    var navObjSize = navObj ? navObj.length : conBoxSize;\n    /*字符串转换*/\n    var index = parseInt(opts.defaultIndex);\n    var delayTime = parseInt(opts.delayTime);\n    var interTime = parseInt(opts.interTime);\n    var autoPlay = (!(opts.autoPlay == \"false\" || opts.autoPlay == false));\n    var autoPage = (!(opts.autoPage == \"false\" || opts.autoPage == false));\n    var loop = (!(opts.pnLoop == \"false\" || opts.pnLoop == false));\n    var oldIndex = index;\n    var inter = null;// autoPlay的setInterval\n    var timeout = null; // leftLoop的setTimeout\n    var endTimeout = null;  //translate的setTimeout\n    var startX = 0;\n    var startY = 0;\n    var distX = 0;\n    var distY = 0;\n    //var dist = 0; //手指滑动距离\n    var isTouchPad = (/hp-tablet/gi).test(navigator.appVersion);\n    var hasTouch = 'ontouchstart' in window && !isTouchPad;\n    var touchStart = hasTouch ? 'touchstart' : 'mousedown';\n    var touchMove = hasTouch ? 'touchmove' : '';\n    var touchEnd = hasTouch ? 'touchend' : 'mouseup';\n    var slideW = conBox.parentNode.clientWidth;// mainCell滑动距离\n    var twCell;\n    var scrollY;\n    var tempSize = conBoxSize;\n    //处理分页\n    if (navObjSize == 0) {\n        navObjSize = conBoxSize;\n    }\n    if (autoPage) {\n        navObjSize = conBoxSize;\n        navObj = navObj[0];\n        navObj.innerHTML = \"\";\n        var str = \"\";\n\n        if (opts.autoPage == true || opts.autoPage == \"true\") {\n            for (var i = 0; i < navObjSize; i++) {\n                str += \"<li>\" + (i + 1) + \"</li>\"\n            }\n        }\n        else {\n            for (var x = 0; x < navObjSize; x++) {\n                str += opts.autoPage.replace(\"$\", (x + 1))\n            }\n        }\n        navObj.innerHTML = str;\n        navObj = navObj.children;//重置navObj\n    }\n    if (effect == \"leftLoop\") {\n        tempSize += 2;\n        conBox.appendChild(conBox.children[0].cloneNode(true));\n        conBox.insertBefore(conBox.children[conBoxSize - 1].cloneNode(true), conBox.children[0]);\n    }\n    twCell = wrap(conBox, '<div class=\"tempWrap\" style=\"height:inherit;overflow:hidden; position:relative;\"></div>');\n    conBox.style.cssText = \"display:flex;width:\" + tempSize * slideW + \"px;\" + \"position:relative;overflow:hidden;padding:0;margin:0;\";\n    for (var y = 0; y < tempSize; y++) {\n        conBox.children[y].style.cssText = \"height:inherit;display:flex;align-items: center;justify-content: center;width:\" + slideW + \"px\"\n    }\n    var doStartFun = function () {\n        if (typeof opts.startFun == 'function') {\n            opts.startFun(index, navObjSize)\n        }\n    };\n    var doEndFun = function () {\n        if (typeof opts.endFun == 'function') {\n            opts.endFun(index, navObjSize)\n        }\n    };\n    //动态设置滑动宽度\n    var orientationChange = function () {\n        slideW = twCell.clientWidth;\n        conBox.style.width = tempSize * slideW + \"px\";\n        for (var i = 0; i < tempSize; i++) {\n            conBox.children[i].style.width = slideW + \"px\";\n        }\n        var ind = effect == \"leftLoop\" ? index + 1 : index;\n        translate(-ind * slideW, 0);\n    };\n    window.addEventListener(\"resize\", orientationChange, false);\n    //滑动效果\n    var translate = function (dist, speed, ele) {\n        if (!!ele) {\n            ele = ele.style;\n        } else {\n            ele = conBox.style;\n        }\n        ele.webkitTransitionDuration = ele.MozTransitionDuration = ele.msTransitionDuration = ele.OTransitionDuration = ele.transitionDuration = speed + 'ms';\n        ele.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';\n        ele.msTransform = ele.MozTransform = ele.OTransform = 'translateX(' + dist + 'px)';\n    };\n    //效果函数\n    var doPlay = function (isTouch) {\n        switch (effect) {\n            case \"left\":\n                if (index >= navObjSize) {\n                    index = isTouch ? index - 1 : 0;\n                } else if (index < 0) {\n                    index = isTouch ? 0 : navObjSize - 1;\n                }\n                translate((-index * slideW), delayTime);\n                oldIndex = index;\n                break;\n            case \"leftLoop\":\n                translate(-(index + 1) * slideW, delayTime);\n                if (index == -1) {\n                    timeout = setTimeout(function () {\n                        translate(-navObjSize * slideW, 0);\n                    }, delayTime);\n                    index = navObjSize - 1;\n                } else if (index == navObjSize) {\n                    timeout = setTimeout(function () {\n                        translate(-slideW, 0);\n                    }, delayTime);\n                    index = 0;\n                }\n                oldIndex = index;\n                break;\n\n        }\n        //预加载\n        (function () {\n            var nowIndex = effect == \"leftLoop\" ? index + 1 : index;\n            var allImage = conBox.querySelectorAll(opts.switchLoadClass);\n            var changeImagesSrc = function (img) {\n                if (img) {\n                    var imgSwitchSrc = img.getAttribute(opts.switchLoad);\n                    if (!imgSwitchSrc) {\n                        return false;\n                    }\n                    if (img.tagName.toLowerCase() == 'img') {\n                        img.src = imgSwitchSrc;\n                    } else {\n                        img.style.backgroundImage = `url(${imgSwitchSrc})`;\n                    }\n                }\n            };\n            if (allImage.length > 0) {\n                changeImagesSrc(allImage[nowIndex]);\n                changeImagesSrc(allImage[nowIndex - 1]);\n                changeImagesSrc(allImage[nowIndex + 1]);\n            }\n        })();\n        doStartFun();\n        endTimeout = setTimeout(function () {\n            doEndFun();\n        }, delayTime);\n        //给按钮区域的切换每一项加上className\n        for (var i = 0; i < navObjSize; i++) {\n            removeClass(navObj[i], opts.titOnClassName);\n            if (i == index) {\n                addClass(navObj[i], opts.titOnClassName);\n            }\n        }\n        /*\n         * 给主体区域的切换每一项加上className\n         * 注:如果想配合className写css3小效果,建议使用effect属性的left值\n         * 否则切换到尾帧和切换到首帧时,视觉上的体验不好\n         * */\n        // (function () {\n        //     var nowJ = effect == \"leftLoop\" ? index + 1 : index;\n        //     for (var j = 0; j < conBox.children.length; j++) {\n        //         removeClass(conBox.children[j], opts.titOnClassName);\n        //         if (j == nowJ) {\n        //             addClass(conBox.children[j], opts.titOnClassName);\n        //         }\n        //     }\n        // })();\n        //loop控制是否继续循环\n        if (loop == false) {\n            removeClass(nextBtn, \"nextStop\");\n            removeClass(prevBtn, \"prevStop\");\n            if (index == 0) {\n                addClass(prevBtn, \"prevStop\")\n            } else if (index == navObjSize - 1) {\n                addClass(nextBtn, \"nextStop\")\n            }\n        }\n        if (pageState) {\n            pageState.innerHTML = \"<span>\" + (index + 1) + \"</span>/\" + navObjSize;\n        }\n    };\n    //初始化执行\n    doPlay();\n    //自动播放\n    if (autoPlay) {\n        inter = setInterval(function () {\n            index++;\n            doPlay()\n        }, interTime);\n    }\n    //点击事件\n    if (navObj) {\n        for (var z = 0; z < navObjSize; z++) {\n            (function () {\n                var j = z;\n                navObj[j].addEventListener('click', function () {\n                    clearTimeout(timeout);\n                    clearTimeout(endTimeout);\n                    index = j;\n                    doPlay();\n                })\n            })()\n        }\n    }\n    if (nextBtn) {\n        nextBtn.addEventListener('click', function () {\n            if (loop == true || index != navObjSize - 1) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index++;\n                doPlay();\n            }\n        })\n    }\n    if (prevBtn) {\n        prevBtn.addEventListener('click', function () {\n            if (loop == true || index != 0) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index--;\n                doPlay();\n            }\n        })\n    }\n    //触摸开始函数\n    var tStart = function (e) {\n        clearTimeout(timeout);\n        clearTimeout(endTimeout);\n        scrollY = undefined;\n        distX = 0;\n        var point = hasTouch ? e.touches[0] : e;\n        startX = point.pageX;\n        startY = point.pageY;\n        //添加“触摸移动”事件监听\n        conBox.addEventListener(touchMove, tMove, false);\n        //添加“触摸结束”事件监听\n        conBox.addEventListener(touchEnd, tEnd, false);\n    };\n    //触摸移动函数\n    var tMove = function (e) {\n        if (hasTouch) {\n            if (e.touches.length > 1 || e.scale && e.scale !== 1) {\n                return;\n            }\n        }\n        //多点或缩放\n        var point = hasTouch ? e.touches[0] : e;\n        distX = point.pageX - startX;\n        distY = point.pageY - startY;\n        if (typeof scrollY == 'undefined') {\n            scrollY = !!( scrollY || Math.abs(distX) < Math.abs(distY) );\n        }\n        if (!scrollY) {\n            e.preventDefault();\n            if (autoPlay) {\n                clearInterval(inter)\n            }\n            switch (effect) {\n                case \"left\":\n                    if ((index == 0 && distX > 0) || (index >= navObjSize - 1 && distX < 0 )) {\n                        distX = distX * 0.4\n                    }\n                    translate(-index * slideW + distX, 0);\n                    break;\n                case \"leftLoop\":\n                    translate(-(index + 1) * slideW + distX, 0);\n                    break;\n            }\n        }\n    };\n    //触摸结束函数\n    var tEnd = function (e) {\n        if (distX == 0) {\n            return;\n        }\n        e.preventDefault();\n        if (!scrollY) {\n            if (Math.abs(distX) > slideW / 10) {\n                distX > 0 ? index-- : index++;\n            }\n            doPlay(true);\n            if (autoPlay) {\n                inter = setInterval(function () {\n                    index++;\n                    doPlay()\n                }, interTime);\n            }\n        }\n\n        conBox.removeEventListener(touchMove, tMove, false);\n        conBox.removeEventListener(touchEnd, tEnd, false);\n    };\n    //添加“触摸开始”事件监听\n    conBox.addEventListener(touchStart, tStart, false);\n};\n\nmodule.exports = TouchSlide;\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/plugs/touch-slide.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');\n// 超类型(子类型继承的对象)\nconst route = '/phone/';\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {},\n        // 数据\n        data: {\n            items: [\n                {\n                    href: route,\n                    icon: 'icon-shouye',\n                    text: '首页',\n                    isShowMark: false,\n                },\n                {\n                    href: `${route}dev-globals/`,\n                    icon: 'icon-kaifa',\n                    text: '开发全局',\n                    isShowMark: false,\n                },\n                {\n                    href: `${route}dev-components/`,\n                    icon: 'icon-kaifa',\n                    text: '开发组件',\n                    isShowMark: false,\n                },\n                {\n                    href: `${route}dev-words/`,\n                    icon: 'icon-kaifa',\n                    text: '标准词汇',\n                    isShowMark: false,\n                },\n                {\n                    href: `${route}mine/`,\n                    icon: 'icon-wode',\n                    text: '我的',\n                    isShowMark: false,\n                },\n            ],\n        },\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    const data = this.opts.data;\n    const items = data.items;\n    let html = '';\n    items.forEach(function (v) {\n        let markHtml = '';\n        if (v.isShowMark) {\n            markHtml = '<div class=\"g-navigation-mark\"></div>';\n        }\n        html += `\n            <a href=\"${v.href}\" class=\"g-navigation-item\">\n                <div class=\"g-navigation-icon iconfont ${v.icon}\"></div>\n                <div class=\"g-navigation-text\">${v.text}</div>\n                ${markHtml}\n            </a>\n        `;\n    });\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-navigation',\n            innerHTML: html,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-navigation.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {\n            // isShowMask: false,  //是否显示遮罩(默认不显示)\n            status: 'loading', // 加载状态 loading(加载中) over(加载完毕)\n            positionMethod: '', // 模块的定位方式 'fixed'(相对于整个文档) 'absolute'(相对于外部容器)\n            positionLocation: 'center', // 模块的定位位置\n            moduleDomIsShow: false, // 内部模块是否显示(默认不显示)\n        },\n        // 数据\n        data: {},\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    const config = this.opts.config;\n    let moduleDomHtml = '';\n    let moduleDomClass = '';\n    const status = config.status;\n    const positionMethod = config.positionMethod;\n    const positionLocation = config.positionLocation;\n    // 加载中\n    if (status === 'loading') {\n        moduleDomClass = 'g-loading-loading ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += `g-loading-fixed g-loading-${positionLocation}`;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += `g-loading-absolute g-loading-${positionLocation}`;\n        }\n        moduleDomHtml = `\n            <div class=\"g-loading-wrap\">\n                <div class=\"g-loading-loading-icon iconfont icon-jiazaizhong\"></div>\n            </div>\n        `;\n    }\n    // 加载完毕\n    if (status === 'over') {\n        moduleDomClass = 'g-loading-over ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += `g-loading-fixed g-loading-${positionLocation}`;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += `g-loading-absolute g-loading-${positionLocation}`;\n        }\n        moduleDomHtml = `\n            <div class=\"g-loading-wrap\">\n                <div class=\"g-loading-over-icon iconfont icon-meiyoushuju\"></div>\n                <div class=\"g-loading-over-text\">没有数据了</div>\n            </div>\n        `;\n    }\n    // 模块创建\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: `g-loading ${moduleDomClass}`,\n            innerHTML: moduleDomHtml,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-loading.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        wrap: '.g-wrap',\n        // 回调\n        callback: {\n            click: function () {\n            },\n            moduleDomRenderBefore: function (self) {\n                if (self.wrapDom && getComputedStyle(self.wrapDom).position === 'static') {\n                    self.wrapDom.style.position = 'relative';\n                }\n            },\n        },\n        // 配置\n        config: {\n            isTransparent: false, // 是不是透明的(默认不透明)\n            moduleDomIsShow: false, // 内部模块是否显示(默认不显示)\n        },\n        // 数据\n        data: {},\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    let isTransparent = '';\n    if (this.opts.config.isTransparent) {\n        isTransparent = 'g-mask-transparent';\n    }\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: `g-mask ${isTransparent}`,\n            innerHTML: '',\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    const self = this;\n    this.moduleDom.addEventListener('click', function (ev) {\n        self.opts.callback.click();\n        ev.stopPropagation();\n    });\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-mask.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\n\n// 底层构造函数\nclass SuperType {\n    constructor(json) {\n        // 函数外部传来的参数\n        // (这个属性在其他模块的内部需要被重写)\n        this.opts = tools.extend({\n            // 内部默认参数\n            defaults: {\n                // 父级\n                wrap: '.g-body', // 这个仅支持传入选择器和原生dom节点\n                // 回调\n                callback: {\n                    // 内部模块创建之前\n                    moduleDomCreateBefore: function (self) {\n                        // 内部模块创建之前的回调待续...\n                    },\n                    // 内部模块创建之后\n                    moduleDomCreateAfter: function (self) {\n                        // 内部模块创建之后的回调待续...\n                    },\n                    // 内部模块渲染之前\n                    moduleDomRenderBefore: function (self) {\n                        // 内部模块渲染之前的回调待续...\n                    },\n                    // 内部模块渲染之后\n                    moduleDomRenderAfter: function (self) {\n                        // 内部模块渲染之后的回调待续...\n                    },\n                    // 内部模块移除之前\n                    moduleDomRemoveBefore: function (self) {\n                        // 内部模块移除之前的回调待续...\n                    },\n                    // 内部模块移除之后\n                    moduleDomRemoveAfter: function (self) {\n                        // 内部模块移除之后的回调待续...\n                    },\n                    // 内部模块显示之前\n                    moduleDomShowBefore: function (self) {\n                        // 内部模块显示之前的回调待续...\n                    },\n                    // 内部模块显示之后\n                    moduleDomShowAfter: function (self) {\n                        // 内部模块显示之后的回调待续...\n                    },\n                    // 内部模块隐藏之前\n                    moduleDomHideBefore: function (self) {\n                        // 内部模块隐藏之前的回调待续...\n                    },\n                    // 内部模块隐藏之后\n                    moduleDomHideAfter: function (self) {\n                        // 内部模块隐藏之后的回调待续...\n                    },\n                    // 外部容器获取之前\n                    wrapDomGetBefore: function (self) {\n                        // 外部容器获取之前的回调待续...\n                    },\n                    // 外部容器获取之后\n                    wrapDomGetAfter: function (self) {\n                        // 外部容器获取之后的回调待续...\n                    },\n                    // 外部容器移除之前\n                    wrapDomRemoveBefore: function (self) {\n                        // 外部容器移除之前的回调待续...\n                    },\n                    // 外部容器移除之后\n                    wrapDomRemoveAfter: function (self) {\n                        // 外部容器移除之后的回调待续...\n                    },\n                },\n                // 配置\n                config: {\n                    // 内部模块的自定义属性\n                    moduleDomCustomAttribute: {},\n                    // 内部模块插入到外部容器的方式\n                    moduleDomRenderMethod: {\n                        method: 'appendChild', // 'appendChild','insertBefore'\n                        child: null,\n                    },\n                    moduleDomStyle: {}, // 内部模块的样式\n                    moduleDomIsShow: true, // 内部模块是否显示(默认显示)\n                    moduleDomIsClearTimer: true, // 内部模块是否清除所有定时器(默认清除)\n                },\n                // 数据\n                data: {},\n            },\n            // 外部传入参数\n            inherits: json,\n        });\n        // 函数内部自带的属性\n        this.moduleDom = null;// 内部的模块\n        this.wrapDom = null;// 内部模块的外部承载容器,如果没有也没关系,不过不往里面append罢了\n        this.moduleDomTimer = {};// 内部模块的定时器存储(假设内部模块有定时器)\n        // this.init();//初始化(用es6继承的话,在超类里调初始化没有意义,因为子类的参数还没有被赋予新值,建议不要在超类里初始化,在子类里初始化)\n    }\n\n    // 初始化\n    init() {\n        this.render();\n        this.power();\n    }\n\n    // 渲染\n    render() {\n        this.moduleDomRemove();// 内部模块的移除(重新初始化的时候要移除掉以前有的内部模块)\n\n        const callback = this.opts.callback;\n        callback.moduleDomCreateBefore(this);\n        this.moduleDomCreate();// 内部模块的创建\n        callback.moduleDomCreateAfter(this);\n\n        this.wrapDomGet();// 外部容器的获取\n        this.moduleDomRender();// 内部模块的渲染(如果外部容器存在,就把内部模块填充到外部容器里)\n    }\n\n    // 功能(这个方法在其他模块的内部需要被重写)\n    power() {\n        // 功能待续...\n    }\n\n    // 内部模块的创建(这个方法在其他模块的内部需要被重写)\n    moduleDomCreate() {\n        this.moduleDom = applications.createElement({\n            style: this.opts.config.moduleDomStyle,\n            customAttribute: this.opts.config.moduleDomCustomAttribute,\n            attribute: {\n                className: 'g-super-type-es6',\n                innerHTML: `\n                    <div class=\"g-super-type-es6-text\">周华飞爱侯丽杰,侯丽杰爱周华飞</div>\n                `,\n            },\n        });\n    }\n\n    // 内部模块的渲染\n    moduleDomRender() {\n        const callback = this.opts.callback;\n        const config = this.opts.config;\n        if (config.moduleDomIsShow && this.wrapDom) {\n            callback.moduleDomRenderBefore(this);\n            const renderMethod = config.moduleDomRenderMethod;\n            if (renderMethod.method === 'insertBefore') {\n                const dom = applications.getDomArray({element: renderMethod.child})[0];\n                if (dom) {\n                    this.wrapDom.insertBefore(this.moduleDom, dom);\n                } else {\n                    this.wrapDom.insertBefore(this.moduleDom, this.wrapDom.children[0]);\n                }\n            }\n            if (renderMethod.method === 'appendChild') {\n                this.wrapDom.appendChild(this.moduleDom);\n            }\n            callback.moduleDomRenderAfter(this);\n        }\n    }\n\n    // 内部模块的移除\n    moduleDomRemove() {\n        const callback = this.opts.callback;\n        if (this.moduleDom && this.moduleDom.parentNode) {\n            callback.moduleDomRemoveBefore(this);\n            this.moduleDom.parentNode.removeChild(this.moduleDom);\n            callback.moduleDomRemoveAfter(this);\n        }\n        this.moduleDomClearTimer();\n    }\n\n    // 内部模块的定时器清除(假设内部模块有定时器)\n    moduleDomClearTimer() {\n        const self = this;\n        if (self.opts.config.moduleDomIsClearTimer) {\n            Object.keys(self.moduleDomTimer).forEach(function (attr) {\n                clearInterval(self.moduleDomTimer[attr]);\n                clearTimeout(self.moduleDomTimer[attr]);\n            });\n        }\n    }\n\n    // 内部模块的显示(显示隐藏和是否清除定时器无关)\n    moduleDomShow() {\n        const callback = this.opts.callback;\n        callback.moduleDomShowBefore(this);\n        if (this.wrapDom) {\n            this.opts.config.moduleDomIsShow = true;\n            this.moduleDomRender();\n        }\n        callback.moduleDomShowAfter(this);\n    }\n\n    // 内部模块的隐藏(显示隐藏和是否清除定时器无关)\n    moduleDomHide() {\n        const callback = this.opts.callback;\n        if (this.moduleDom.parentNode) {\n            this.opts.config.moduleDomIsShow = false;\n            callback.moduleDomHideBefore(this);\n            this.moduleDom.parentNode.removeChild(this.moduleDom);\n            callback.moduleDomHideAfter(this);\n        }\n    }\n\n    // 外部容器的获取\n    wrapDomGet() {\n        const callback = this.opts.callback;\n        callback.wrapDomGetBefore(this);\n        this.wrapDom = applications.getDomArray({element: this.opts.wrap})[0];\n        callback.wrapDomGetAfter(this);\n    }\n\n    // 外部容器的移除\n    wrapDomRemove() {\n        const callback = this.opts.callback;\n        // 先移除内部的模块\n        this.moduleDomRemove();\n        // 再移除外部的容器\n        if (this.wrapDom) {\n            callback.wrapDomRemoveBefore(this);\n            this.wrapDom.parentNode.removeChild(this.wrapDom);\n            callback.wrapDomRemoveAfter(this);\n        }\n    }\n\n    // 获取内部模块的整体html结构\n    getModuleDomHtml() {\n        return this.moduleDom.outerHTML;\n    }\n}\n\nmodule.exports = SuperType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-super-type-es6.js","window.addEventListener('load', function () {\n    setTimeout(function () {\n        const applications = require('../utils/applications');\n\n        // ajax测试\n        (function () {\n            // var Ajax = require('../tools/ajax');\n            // new Ajax({\n            //     callback: {},\n            //     config: {\n            //         url: '/api/getList'\n            //     },\n            //     data: {\n            //         hellow: 'hellow'\n            //     }\n            // })\n        }());\n\n        // base函数测试\n        (function () {\n            const WhenScrollBottom = applications.whenScrollBottom();\n            // 测试滚动到底部loading\n            new WhenScrollBottom({\n                callback: {\n                    success: function (self) {\n                        const Loading = require('../components/g-loading');\n                        const loading = new Loading({\n                            wrap: '.g-body',\n                            config: {\n                                status: 'loading',\n                            },\n                        });\n                        loading.moduleDomShow();\n                    },\n                },\n            });\n        }());\n\n        // slide切换\n        (function () {\n            const Slide = require('../components/g-slide');\n            new Slide({\n                wrap: '.page-slide',\n                data: {\n                    items: [\n                        {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img1.imgtn.bdimg.com/it/u=1056872014,4038868309&fm=23&gp=0.jpg',\n                            },\n                            href: '',\n                        },\n                        {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img3.imgtn.bdimg.com/it/u=1732308780,3782498029&fm=23&gp=0.jpg',\n                            },\n                            href: '',\n                        },\n                        {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img3.imgtn.bdimg.com/it/u=4027566086,3099254237&fm=23&gp=0.jpg',\n                            },\n                            href: '',\n                        },\n                        {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img4.imgtn.bdimg.com/it/u=120609946,455952432&fm=23&gp=0.jpg',\n                            },\n                            href: '',\n                        },\n                        {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img2.imgtn.bdimg.com/it/u=2763208243,961494673&fm=23&gp=0.jpg',\n                            },\n                            href: '',\n                        },\n                    ],\n                },\n            });\n        }());\n\n        // 导航\n        (function () {\n            const Navigation = require('../components/g-navigation');\n            new Navigation({wrap: '.page-navigation'});\n        }());\n\n        // 弹窗测试\n        (function () {\n            const Dialog = require('../components/g-dialog');\n            new Dialog({\n                callback: {\n                    confirm: function () {\n                        new Dialog({config: {alert: {icon: 'icon-chenggong', content: '已确认'}}});\n                    },\n                    cancel: function () {\n                        new Dialog({config: {alert: {icon: 'icon-chenggong', content: '已取消'}}});\n                    },\n                    close: function () {\n                        new Dialog({config: {alert: {icon: 'icon-chenggong', content: '已关闭'}}});\n                    },\n                },\n                config: {\n                    type: 'confirm',\n                },\n            });\n        }());\n\n        // 分页测试\n        (function () {\n            const Pagination = require('../components/g-pagination');\n            new Pagination({wrap: '.page-pagination'});\n        }());\n\n        // 没有数据\n        (function () {\n            const NoData = require('../components/g-no-data');\n            new NoData({wrap: '.page-no-data'});\n        }());\n\n        // 加载中\n        (function () {\n            const Loading = require('../components/g-loading');\n            const loading = new Loading({\n                config: {\n                    status: 'loading',\n                },\n            });\n            loading.moduleDomShow();\n            const over = new Loading({\n                config: {\n                    status: 'over',\n                },\n            });\n            over.moduleDomShow();\n        }());\n\n        // 超类型模块测试\n        (function () {\n            const SuperType = require('../components/g-super-type');\n            new SuperType({wrap: '.page-super-type'});\n            const SubType = require('../components/g-sub-type');\n            new SubType({wrap: '.page-super-type'});\n            const SuperTypeEs6 = require('../components/g-super-type-es6');\n            new SuperTypeEs6({wrap: '.page-super-type'}).init();// es6继承,不建立在超类型内部直接调init方法\n            const SubTypeEs6 = require('../components/g-sub-type-es6');\n            new SubTypeEs6({wrap: '.page-super-type'});\n        }());\n\n        // 返回顶部\n        (function () {\n            const GoTop = require('../components/g-go-top');\n            new GoTop();\n        }());\n\n        // 遮罩\n        (function () {\n            const Mask = require('../components/g-mask');\n            const mask = new Mask({\n                callback: {\n                    click: function () {\n                        mask.moduleDomHide();\n                    },\n                },\n            });\n            // mask.moduleDomShow();\n        }());\n\n        // 单选开关\n        (function () {\n            const Radio = require('../components/g-radio-switch');\n            new Radio({\n                wrap: '.page-radio-switch',\n                callback: {\n                    click: function (json) {\n                        console.log(json);\n                    },\n                },\n            });\n        }());\n\n        // 表格\n        (function () {\n            const Table = require('../components/g-table');\n            const table = new Table({\n                wrap: '.page-table',\n                data: {\n                    header: [\n                        {\n                            content: '<div>header0</div>',\n                        },\n                        {\n                            content: '<div>header1</div>',\n                        },\n                        {\n                            content: '<div>header2</div>',\n                        },\n                    ],\n                    body: [\n                        [\n                            {\n                                content: '<div>body0-0</div>',\n                            },\n                            {\n                                content: '<div>body1-0</div>',\n                            },\n                            {\n                                content: '<div>body2-0</div>',\n                            },\n                        ],\n                        [\n                            {\n                                content: '<div>body0-1</div>',\n                            },\n                            {\n                                content: '<div>body1-1</div>',\n                            },\n                            {\n                                content: '<div>body2-1</div>',\n                            },\n                        ],\n                        [\n                            {\n                                content: '<div>body0-2</div>',\n                            },\n                            {\n                                content: '<div>body1-2</div>',\n                            },\n                            {\n                                content: '<div>body2-2</div>',\n                            },\n                        ],\n                    ],\n                    footer: '',\n                },\n            });\n        }());\n\n        // 星评\n        (function () {\n            // const Star = require('../components/g-star');\n            // const star = new Star({\n            //     wrap: `.page-star`,\n            //     callback: {\n            //         click: function (json) {\n            //             console.log(json);\n            //         }\n            //     }\n            // });\n            require.ensure([], function (require) {\n                const Star = require('../components/g-star');\n                const star = new Star({\n                    wrap: '.page-star',\n                    callback: {\n                        click: function (json) {\n                            console.log(json);\n                        },\n                    },\n                });\n            }, 'g-star');\n        }());\n\n        require('../../scss/pages/dev-components.scss');// 当前页面用到的样式\n        const common = require('../commons/common');// 每个页面都要用到的js(一定要放到最底部)\n    }, 0);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/pages/dev-components.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\nconst Mask = require('../components/g-mask');// 遮罩\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            moduleDomRenderBefore: function (self) {\n                if (self.opts.config.type === 'confirm') {\n                    if (self.opts.config.confirm.isShowMask) {\n                        self.mask = new Mask({\n                            config: {\n                                moduleDomIsShow: true,\n                                moduleDomRenderMethod: {method: 'insertBefore'},\n                            },\n                        });\n                    }\n                    if (self.wrapDom && getComputedStyle(self.wrapDom).position === 'static') {\n                        self.wrapDom.style.position = 'relative';\n                    }\n                }\n            },\n            // 确认\n            confirm: function () {\n            },\n            // 取消\n            cancel: function () {\n            },\n            // 关闭\n            close: function () {\n            },\n        },\n        // 配置\n        config: {\n            /*\n             * 弹窗类型\n             * `alert`  提示信息类型\n             * `confirm`    确认框类型\n             * */\n            type: 'alert', // 默认是提示框\n            /*\n             * 弹窗位置\n             * `center` 居中\n             * `bottom` 居下\n             * `top` 居上\n             * */\n            positionLocation: 'center', // 弹窗的定位位置    positionMethod定位方式强制fixed\n            // 提示框\n            alert: {\n                time: 2000, // 展示的时间\n                isShowIcon: true, // 是否显示icon\n                icon: 'icon-chenggong', // icon的class\n                content: '成功', // 内容信息\n            },\n            // 确认框\n            confirm: {\n                // 点击确认是否关闭弹窗\n                isShowHeader: true, // 是否显示头部\n                headerContent: '提示:', // 头部内容\n                isShowBody: true, // 是否显示主体\n                bodyContent: '<div>确定要执行这个操作?</div>', // 主体内容\n                isShowFooter: true, // 是否显示尾部\n                footerContent: '', // 尾部内容\n                isShowClose: true, // 是否显示关闭按钮\n                closeContent: '<div class=\"iconfont icon-guanbi\"></div>', // 关闭按钮的内容\n                isShowConfirm: true, // 是否显示确认按钮\n                confirmContent: '确认', // 确认按钮的内容\n                isShowCancel: true, // 是否显示取消按钮\n                cancelContent: '取消', // 取消按钮的内容\n                isCustom: false, // 是否自定义\n                customContent: '', // 自定义的内容\n                isShowIcon: true, // 是否显示icon\n                icon: 'icon-jinggao', // icon的类型\n                isShowMask: true, // 是否显示遮罩\n                isHandHide: false, // 是否手动隐藏(一般只用于点击确认时)\n            },\n        },\n        // 数据\n        data: {},\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    const config = this.opts.config;\n    const type = `g-dialog-${config.type}`;// 弹窗类型\n    const positionLocation = `g-dialog-${config.positionLocation}`;// 弹窗的定位位置\n    // 弹窗结构\n    const html = `\n        ${this.renderAlert()}\n        ${this.renderConfirm()}\n    `;\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: `g-dialog ${type} ${positionLocation}`,\n            innerHTML: html,\n        },\n    });\n};\n\n// 提示框\nSubType.prototype.renderAlert = function () {\n    const config = this.opts.config;\n    if (config.type !== 'alert') {\n        return '';\n    }\n    const alert = config.alert;\n    let htmlIcon = '';\n    if (alert.isShowIcon) {\n        htmlIcon = `<div class=\"g-dialog-alert-icon iconfont ${alert.icon}\"></div>`;\n    }\n    return `\n        ${htmlIcon}\n        <div class=\"g-dialog-alert-text\">${alert.content}</div>\n    `;\n};\n\n// 确认框\nSubType.prototype.renderConfirm = function () {\n    const config = this.opts.config;\n    if (config.type !== 'confirm') {\n        return '';\n    }\n    const confirm = config.confirm;\n    let htmlHeader = '';\n    if (confirm.isShowHeader) {\n        htmlHeader = `<div class=\"g-dialog-header\">${confirm.headerContent}</div>`;\n    }\n    let htmlBody = '';\n    if (confirm.isShowBody) {\n        let htmlIcon = '';\n        if (confirm.isShowIcon) {\n            htmlIcon = `<div class=\"g-dialog-icon iconfont ${confirm.icon}\"></div>`;\n        }\n        let bodyClass = 'g-dialog-body-system';\n        let bodyContent = `\n            ${htmlIcon}\n            <div class=\"g-dialog-text\">${confirm.bodyContent}</div>\n        `;\n        if (confirm.isCustom) {\n            bodyClass = 'g-dialog-body-custom';\n            bodyContent = confirm.bodyContent;\n        }\n        htmlBody = `\n            <div class=\"g-dialog-body\">\n                <div class=\"${bodyClass}\">\n                    ${bodyContent}\n                </div>\n            </div>\n        `;\n    }\n    let htmlFooter = '';\n    if (confirm.isShowFooter) {\n        let htmlCancel = '';\n        if (confirm.isShowCancel) {\n            htmlCancel = `<div class=\"g-button g-button-cancel g-dialog-cancel\">${confirm.cancelContent}</div>`;\n        }\n        let htmlConfirm = '';\n        if (confirm.isShowConfirm) {\n            htmlConfirm = `<div class=\"g-button g-dialog-confirm\">${confirm.confirmContent}</div>`;\n        }\n        htmlFooter = `<div class=\"g-dialog-footer\">${htmlCancel}${htmlConfirm}</div>`;\n    }\n    let htmlClose = '';\n    if (confirm.isShowClose) {\n        htmlClose = `<div class=\"g-dialog-close\">${confirm.closeContent}</div>`;\n    }\n    return `\n        ${htmlHeader}\n        ${htmlBody}\n        ${htmlFooter}\n        ${htmlClose} \n    `;\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    const self = this;\n    const config = this.opts.config;\n    // 提示框\n    if (config.type === 'alert') {\n        setTimeout(function () {\n            self.hide();\n        }, config.alert.time);\n    }\n    // 确认框\n    if (config.type === 'confirm') {\n        const close = this.moduleDom.querySelector('.g-dialog-close');\n        if (close) {\n            close.addEventListener('click', function () {\n                self.hide();\n                self.opts.callback.close();\n            });\n        }\n        const cancel = this.moduleDom.querySelector('.g-dialog-cancel');\n        if (cancel) {\n            cancel.addEventListener('click', function () {\n                self.hide();\n                self.opts.callback.cancel();\n            });\n        }\n        const confirm = this.moduleDom.querySelector('.g-dialog-confirm');\n        if (confirm) {\n            confirm.addEventListener('click', function () {\n                if (!self.opts.config.confirm.isHandHide) {\n                    self.hide();\n                }\n                self.opts.callback.confirm();\n            });\n        }\n    }\n};\n\nSubType.prototype.hide = function () {\n    this.moduleDomHide();\n    if (this.mask) {\n        this.mask.moduleDomHide();\n    }\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-dialog.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 默认数据\nconst defaultData = {\n    nowCount: 10, // 当前页的数据条数\n    allCount: 100, // 数据总条数\n    nowPage: 1, // 当前页\n    allPage: null, // 总页数\n};\ndefaultData.allPage = Math.ceil(defaultData.allCount / defaultData.nowCount);\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            // 上一页的回调\n            prevPage: function () {\n            },\n            // 下一页的回调\n            nextPage: function () {\n            },\n            // 选择某一页的回调\n            selectPage: function () {\n            },\n        },\n        // 配置\n        config: {},\n        // 数据\n        data: defaultData,\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-pagination',\n            innerHTML: `\n                <div class=\"g-pagination-text\">第</div>\n                <div class=\"g-pagination-now-page\">\n                    <label class=\"g-select\">\n                        <span class=\"g-select-wrap\">\n                            <select class=\"g-select-select\">\n                                ${this.renderOption()}\n                            </select>\n                            <span class=\"g-select-mark iconfont icon-select\"></span>\n                        </span>\n                    </label>\n                </div>\n                <div class=\"g-pagination-text\">页</div>\n                <a href=\"javascript:;\" class=\"g-pagination-btn g-pagination-btn-inactive iconfont icon-shangyiye\"></a>\n                <a href=\"javascript:;\" class=\"g-pagination-btn iconfont icon-xiayiye\"></a>\n            `,\n        },\n    });\n    this.prevDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[0];// 上一页的按钮\n    this.nextDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[1];// 下一页的按钮\n    this.btnInactiveClass = 'g-pagination-btn-inactive';// 上一页和下一页的禁用状态\n    this.selectDom = this.moduleDom.querySelector('.g-pagination-now-page .g-select-select');// 选择某一页的按钮\n};\n\n// 渲染第几页里面的页码\nSubType.prototype.renderOption = function () {\n    let html = '';\n    for (let i = 0; i < this.opts.data.allPage; i++) {\n        html += `<option value=\"${i + 1}\">${i + 1}</option>`;\n    }\n    return html;\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    const self = this;\n    const data = this.opts.data;\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n\n    this.prevDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.prevPage();\n        }\n    });\n\n    this.nextDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.nextPage();\n        }\n    });\n\n    this.selectDom.addEventListener('change', function () {\n        self.selectPage();\n    });\n};\n\n// 上一页\nSubType.prototype.prevPage = function () {\n    const data = this.opts.data;\n    if (data.nowPage > 1) {\n        data.nowPage--;\n        const oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.previousElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.previousElementSibling.selected = true;\n        }\n        this.nextPageEnable();\n        this.opts.callback.prevPage(this);\n    }\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    console.log(data);\n};\n\n// 下一页\nSubType.prototype.nextPage = function () {\n    const data = this.opts.data;\n    if (data.nowPage < data.allPage) {\n        data.nowPage++;\n        const oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.nextElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.nextElementSibling.selected = true;\n        }\n        this.prevPageEnable();\n        this.opts.callback.nextPage(this);\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    console.log(data);\n};\n\n// 选择第几页\nSubType.prototype.selectPage = function () {\n    const data = this.opts.data;\n    data.nowPage = this.selectDom.value;\n    this.nextPageEnable();\n    this.prevPageEnable();\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    this.opts.callback.selectPage(this);\n    console.log(data);\n};\n\n// 上一页禁用\nSubType.prototype.prevPageDisable = function () {\n    this.prevDom.classList.add(this.btnInactiveClass);\n};\n\n// 上一页启用\nSubType.prototype.prevPageEnable = function () {\n    this.prevDom.classList.remove(this.btnInactiveClass);\n};\n\n// 下一页禁用\nSubType.prototype.nextPageDisable = function () {\n    this.nextDom.classList.add(this.btnInactiveClass);\n};\n\n// 下一页启用\nSubType.prototype.nextPageEnable = function () {\n    this.nextDom.classList.remove(this.btnInactiveClass);\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-pagination.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {\n            button: {\n                isShowIcon: false,\n            },\n        },\n        // 数据\n        data: {\n            icon: 'icon-meiyoushuju',\n            text: '没有数据',\n            button: {\n                icon: 'icon-shouye',\n                text: '回首页',\n                href: '/',\n            },\n        },\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    const data = this.opts.data;\n    let buttonIconHtml = '';\n    if (this.opts.config.button.isShowIcon) {\n        buttonIconHtml = `<div class=\"g-button-icon iconfont ${data.button.icon}\"></div>`;\n    }\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-no-data',\n            innerHTML: `\n                <div class=\"g-no-data-icon iconfont ${data.icon}\"></div>\n                <div class=\"g-no-data-text\">${data.text}</div>\n                <a class=\"g-no-data-button g-button\" href=\"${data.button.href}\">\n                    ${buttonIconHtml}\n                    <div class=\"g-button-text\">${data.button.text}</div>\n                </a>\n            `,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-no-data.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {},\n        // 数据\n        data: {},\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-sub-type',\n            innerHTML: `\n                <div class=\"g-sub-type-text\">周华飞爱侯丽杰,侯丽杰爱周华飞</div>\n            `,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-sub-type.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type-es6');// 超类型(子类型继承的对象)\n\n// 子类型\nclass SubType extends SuperType {\n    constructor(json) {\n        /*\n         * 继承超类型的属性和方法\n         * 就算使用Super.call继承属性,也会先执行内部的init函数,这个和es6的比较\n         * 我封装的es5继承函数constructor-inherit是先处理的参数this.opts,再进行的继承\n         * 这里的es6继承,是先进行的继承,再处理的参数,因为继承之前,子类无this属性\n         * 不管是es5的继承,还是es6的继承,都会执行函数内部的一切,例如\n         * 我封装的constructor-inherit继承属性时Super.call(this,this.opts),函数内部的init方法被执行了\n         * 执行前我处理了参数this.opts,所有一切还算稳定,我喜欢这个写法\n         * es6继承属性和方法用super(json),继承时函数内部的init方法也被执行了,执行后才处理的参数this.opts\n         * 后处理参数的话,即使我更新了默认的参数配置,覆盖了超类的方法,也获取不到最新参数上的数据,导致默认参数无效\n         * 因为函数执行super(json)的时候,init已经被调用了,数据是后更新的,所以不能获取到,因此\n         * 我需要清除内部模块,并进行重新调用,这点我很不喜欢,所以我现在的场景还是更适合es5的面向对象\n         * 注:init方法是我封装的超类型里的初始化方法,this.opts是超类型里的参数,参数我喜欢用对象的形式\n         * */\n        super(json);// 这里会执行一次超类里的init\n        // 制定内部的默认值\n        this.opts = tools.extend({\n            defaults: this.opts,\n            // inherits里放默认参数(继承超类型)\n            inherits: {\n                // 回调\n                callback: {},\n                // 配置\n                config: {},\n                // 数据\n                data: {},\n            },\n        });\n        // 接收外部的参数\n        this.opts = tools.extend({\n            defaults: this.opts,\n            inherits: json,\n        });\n        this.init();// 用es6继承的话,在子类里调初始化才有意义,因为子类的参数已经被赋予新值,建议不要在超类里初始化,在子类里初始化\n    }\n\n    // 内部模块的创建(覆盖超类型)\n    moduleDomCreate() {\n        this.moduleDom = applications.createElement({\n            style: this.opts.config.moduleDomStyle,\n            customAttribute: this.opts.config.moduleDomCustomAttribute,\n            attribute: {\n                className: 'g-sub-type-es6',\n                innerHTML: `\n                    <div class=\"g-sub-type-es6-text\">周华飞爱侯丽杰,侯丽杰爱周华飞</div>\n                `,\n            },\n        });\n    }\n\n    // 功能重写(覆盖超类型)\n    power() {\n        // 功能重写待续...\n    }\n}\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-sub-type-es6.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {\n            showHeight: 200,\n        },\n        // 数据\n        data: {},\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-go-top',\n            innerHTML: '<div class=\"g-go-top-icon iconfont icon-shangjiantou\"></div>',\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    const self = this;\n    this.moduleDom.addEventListener('click', function () {\n        applications.scrollTo({to: '0'});\n    });\n    window.addEventListener('scroll', function () {\n        const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n        if (scrollTop >= self.opts.config.showHeight) {\n            self.moduleDom.classList.add('g-go-top-active');\n        } else {\n            self.moduleDom.classList.remove('g-go-top-active');\n        }\n    });\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-go-top.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {\n            click: function () {\n            },\n        },\n        // 配置\n        config: {\n            isHand: false, // 是否手动控制\n            status: 'on', // 状态\n            txt: {\n                on: '已开启',\n                off: '已关闭',\n            },\n        },\n        // 数据\n        data: {},\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    const config = this.opts.config;\n    this.moduleDomActiveClass = 'g-radio-switch-active';\n    let isOn = '';\n    if (config.status === 'on') {\n        isOn = this.moduleDomActiveClass;\n    }\n    this.moduleDom = applications.createElement({\n        style: config.moduleDomStyle,\n        customAttribute: config.moduleDomCustomAttribute,\n        attribute: {\n            className: `g-radio-switch ${isOn}`,\n            innerHTML: `\n                <div class=\"g-radio-switch-wrap\">\n                    <div class=\"g-radio-switch-round\"></div>\n                </div>\n                <div class=\"g-radio-switch-text\">${config.txt[config.status]}</div>\n            `,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    const self = this;\n    const config = this.opts.config;\n    this.moduleDom.addEventListener('click', function () {\n        if (!config.isHand) {\n            if (!self.isOn()) {\n                self.on();\n            } else {\n                self.off();\n            }\n        }\n        self.opts.callback.click({status: config.status});\n    });\n};\n\n// 是否处于开启状态\nSubType.prototype.isOn = function () {\n    return this.moduleDom.classList.contains(this.moduleDomActiveClass);\n};\n\n// 开启\nSubType.prototype.on = function () {\n    const config = this.opts.config;\n    if (!this.isOn()) {\n        this.moduleDom.classList.add(this.moduleDomActiveClass);\n        config.status = 'on';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = `${config.txt[config.status]}`;\n    }\n};\n\n// 关闭\nSubType.prototype.off = function () {\n    const config = this.opts.config;\n    if (this.isOn()) {\n        this.moduleDom.classList.remove(this.moduleDomActiveClass);\n        config.status = 'off';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = `${config.txt[config.status]}`;\n    }\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-radio-switch.js","const tools = require('../utils/tools');// 工具方法集合\nconst applications = require('../utils/applications');// 应用方法集合\nconst SuperType = require('../components/g-super-type');// 超类型(子类型继承的对象)\n\n// 子类型\nconst SubType = tools.constructorInherit({\n    superType: SuperType,\n    // 默认参数(继承超类型)\n    parameter: {\n        // 回调\n        callback: {},\n        // 配置\n        config: {},\n        // 数据\n        data: {\n            header: [{content: 'undefined-header0'}, {content: 'undefined-header1'}, {content: 'undefined-header2'}],\n            body: [[{content: 'undefined-body0-0'}, {content: 'undefined-body0-1'}, {content: 'undefined-body0-2'}]],\n            footer: '',\n        },\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSubType.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-table',\n            innerHTML: `\n                <div class=\"g-table-header\">\n                    <div class=\"g-table-row\">\n                        ${this.moduleDomCreateHeader()}\n                    </div>\n                </div>\n                <div class=\"g-table-body\">\n                    ${this.moduleDomCreateBody()}\n                </div>\n                <div class=\"g-table-footer\">\n                    ${this.moduleDomCreateFooter()}\n                </div>\n            `,\n        },\n    });\n};\n\nSubType.prototype.moduleDomCreateHeader = function () {\n    let html = '';\n    this.opts.data.header.forEach(function (v) {\n        html += `\n            <div class=\"g-table-col\">\n                <div class=\"g-table-col-wrap\">\n                    ${v.content}\n                </div>\n            </div>\n        `;\n    });\n    return html;\n};\n\nSubType.prototype.moduleDomCreateBody = function () {\n    let html = '';\n    this.opts.data.body.forEach(function (v0) {\n        let row = '';\n        v0.forEach(function (v1) {\n            row += `\n                <div class=\"g-table-col\">\n                    <div class=\"g-table-col-wrap\">\n                        ${v1.content}\n                    </div>\n                </div>\n            `;\n        });\n        html += `<div class=\"g-table-row\">${row}</div>`;\n    });\n    return html;\n};\n\nSubType.prototype.moduleDomCreateFooter = function () {\n    return this.opts.data.footer;\n};\n\n// 功能(覆盖超类型)\nSubType.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = SubType;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/phone/js/components/g-table.js"],"sourceRoot":""}
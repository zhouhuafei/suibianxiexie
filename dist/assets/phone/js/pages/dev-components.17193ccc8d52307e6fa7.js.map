{"version":3,"sources":["webpack:///js/pages/dev-components.17193ccc8d52307e6fa7.js","webpack:///./app/phone/assets/js/components-dom/g-loading.js","webpack:///./app/phone/assets/js/components-dom/g-pagination.js","webpack:///./app/phone/assets/js/components-dom/g-no-data.js","webpack:///./app/phone/assets/js/components-dom/g-sub.js","webpack:///./app/phone/assets/js/components-dom/g-sub-es6.js","webpack:///./app/phone/assets/js/components-dom/g-radio-switch.js","webpack:///./app/phone/assets/js/components-dom/g-table.js","webpack:///./app/phone/assets/images/home/slide1.jpg","webpack:///./app/phone/assets/js/components-dom/g-slide.js","webpack:///./app/phone/assets/js/plugs/touch-slide.js","webpack:///./app/phone/assets/js/utils/px2rem.js","webpack:///./app/phone/assets/js/components-dom/g-navigation.js","webpack:///./app/phone/assets/js/components-dom-super/g-super-es6.js","webpack:///./app/phone/assets/js/pages/dev-components.js"],"names":["webpackJsonp","121","module","exports","__webpack_require__","tools","applications","Super","Sub","constructorInherit","callback","config","status","positionMethod","positionLocation","data","prototype","moduleDomCreate","this","opts","moduleDomHtml","moduleDomClass","moduleDom","createElement","style","moduleDomStyle","customAttribute","moduleDomCustomAttribute","attribute","className","innerHTML","power","122","defaultData","nowCount","allCount","nowPage","allPage","Math","ceil","prevPage","nextPage","selectPage","renderOption","prevDom","querySelectorAll","nextDom","btnInactiveClass","selectDom","querySelector","html","i","self","prevPageDisable","nextPageDisable","addEventListener","classList","contains","oldChecked","previousElementSibling","selected","nextPageEnable","console","log","nextElementSibling","prevPageEnable","value","add","remove","123","button","isShowIcon","icon","text","href","buttonIconHtml","124","125","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","call","ReferenceError","_inherits","subClass","superClass","Object","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","length","descriptor","defineProperty","key","protoProps","staticProps","_Super","json","getPrototypeOf","extend","126","click","isHand","txt","on","off","moduleDomActiveClass","isOn","127","header","content","body","footer","moduleDomCreateHeader","moduleDomCreateBody","moduleDomCreateFooter","forEach","v","v0","row","v1","16","p","21","TouchSlide","startFun","endFun","heightWidthScale","isShowHref","touchSlide","slideCell","mainCell","titCell","effect","autoPlay","delayTime","interTime","defaultIndex","switchLoadClass","switchLoad","items","img","width","height","src","renderHeader","renderBody","index","22","a","titOnClassName","autoPage","prevCell","nextCell","pageStateCell","pnLoop","toString","slice","toLowerCase","document","nodeType","obj","str","parEle","split","par","retn","attr","hasOwnProperty","push","_retn","r","getElementById","replace","tag","getElementsByTagName","j","cln","search","RegExp","tag2","k","addClass","ele","removeClass","prevBtn","nextBtn","pageState","conBox","twCell","scrollY","conBoxSize","children","navObj","navObjSize","parseInt","loop","oldIndex","inter","timeout","endTimeout","startX","startY","distX","distY","isTouchPad","test","navigator","appVersion","hasTouch","window","touchStart","touchMove","touchEnd","slideW","parentNode","clientWidth","tempSize","x","appendChild","cloneNode","insertBefore","el","tmp","_el","replaceChild","cssText","y","doStartFun","doEndFun","orientationChange","translate","dist","speed","webkitTransitionDuration","MozTransitionDuration","msTransitionDuration","OTransitionDuration","transitionDuration","webkitTransform","msTransform","MozTransform","OTransform","doPlay","isTouch","setTimeout","nowIndex","allImage","changeImagesSrc","imgSwitchSrc","getAttribute","tagName","backgroundImage","setInterval","z","clearTimeout","tStart","e","undefined","point","touches","pageX","pageY","tMove","tEnd","scale","abs","preventDefault","clearInterval","removeEventListener","23","px2rem","px","arguments","24","markHtml","isShowMark","50","wrap","moduleDomCreateBefore","moduleDomCreateAfter","moduleDomRenderBefore","moduleDomRenderAfter","moduleDomRemoveBefore","moduleDomRemoveAfter","moduleDomShowBefore","moduleDomShowAfter","moduleDomHideBefore","moduleDomHideAfter","wrapDomGetBefore","wrapDomGetAfter","wrapDomRemoveBefore","wrapDomRemoveAfter","moduleDomRenderMethod","method","child","moduleDomIsRender","moduleDomIsClearTimer","wrapDom","moduleDomTimer","init","render","moduleDomRemove","wrapDomGet","moduleDomRender","renderMethod","dom","getDomArray","removeChild","moduleDomClearTimer","keys","outerHTML","51","apply","superSelf","dataInfo","routes","Loading","WhenScrollBottom","num","isInitRender","success","dataLoadContinue","route","Dialog","confirm","alert","cancel","close","type","then","require","bind","catch","oe","52"],"mappings":"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","file":"js/pages/dev-components.17193ccc8d52307e6fa7.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 121:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {\n        status: 'loading', // 加载状态 loading(加载中) over(加载完毕)\n        positionMethod: '', // 模块的定位方式 'fixed'(相对于整个文档) 'absolute'(相对于外部容器)\n        positionLocation: 'center' // 模块的定位位置\n    },\n    // 数据\n    data: {}\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    var config = this.opts.config;\n    var moduleDomHtml = '';\n    var moduleDomClass = '';\n    var status = config.status;\n    var positionMethod = config.positionMethod;\n    var positionLocation = config.positionLocation;\n    // 加载中\n    if (status === 'loading') {\n        moduleDomClass = 'g-loading-run ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += 'g-loading-fixed g-loading-' + positionLocation;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += 'g-loading-absolute g-loading-' + positionLocation;\n        }\n        moduleDomHtml = '\\n            <div class=\"g-loading-body\">\\n                <div class=\"g-loading-run-icon iconfont icon-loading\"></div>\\n            </div>\\n        ';\n    }\n    // 加载完毕\n    if (status === 'over') {\n        moduleDomClass = 'g-loading-over ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += 'g-loading-fixed g-loading-' + positionLocation;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += 'g-loading-absolute g-loading-' + positionLocation;\n        }\n        moduleDomHtml = '\\n            <div class=\"g-loading-body\">\\n                <div class=\"g-loading-over-icon iconfont icon-no-data\"></div>\\n                <div class=\"g-loading-over-text\">\\u6CA1\\u6709\\u6570\\u636E\\u4E86</div>\\n            </div>\\n        ';\n    }\n    // 模块创建\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-loading ' + moduleDomClass,\n            innerHTML: moduleDomHtml\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 122:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 默认数据\nvar defaultData = {\n    nowCount: 10, // 当前页的数据条数\n    allCount: 100, // 数据总条数\n    nowPage: 1, // 当前页\n    allPage: null // 总页数\n};\ndefaultData.allPage = Math.ceil(defaultData.allCount / defaultData.nowCount);\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {\n        // 上一页的回调\n        prevPage: function prevPage() {},\n        // 下一页的回调\n        nextPage: function nextPage() {},\n        // 选择某一页的回调\n        selectPage: function selectPage() {}\n    },\n    // 配置\n    config: {},\n    // 数据\n    data: defaultData\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-pagination',\n            innerHTML: '\\n                <div class=\"g-pagination-text\">\\u7B2C</div>\\n                <div class=\"g-pagination-now-page\">\\n                    <label class=\"g-select\">\\n                        <span class=\"g-select-wrap\">\\n                            <select class=\"g-select-select\">\\n                                ' + this.renderOption() + '\\n                            </select>\\n                            <span class=\"g-select-mark iconfont icon-select\"></span>\\n                        </span>\\n                    </label>\\n                </div>\\n                <div class=\"g-pagination-text\">\\u9875</div>\\n                <a href=\"javascript:;\" class=\"g-pagination-btn g-pagination-btn-inactive iconfont icon-prev\"></a>\\n                <a href=\"javascript:;\" class=\"g-pagination-btn iconfont icon-next\"></a>\\n            '\n        }\n    });\n    this.prevDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[0]; // 上一页的按钮\n    this.nextDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[1]; // 下一页的按钮\n    this.btnInactiveClass = 'g-pagination-btn-inactive'; // 上一页和下一页的禁用状态\n    this.selectDom = this.moduleDom.querySelector('.g-pagination-now-page .g-select-select'); // 选择某一页的按钮\n};\n\n// 渲染第几页里面的页码\nSub.prototype.renderOption = function () {\n    var html = '';\n    for (var i = 0; i < this.opts.data.allPage; i++) {\n        html += '<option value=\"' + (i + 1) + '\">' + (i + 1) + '</option>';\n    }\n    return html;\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    var self = this;\n    var data = this.opts.data;\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n\n    this.prevDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.prevPage();\n        }\n    });\n\n    this.nextDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.nextPage();\n        }\n    });\n\n    this.selectDom.addEventListener('change', function () {\n        self.selectPage();\n    });\n};\n\n// 上一页\nSub.prototype.prevPage = function () {\n    var data = this.opts.data;\n    if (data.nowPage > 1) {\n        data.nowPage--;\n        var oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.previousElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.previousElementSibling.selected = true;\n        }\n        this.nextPageEnable();\n        this.opts.callback.prevPage(this);\n    }\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    console.log(data);\n};\n\n// 下一页\nSub.prototype.nextPage = function () {\n    var data = this.opts.data;\n    if (data.nowPage < data.allPage) {\n        data.nowPage++;\n        var oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.nextElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.nextElementSibling.selected = true;\n        }\n        this.prevPageEnable();\n        this.opts.callback.nextPage(this);\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    console.log(data);\n};\n\n// 选择第几页\nSub.prototype.selectPage = function () {\n    var data = this.opts.data;\n    data.nowPage = this.selectDom.value;\n    this.nextPageEnable();\n    this.prevPageEnable();\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    this.opts.callback.selectPage(this);\n    console.log(data);\n};\n\n// 上一页禁用\nSub.prototype.prevPageDisable = function () {\n    this.prevDom.classList.add(this.btnInactiveClass);\n};\n\n// 上一页启用\nSub.prototype.prevPageEnable = function () {\n    this.prevDom.classList.remove(this.btnInactiveClass);\n};\n\n// 下一页禁用\nSub.prototype.nextPageDisable = function () {\n    this.nextDom.classList.add(this.btnInactiveClass);\n};\n\n// 下一页启用\nSub.prototype.nextPageEnable = function () {\n    this.nextDom.classList.remove(this.btnInactiveClass);\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 123:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {\n        button: {\n            isShowIcon: false\n        }\n    },\n    // 数据\n    data: {\n        icon: 'icon-no-data',\n        text: '没有数据',\n        button: {\n            icon: 'icon-home',\n            text: '回首页',\n            href: '/'\n        }\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    var data = this.opts.data;\n    var buttonIconHtml = '';\n    if (this.opts.config.button.isShowIcon) {\n        buttonIconHtml = '<div class=\"g-button-icon iconfont ' + data.button.icon + '\"></div>';\n    }\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-no-data',\n            innerHTML: '\\n                <div class=\"g-no-data-icon iconfont ' + data.icon + '\"></div>\\n                <div class=\"g-no-data-text\">' + data.text + '</div>\\n                <a class=\"g-no-data-button g-button\" href=\"' + data.button.href + '\">\\n                    ' + buttonIconHtml + '\\n                    <div class=\"g-button-text\">' + data.button.text + '</div>\\n                </a>\\n            '\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 124:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {},\n    // 数据\n    data: {}\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-sub-type',\n            innerHTML: '\\n                <div class=\"g-sub-type-text\" style=\"text-align: center;\">\\u5468\\u534E\\u98DE\\u7231\\u4FAF\\u4E3D\\u6770,\\u4FAF\\u4E3D\\u6770\\u7231\\u5468\\u534E\\u98DEsub-es5</div>\\n            '\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 125:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(50); // 超类型(子类型继承的对象)\n\n// 子类型\n\nvar Sub = function (_Super) {\n    _inherits(Sub, _Super);\n\n    function Sub(json) {\n        _classCallCheck(this, Sub);\n\n        return _possibleConstructorReturn(this, (Sub.__proto__ || Object.getPrototypeOf(Sub)).call(this, tools.extend({\n            // 回调\n            callback: {},\n            // 配置\n            config: {},\n            // 数据\n            data: {}\n        }, json)));\n    }\n\n    // 内部模块的创建(覆盖超类型)\n\n\n    _createClass(Sub, [{\n        key: 'moduleDomCreate',\n        value: function moduleDomCreate() {\n            this.moduleDom = applications.createElement({\n                style: this.opts.config.moduleDomStyle,\n                customAttribute: this.opts.config.moduleDomCustomAttribute,\n                attribute: {\n                    className: 'g-sub-type-es6',\n                    innerHTML: '\\n                    <div class=\"g-sub-type-es6-text\" style=\"text-align: center;\">\\u5468\\u534E\\u98DE\\u7231\\u4FAF\\u4E3D\\u6770,\\u4FAF\\u4E3D\\u6770\\u7231\\u5468\\u534E\\u98DEsub-es6</div>\\n                '\n                }\n            });\n        }\n\n        // 功能重写(覆盖超类型)\n\n    }, {\n        key: 'power',\n        value: function power() {\n            // 功能重写待续...\n        }\n    }]);\n\n    return Sub;\n}(Super);\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 126:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {\n        click: function click() {}\n    },\n    // 配置\n    config: {\n        isHand: false, // 是否手动控制\n        status: 'on', // 状态\n        txt: {\n            on: '已开启',\n            off: '已关闭'\n        }\n    },\n    // 数据\n    data: {}\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    var config = this.opts.config;\n    this.moduleDomActiveClass = 'g-radio-switch-active';\n    var isOn = '';\n    if (config.status === 'on') {\n        isOn = this.moduleDomActiveClass;\n    }\n    this.moduleDom = applications.createElement({\n        style: config.moduleDomStyle,\n        customAttribute: config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-radio-switch ' + isOn,\n            innerHTML: '\\n                <div class=\"g-radio-switch-wrap\">\\n                    <div class=\"g-radio-switch-round\"></div>\\n                </div>\\n                <div class=\"g-radio-switch-text\">' + config.txt[config.status] + '</div>\\n            '\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    var self = this;\n    var config = this.opts.config;\n    this.moduleDom.addEventListener('click', function () {\n        if (!config.isHand) {\n            if (!self.isOn()) {\n                self.on();\n            } else {\n                self.off();\n            }\n        }\n        self.opts.callback.click({ status: config.status });\n    });\n};\n\n// 是否处于开启状态\nSub.prototype.isOn = function () {\n    return this.moduleDom.classList.contains(this.moduleDomActiveClass);\n};\n\n// 开启\nSub.prototype.on = function () {\n    var config = this.opts.config;\n    if (!this.isOn()) {\n        this.moduleDom.classList.add(this.moduleDomActiveClass);\n        config.status = 'on';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = '' + config.txt[config.status];\n    }\n};\n\n// 关闭\nSub.prototype.off = function () {\n    var config = this.opts.config;\n    if (this.isOn()) {\n        this.moduleDom.classList.remove(this.moduleDomActiveClass);\n        config.status = 'off';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = '' + config.txt[config.status];\n    }\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 127:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {},\n    // 数据\n    data: {\n        header: [{ content: 'undefined-header0' }, { content: 'undefined-header1' }, { content: 'undefined-header2' }],\n        body: [[{ content: 'undefined-body0-0' }, { content: 'undefined-body0-1' }, { content: 'undefined-body0-2' }]],\n        footer: ''\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-table',\n            innerHTML: '\\n                <div class=\"g-table-header\">\\n                    <div class=\"g-table-row\">\\n                        ' + this.moduleDomCreateHeader() + '\\n                    </div>\\n                </div>\\n                <div class=\"g-table-body\">\\n                    ' + this.moduleDomCreateBody() + '\\n                </div>\\n                <div class=\"g-table-footer\">\\n                    ' + this.moduleDomCreateFooter() + '\\n                </div>\\n            '\n        }\n    });\n};\n\nSub.prototype.moduleDomCreateHeader = function () {\n    var html = '';\n    this.opts.data.header.forEach(function (v) {\n        html += '\\n            <div class=\"g-table-col\">\\n                <div class=\"g-table-col-wrap\">\\n                    ' + v.content + '\\n                </div>\\n            </div>\\n        ';\n    });\n    return html;\n};\n\nSub.prototype.moduleDomCreateBody = function () {\n    var html = '';\n    this.opts.data.body.forEach(function (v0) {\n        var row = '';\n        v0.forEach(function (v1) {\n            row += '\\n                <div class=\"g-table-col\">\\n                    <div class=\"g-table-col-wrap\">\\n                        ' + v1.content + '\\n                    </div>\\n                </div>\\n            ';\n        });\n        html += '<div class=\"g-table-row\">' + row + '</div>';\n    });\n    return html;\n};\n\nSub.prototype.moduleDomCreateFooter = function () {\n    return this.opts.data.footer;\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 16:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"images/slide1.76c52cf8.jpg\";\n\n/***/ }),\n\n/***/ 21:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\nvar TouchSlide = __webpack_require__(22); // 轮播图插件\nvar px2rem = __webpack_require__(23);\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {\n        startFun: function startFun() {},\n        endFun: function endFun() {}\n    },\n    // 配置\n    config: {\n        heightWidthScale: 1 / 2,\n        isShowHref: true, // 是否有跳转\n        // TouchSlide插件的配置\n        touchSlide: {\n            slideCell: '', // 外部容器,这个值会在底部进行覆盖,因为在这里没办法获取this\n            mainCell: '.g-slide-body', // 切换元素的包裹层对象\n            titCell: '.g-slide-header .g-slide-items', // 导航元素对象\n            effect: 'leftLoop', // 效果'left' 'leftLoop'\n            autoPlay: true, // 自动播放\n            delayTime: 200, // 切换一次的持续时间\n            interTime: 3000, // 多久切换一次\n            startFun: function startFun() {\n                console.log('此处的函数会被覆盖,请在callback里执行回调');\n            },\n            endFun: function endFun() {\n                console.log('此处的函数会被覆盖,请在callback里执行回调');\n            },\n            defaultIndex: 0, // 默认的当前位置索引\n            switchLoadClass: '.pre-load', // 预加载的class\n            switchLoad: 'data-src' // 预加载的属性\n        }\n    },\n    // 数据\n    data: {\n        items: [{\n            img: {\n                width: 0,\n                height: 0,\n                src: __webpack_require__(16)\n            },\n            href: ''\n        }]\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-slide',\n            innerHTML: '\\n                ' + this.renderHeader() + '\\n                ' + this.renderBody() + '\\n            '\n        }\n    });\n};\n\nSub.prototype.renderHeader = function () {\n    var self = this;\n    var html = '';\n    var data = self.opts.data;\n    var className = '';\n    data.items.forEach(function (v, i) {\n        if (i === self.opts.config.touchSlide.defaultIndex) {\n            className = 'on';\n        }\n        html += '<div class=\"g-slide-items ' + className + '\"></div>';\n    });\n    return '<div class=\"g-slide-header\">' + html + '</div>';\n};\n\nSub.prototype.renderBody = function () {\n    var self = this;\n    var html = '';\n    var data = self.opts.data;\n    data.items.forEach(function (v) {\n        if (self.opts.config.isShowHref) {\n            html += '<a href=\"' + (v.href || 'javascript:;') + '\" class=\"g-slide-items pre-load\" data-src=\"' + v.img.src + '\"></a>';\n        } else {\n            html += '<a class=\"g-slide-items pre-load\" data-src=\"' + v.img.src + '\"></a>';\n        }\n    });\n    return '<div class=\"g-slide-body\">' + html + '</div>';\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    var self = this;\n    var callback = self.opts.callback;\n    var config = self.opts.config;\n    var touchSlide = config.touchSlide;\n    var moduleDom = self.moduleDom;\n    // moduleDom.style.height = `${moduleDom.offsetWidth * config.heightWidthScale}px`;\n    moduleDom.style.height = 10 * config.heightWidthScale + 'rem';\n    touchSlide.slideCell = moduleDom;\n    touchSlide.startFun = function (i) {\n        // 因为以下功能在插件本身进行了实现(本人对touch-slide插件进行了小修改),所以这里就注释了\n        // var allImg = self.moduleDom.querySelectorAll('.g-slide-body .g-slide-items');\n        // var nowIndex = ( i + 1);\n        // if (touchSlide.effect == 'left') {\n        //     nowIndex = i;\n        // }\n        // var nowImg = allImg[nowIndex];\n        // var prevImg = allImg[nowIndex - 1];\n        // var nextImg = allImg[nowIndex + 1];\n        // nowImg.style.backgroundImage = `url(${nowImg.dataset.src})`;\n        // prevImg && (prevImg.style.backgroundImage = `url(${prevImg.dataset.src})`);\n        // nextImg && (nextImg.style.backgroundImage = `url(${nextImg.dataset.src})`);\n        callback.startFun({ self: self, index: i });\n    };\n    touchSlide.endFun = function (i) {\n        callback.endFun({ self: self, index: i });\n    };\n    TouchSlide(self.opts.config.touchSlide);\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*!\n * TouchSlide v1.1\n * javascript触屏滑动特效插件，移动端滑动特效，触屏焦点图，触屏Tab切换，触屏多图切换等\n * 详尽信息请看官网：http://www.SuperSlide2.com/TouchSlide/\n *\n * Copyright 2013 大话主席\n *\n * 请尊重原创，保留头部版权\n * 在保留版权的前提下可应用于个人或商业用途\n\n * 1.1 宽度自适应（修复安卓横屏时滑动范围不变的bug）\n */\n\n/*\n * 本人对此文件进行了稍微改动,还请见谅\n * 1.支持传入class和dom节点\n * 2.样式修改成flex布局\n * 3.把一些不规范的语法警告提示修正\n * 4.添加预加载功能pre-load,去掉插件自带的懒加载功能\n * 5.给主体区域的切换每一项加上className\n * */\n\n/* eslint-disable */\n\nvar TouchSlide = function TouchSlide(a) {\n    a = a || {};\n    var opts = {\n        slideCell: a.slideCell || '#touchSlide', //运行效果主对象，必须用id！，例如 slideCell:\"#touchSlide\"\n        titCell: a.titCell || '.hd li', // 导航对象，当自动分页设为true时为“导航对象包裹层”\n        mainCell: a.mainCell || '.bd', // 切换对象包裹层\n        effect: a.effect || 'left', // 效果，支持 left、leftLoop\n        autoPlay: a.autoPlay || false, // 自动播放\n        delayTime: a.delayTime || 200, // 效果持续时间\n        interTime: a.interTime || 2500, // 自动运行间隔\n        defaultIndex: a.defaultIndex || 0, // 默认的当前位置索引。0是第一个； defaultIndex:1 时，相当于从第2个开始执行\n        titOnClassName: a.titOnClassName || 'on', // 当前导航对象添加的className\n        autoPage: a.autoPage || false, // 自动分页，当为true时titCell为“导航对象包裹层”\n        prevCell: a.prevCell || '.prev', // 前一页按钮\n        nextCell: a.nextCell || '.next', // 后一页按钮\n        pageStateCell: a.pageStateCell || '.pageState', // 分页状态对象，用于显示分页状态，例如：2/3\n        pnLoop: a.pnLoop == 'undefined ' ? true : a.pnLoop, // 前后按钮点击是否继续执行效果，当为最前/后页是会自动添加“prevStop”/“nextStop”控制样色\n        startFun: a.startFun || null, // 每次切换效果开始时执行函数，用于处理特殊情况或创建更多效果。用法 satrtFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        endFun: a.endFun || null, // 每次切换效果结束时执行函数，用于处理特殊情况或创建更多效果。用法 endFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        switchLoadClass: a.switchLoadClass || '.pre-load', //预加载的class\n        switchLoad: a.switchLoad || 'data-src' //预加载的属性\n    };\n    var slideCell = null;\n    //如果是字符串\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'string') {\n        slideCell = document.querySelector(opts.slideCell);\n    }\n    //如果是dom节点(一个元素)    原生的\n    if (opts.slideCell.nodeType == 1) {\n        slideCell = opts.slideCell;\n    }\n    /*\n     * 如果是dom集合(一组元素)    HtmlCollection(通过getElementsBy系列获取到的)\n     * 如果是dom集合(一组元素)    NodeList(通过querySelectorAll获取到的)\n     * */\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'htmlcollection' || Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'nodelist') {\n        slideCell = opts.slideCell[0];\n    }\n    if (!slideCell) {\n        return;\n    }\n    //简单模拟jquery选择器\n    var obj = function obj(str, parEle) {\n        str = str.split(' ');\n        var par = [];\n        parEle = parEle || document;\n        var retn = [parEle];\n        for (var attr in str) {\n            if (str.hasOwnProperty(attr)) {\n                if (str[attr].length != 0) {\n                    par.push(str[attr]);\n                }\n            }\n        }\n        //去掉重复空格\n        for (var i in par) {\n            if (par.hasOwnProperty(i)) {\n                if (retn.length == 0) {\n                    return false;\n                }\n                var _retn = [];\n                for (var r in retn) {\n                    if (retn.hasOwnProperty(r)) {\n                        if (par[i][0] == '#') {\n                            _retn.push(document.getElementById(par[i].replace('#', '')));\n                        } else if (par[i][0] == '.') {\n                            var tag = retn[r].getElementsByTagName('*');\n                            for (var j = 0; j < tag.length; j++) {\n                                var cln = tag[j].className;\n                                if (cln && cln.search && cln.search(new RegExp('\\\\b' + par[i].replace('.', '') + '\\\\b')) != -1) {\n                                    _retn.push(tag[j]);\n                                }\n                            }\n                        } else {\n                            var tag2 = retn[r].getElementsByTagName(par[i]);\n                            for (var k = 0; k < tag2.length; k++) {\n                                _retn.push(tag2[k]);\n                            }\n                        }\n                    }\n                }\n                retn = _retn;\n            }\n        }\n        return retn.length == 0 || retn[0] == parEle ? false : retn;\n    };\n    // 创建包裹层\n    var wrap = function wrap(el, v) {\n        var tmp = document.createElement('div');\n        tmp.innerHTML = v;\n        tmp = tmp.children[0];\n        var _el = el.cloneNode(true);\n        tmp.appendChild(_el);\n        el.parentNode.replaceChild(tmp, el);\n        conBox = _el; // 重置conBox\n        return tmp;\n    };\n    // class处理\n    var addClass = function addClass(ele, className) {\n        if (!ele || !className || ele.className && ele.className.search(new RegExp('\\\\b' + className + '\\\\b')) != -1) {\n            return;\n        }\n        ele.className += (ele.className ? ' ' : '') + className;\n    };\n    var removeClass = function removeClass(ele, className) {\n        if (!ele || !className || ele.className && ele.className.search(new RegExp('\\\\b' + className + '\\\\b')) == -1) {\n            return;\n        }\n        ele.className = ele.className.replace(new RegExp('\\\\s*\\\\b' + className + '\\\\b', 'g'), '');\n    };\n    //全局对象\n    var effect = opts.effect;\n    var prevBtn = obj(opts.prevCell, slideCell)[0];\n    var nextBtn = obj(opts.nextCell, slideCell)[0];\n    var pageState = obj(opts.pageStateCell)[0];\n    var conBox = obj(opts.mainCell, slideCell)[0]; //内容元素父层对象\n    if (!conBox) {\n        return;\n    }\n    var conBoxSize = conBox.children.length;\n    var navObj = obj(opts.titCell, slideCell); //导航子元素结合\n    var navObjSize = navObj ? navObj.length : conBoxSize;\n    /*字符串转换*/\n    var index = parseInt(opts.defaultIndex);\n    var delayTime = parseInt(opts.delayTime);\n    var interTime = parseInt(opts.interTime);\n    var autoPlay = !(opts.autoPlay == 'false' || opts.autoPlay == false);\n    var autoPage = !(opts.autoPage == 'false' || opts.autoPage == false);\n    var loop = !(opts.pnLoop == 'false' || opts.pnLoop == false);\n    var oldIndex = index;\n    var inter = null; // autoPlay的setInterval\n    var timeout = null; // leftLoop的setTimeout\n    var endTimeout = null; //translate的setTimeout\n    var startX = 0;\n    var startY = 0;\n    var distX = 0;\n    var distY = 0;\n    //var dist = 0; //手指滑动距离\n    var isTouchPad = /hp-tablet/gi.test(navigator.appVersion);\n    var hasTouch = 'ontouchstart' in window && !isTouchPad;\n    var touchStart = hasTouch ? 'touchstart' : 'mousedown';\n    var touchMove = hasTouch ? 'touchmove' : '';\n    var touchEnd = hasTouch ? 'touchend' : 'mouseup';\n    var slideW = conBox.parentNode.clientWidth; // mainCell滑动距离\n    var twCell;\n    var scrollY;\n    var tempSize = conBoxSize;\n    //处理分页\n    if (navObjSize == 0) {\n        navObjSize = conBoxSize;\n    }\n    if (autoPage) {\n        navObjSize = conBoxSize;\n        navObj = navObj[0];\n        navObj.innerHTML = '';\n        var str = '';\n\n        if (opts.autoPage == true || opts.autoPage == 'true') {\n            for (var i = 0; i < navObjSize; i++) {\n                str += '<li>' + (i + 1) + '</li>';\n            }\n        } else {\n            for (var x = 0; x < navObjSize; x++) {\n                str += opts.autoPage.replace('$', x + 1);\n            }\n        }\n        navObj.innerHTML = str;\n        navObj = navObj.children; //重置navObj\n    }\n    if (effect == 'leftLoop') {\n        tempSize += 2;\n        conBox.appendChild(conBox.children[0].cloneNode(true));\n        conBox.insertBefore(conBox.children[conBoxSize - 1].cloneNode(true), conBox.children[0]);\n    }\n    twCell = wrap(conBox, '<div class=\"tempWrap\" style=\"height:inherit;overflow:hidden; position:relative;\"></div>');\n    conBox.style.cssText = 'display:flex;width:' + tempSize * slideW + 'px;' + 'position:relative;overflow:hidden;padding:0;margin:0;';\n    for (var y = 0; y < tempSize; y++) {\n        conBox.children[y].style.cssText = 'height:inherit;display:flex;align-items: center;justify-content: center;width:' + slideW + 'px';\n    }\n    var doStartFun = function doStartFun() {\n        if (typeof opts.startFun == 'function') {\n            opts.startFun(index, navObjSize);\n        }\n    };\n    var doEndFun = function doEndFun() {\n        if (typeof opts.endFun == 'function') {\n            opts.endFun(index, navObjSize);\n        }\n    };\n    //动态设置滑动宽度\n    var orientationChange = function orientationChange() {\n        slideW = twCell.clientWidth;\n        conBox.style.width = tempSize * slideW + 'px';\n        for (var i = 0; i < tempSize; i++) {\n            conBox.children[i].style.width = slideW + 'px';\n        }\n        var ind = effect == 'leftLoop' ? index + 1 : index;\n        translate(-ind * slideW, 0);\n    };\n    window.addEventListener('resize', orientationChange, false);\n    //滑动效果\n    var translate = function translate(dist, speed, ele) {\n        if (!!ele) {\n            ele = ele.style;\n        } else {\n            ele = conBox.style;\n        }\n        ele.webkitTransitionDuration = ele.MozTransitionDuration = ele.msTransitionDuration = ele.OTransitionDuration = ele.transitionDuration = speed + 'ms';\n        ele.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';\n        ele.msTransform = ele.MozTransform = ele.OTransform = 'translateX(' + dist + 'px)';\n    };\n    //效果函数\n    var doPlay = function doPlay(isTouch) {\n        switch (effect) {\n            case 'left':\n                if (index >= navObjSize) {\n                    index = isTouch ? index - 1 : 0;\n                } else if (index < 0) {\n                    index = isTouch ? 0 : navObjSize - 1;\n                }\n                translate(-index * slideW, delayTime);\n                oldIndex = index;\n                break;\n            case 'leftLoop':\n                translate(-(index + 1) * slideW, delayTime);\n                if (index == -1) {\n                    timeout = setTimeout(function () {\n                        translate(-navObjSize * slideW, 0);\n                    }, delayTime);\n                    index = navObjSize - 1;\n                } else if (index == navObjSize) {\n                    timeout = setTimeout(function () {\n                        translate(-slideW, 0);\n                    }, delayTime);\n                    index = 0;\n                }\n                oldIndex = index;\n                break;\n\n        }\n        //预加载\n        (function () {\n            var nowIndex = effect == 'leftLoop' ? index + 1 : index;\n            var allImage = conBox.querySelectorAll(opts.switchLoadClass);\n            var changeImagesSrc = function changeImagesSrc(img) {\n                if (img) {\n                    var imgSwitchSrc = img.getAttribute(opts.switchLoad);\n                    if (!imgSwitchSrc) {\n                        return false;\n                    }\n                    if (img.tagName.toLowerCase() == 'img') {\n                        img.src = imgSwitchSrc;\n                    } else {\n                        img.style.backgroundImage = 'url(' + imgSwitchSrc + ')';\n                    }\n                }\n            };\n            if (allImage.length > 0) {\n                changeImagesSrc(allImage[nowIndex]);\n                changeImagesSrc(allImage[nowIndex - 1]);\n                changeImagesSrc(allImage[nowIndex + 1]);\n            }\n        })();\n        doStartFun();\n        endTimeout = setTimeout(function () {\n            doEndFun();\n        }, delayTime);\n        //给按钮区域的切换每一项加上className\n        for (var i = 0; i < navObjSize; i++) {\n            removeClass(navObj[i], opts.titOnClassName);\n            if (i == index) {\n                addClass(navObj[i], opts.titOnClassName);\n            }\n        }\n        /*\n         * 给主体区域的切换每一项加上className\n         * 注:如果想配合className写css3小效果,建议使用effect属性的left值\n         * 否则切换到尾帧和切换到首帧时,视觉上的体验不好\n         * */\n        // (function () {\n        //     var nowJ = effect == \"leftLoop\" ? index + 1 : index;\n        //     for (var j = 0; j < conBox.children.length; j++) {\n        //         removeClass(conBox.children[j], opts.titOnClassName);\n        //         if (j == nowJ) {\n        //             addClass(conBox.children[j], opts.titOnClassName);\n        //         }\n        //     }\n        // })();\n        //loop控制是否继续循环\n        if (loop == false) {\n            removeClass(nextBtn, 'nextStop');\n            removeClass(prevBtn, 'prevStop');\n            if (index == 0) {\n                addClass(prevBtn, 'prevStop');\n            } else if (index == navObjSize - 1) {\n                addClass(nextBtn, 'nextStop');\n            }\n        }\n        if (pageState) {\n            pageState.innerHTML = '<span>' + (index + 1) + '</span>/' + navObjSize;\n        }\n    };\n    //初始化执行\n    doPlay();\n    //自动播放\n    if (autoPlay) {\n        inter = setInterval(function () {\n            index++;\n            doPlay();\n        }, interTime);\n    }\n    //点击事件\n    if (navObj) {\n        for (var z = 0; z < navObjSize; z++) {\n            (function () {\n                var j = z;\n                navObj[j].addEventListener('click', function () {\n                    clearTimeout(timeout);\n                    clearTimeout(endTimeout);\n                    index = j;\n                    doPlay();\n                });\n            })();\n        }\n    }\n    if (nextBtn) {\n        nextBtn.addEventListener('click', function () {\n            if (loop == true || index != navObjSize - 1) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index++;\n                doPlay();\n            }\n        });\n    }\n    if (prevBtn) {\n        prevBtn.addEventListener('click', function () {\n            if (loop == true || index != 0) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index--;\n                doPlay();\n            }\n        });\n    }\n    //触摸开始函数\n    var tStart = function tStart(e) {\n        clearTimeout(timeout);\n        clearTimeout(endTimeout);\n        scrollY = undefined;\n        distX = 0;\n        var point = hasTouch ? e.touches[0] : e;\n        startX = point.pageX;\n        startY = point.pageY;\n        //添加“触摸移动”事件监听\n        conBox.addEventListener(touchMove, tMove, false);\n        //添加“触摸结束”事件监听\n        conBox.addEventListener(touchEnd, tEnd, false);\n    };\n    //触摸移动函数\n    var tMove = function tMove(e) {\n        if (hasTouch) {\n            if (e.touches.length > 1 || e.scale && e.scale !== 1) {\n                return;\n            }\n        }\n        //多点或缩放\n        var point = hasTouch ? e.touches[0] : e;\n        distX = point.pageX - startX;\n        distY = point.pageY - startY;\n        if (typeof scrollY == 'undefined') {\n            scrollY = !!(scrollY || Math.abs(distX) < Math.abs(distY));\n        }\n        if (!scrollY) {\n            e.preventDefault();\n            if (autoPlay) {\n                clearInterval(inter);\n            }\n            switch (effect) {\n                case 'left':\n                    if (index == 0 && distX > 0 || index >= navObjSize - 1 && distX < 0) {\n                        distX = distX * 0.4;\n                    }\n                    translate(-index * slideW + distX, 0);\n                    break;\n                case 'leftLoop':\n                    translate(-(index + 1) * slideW + distX, 0);\n                    break;\n            }\n        }\n    };\n    //触摸结束函数\n    var tEnd = function tEnd(e) {\n        if (distX == 0) {\n            return;\n        }\n        e.preventDefault();\n        if (!scrollY) {\n            if (Math.abs(distX) > slideW / 10) {\n                distX > 0 ? index-- : index++;\n            }\n            doPlay(true);\n            if (autoPlay) {\n                inter = setInterval(function () {\n                    index++;\n                    doPlay();\n                }, interTime);\n            }\n        }\n\n        conBox.removeEventListener(touchMove, tMove, false);\n        conBox.removeEventListener(touchEnd, tEnd, false);\n    };\n    //添加“触摸开始”事件监听\n    conBox.addEventListener(touchStart, tStart, false);\n};\n\nmodule.exports = TouchSlide;\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction px2rem(px) {\n    var psd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 750;\n\n    return px / psd * 10 + \"rem\";\n}\n\nmodule.exports = px2rem;\n\n/***/ }),\n\n/***/ 24:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n// 超类型(子类型继承的对象)\nvar route = '/phone/';\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {},\n    // 数据\n    data: {\n        items: [\n            /*\n            {\n                href: route,\n                icon: 'icon-home',\n                text: '首页',\n                isShowMark: false,\n            },\n            {\n                href: `${route}dev-globals/`,\n                icon: 'icon-dev',\n                text: '开发全局',\n                isShowMark: false,\n            },\n            {\n                href: `${route}dev-components/`,\n                icon: 'icon-dev',\n                text: '开发组件',\n                isShowMark: false,\n            },\n            {\n                href: `${route}dev-words/`,\n                icon: 'icon-dev',\n                text: '开发词汇',\n                isShowMark: false,\n            },\n            {\n                href: `${route}mine/`,\n                icon: 'icon-mine',\n                text: '我的',\n                isShowMark: false,\n            },\n            */\n        ]\n    }\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    var data = this.opts.data;\n    var items = data.items;\n    var html = '';\n    items.forEach(function (v) {\n        var markHtml = '';\n        if (v.isShowMark) {\n            markHtml = '<div class=\"g-navigation-mark\"></div>';\n        }\n        html += '\\n            <a href=\"' + v.href + '\" class=\"g-navigation-item\">\\n                <div class=\"g-navigation-icon iconfont ' + v.icon + '\"></div>\\n                <div class=\"g-navigation-text\">' + v.text + '</div>\\n                ' + markHtml + '\\n            </a>\\n        ';\n    });\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-navigation',\n            innerHTML: html\n        }\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n/***/ }),\n\n/***/ 50:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\n\n// 底层构造函数\n\nvar Super = function () {\n    function Super(json) {\n        _classCallCheck(this, Super);\n\n        // 函数外部传来的参数\n        this.opts = tools.extend(\n        // 内部默认参数\n        {\n            // 父级\n            wrap: '.g-body', // 这个仅支持传入选择器和原生dom节点\n            // 回调\n            callback: {\n                // 内部模块创建之前\n                moduleDomCreateBefore: function moduleDomCreateBefore(self) {\n                    // 内部模块创建之前的回调待续...\n                },\n                // 内部模块创建之后\n                moduleDomCreateAfter: function moduleDomCreateAfter(self) {\n                    // 内部模块创建之后的回调待续...\n                },\n                // 内部模块渲染之前\n                moduleDomRenderBefore: function moduleDomRenderBefore(self) {\n                    // 内部模块渲染之前的回调待续...\n                },\n                // 内部模块渲染之后\n                moduleDomRenderAfter: function moduleDomRenderAfter(self) {\n                    // 内部模块渲染之后的回调待续...\n                },\n                // 内部模块移除之前\n                moduleDomRemoveBefore: function moduleDomRemoveBefore(self) {\n                    // 内部模块移除之前的回调待续...\n                },\n                // 内部模块移除之后\n                moduleDomRemoveAfter: function moduleDomRemoveAfter(self) {\n                    // 内部模块移除之后的回调待续...\n                },\n                // 内部模块显示之前\n                moduleDomShowBefore: function moduleDomShowBefore(self) {\n                    // 内部模块显示之前的回调待续...\n                },\n                // 内部模块显示之后\n                moduleDomShowAfter: function moduleDomShowAfter(self) {\n                    // 内部模块显示之后的回调待续...\n                },\n                // 内部模块隐藏之前\n                moduleDomHideBefore: function moduleDomHideBefore(self) {\n                    // 内部模块隐藏之前的回调待续...\n                },\n                // 内部模块隐藏之后\n                moduleDomHideAfter: function moduleDomHideAfter(self) {\n                    // 内部模块隐藏之后的回调待续...\n                },\n                // 外部容器获取之前\n                wrapDomGetBefore: function wrapDomGetBefore(self) {\n                    // 外部容器获取之前的回调待续...\n                },\n                // 外部容器获取之后\n                wrapDomGetAfter: function wrapDomGetAfter(self) {\n                    // 外部容器获取之后的回调待续...\n                },\n                // 外部容器移除之前\n                wrapDomRemoveBefore: function wrapDomRemoveBefore(self) {\n                    // 外部容器移除之前的回调待续...\n                },\n                // 外部容器移除之后\n                wrapDomRemoveAfter: function wrapDomRemoveAfter(self) {\n                    // 外部容器移除之后的回调待续...\n                }\n            },\n            // 配置\n            config: {\n                // 内部模块的自定义属性\n                moduleDomCustomAttribute: {},\n                // 内部模块插入到外部容器的方式\n                moduleDomRenderMethod: {\n                    method: 'appendChild', // 'appendChild','insertBefore'\n                    child: null\n                },\n                moduleDomStyle: {}, // 内部模块的样式\n                moduleDomIsRender: true, // 内部模块是否渲染\n                moduleDomIsClearTimer: true // 内部模块是否清除所有定时器(默认清除)\n            },\n            // 数据\n            data: {}\n        },\n        // 外部传入参数\n        json);\n        // 函数内部自带的属性\n        this.moduleDom = null; // 内部的模块\n        this.wrapDom = null; // 内部模块的外部承载容器,如果没有也没关系,不过不往里面append罢了\n        this.moduleDomTimer = {}; // 内部模块的定时器存储(假设内部模块有定时器)\n        this.init();\n    }\n\n    // 初始化\n\n\n    _createClass(Super, [{\n        key: 'init',\n        value: function init() {\n            this.render();\n            this.power();\n        }\n\n        // 渲染\n\n    }, {\n        key: 'render',\n        value: function render() {\n            this.moduleDomRemove(); // 内部模块的移除(重新初始化的时候要移除掉以前有的内部模块)\n\n            var callback = this.opts.callback;\n            callback.moduleDomCreateBefore(this);\n            this.moduleDomCreate(); // 内部模块的创建\n            callback.moduleDomCreateAfter(this);\n\n            this.wrapDomGet(); // 外部容器的获取\n            this.moduleDomRender(); // 内部模块的渲染(如果外部容器存在,就把内部模块填充到外部容器里)\n        }\n\n        // 功能(这个方法需要在子类型里被覆盖掉)\n\n    }, {\n        key: 'power',\n        value: function power() {}\n        // 功能待续...\n\n\n        // 内部模块的创建(这个方法需要在子类型里被覆盖掉)\n\n    }, {\n        key: 'moduleDomCreate',\n        value: function moduleDomCreate() {\n            this.moduleDom = applications.createElement({\n                style: this.opts.config.moduleDomStyle,\n                customAttribute: this.opts.config.moduleDomCustomAttribute,\n                attribute: {\n                    className: 'g-super-type-es6',\n                    innerHTML: '\\n                    <div class=\"g-super-type-es6-text\" style=\"text-align: center;\">\\u5468\\u534E\\u98DE\\u7231\\u4FAF\\u4E3D\\u6770,\\u4FAF\\u4E3D\\u6770\\u7231\\u5468\\u534E\\u98DEsup-es6</div>\\n                '\n                }\n            });\n        }\n\n        // 内部模块的渲染\n\n    }, {\n        key: 'moduleDomRender',\n        value: function moduleDomRender() {\n            var callback = this.opts.callback;\n            var config = this.opts.config;\n            if (config.moduleDomIsRender && this.wrapDom) {\n                callback.moduleDomRenderBefore(this);\n                var renderMethod = config.moduleDomRenderMethod;\n                if (renderMethod.method === 'insertBefore') {\n                    var dom = applications.getDomArray(renderMethod.child)[0];\n                    if (dom) {\n                        this.wrapDom.insertBefore(this.moduleDom, dom);\n                    } else {\n                        this.wrapDom.insertBefore(this.moduleDom, this.wrapDom.children[0]);\n                    }\n                }\n                if (renderMethod.method === 'appendChild') {\n                    this.wrapDom.appendChild(this.moduleDom);\n                }\n                callback.moduleDomRenderAfter(this);\n            }\n        }\n\n        // 内部模块的移除\n\n    }, {\n        key: 'moduleDomRemove',\n        value: function moduleDomRemove() {\n            var callback = this.opts.callback;\n            if (this.moduleDom && this.moduleDom.parentNode) {\n                callback.moduleDomRemoveBefore(this);\n                this.moduleDom.parentNode.removeChild(this.moduleDom);\n                callback.moduleDomRemoveAfter(this);\n            }\n            this.moduleDomClearTimer();\n        }\n\n        // 内部模块的定时器清除(假设内部模块有定时器)\n\n    }, {\n        key: 'moduleDomClearTimer',\n        value: function moduleDomClearTimer() {\n            var self = this;\n            if (self.opts.config.moduleDomIsClearTimer) {\n                Object.keys(self.moduleDomTimer).forEach(function (attr) {\n                    clearInterval(self.moduleDomTimer[attr]);\n                    clearTimeout(self.moduleDomTimer[attr]);\n                });\n            }\n        }\n\n        // 内部模块的隐藏(显示隐藏和是否清除定时器无关)\n\n    }, {\n        key: 'moduleDomHide',\n        value: function moduleDomHide() {\n            var callback = this.opts.callback;\n            if (this.moduleDom.parentNode) {\n                this.opts.config.moduleDomIsRender = false;\n                callback.moduleDomHideBefore(this);\n                this.moduleDom.parentNode.removeChild(this.moduleDom);\n                callback.moduleDomHideAfter(this);\n            }\n        }\n\n        // 内部模块的显示(显示隐藏和是否清除定时器无关)\n\n    }, {\n        key: 'moduleDomShow',\n        value: function moduleDomShow() {\n            var callback = this.opts.callback;\n            callback.moduleDomShowBefore(this);\n            if (this.wrapDom) {\n                this.opts.config.moduleDomIsRender = true;\n                this.moduleDomRender();\n            }\n            callback.moduleDomShowAfter(this);\n        }\n\n        // 外部容器的获取\n\n    }, {\n        key: 'wrapDomGet',\n        value: function wrapDomGet() {\n            var callback = this.opts.callback;\n            callback.wrapDomGetBefore(this);\n            this.wrapDom = applications.getDomArray(this.opts.wrap)[0];\n            callback.wrapDomGetAfter(this);\n        }\n\n        // 外部容器的移除\n\n    }, {\n        key: 'wrapDomRemove',\n        value: function wrapDomRemove() {\n            var callback = this.opts.callback;\n            // 先移除内部的模块\n            this.moduleDomRemove();\n            // 再移除外部的容器\n            if (this.wrapDom) {\n                callback.wrapDomRemoveBefore(this);\n                this.wrapDom.parentNode.removeChild(this.wrapDom);\n                callback.wrapDomRemoveAfter(this);\n            }\n        }\n\n        // 获取内部模块的整体html结构\n\n    }, {\n        key: 'getModuleDomHtml',\n        value: function getModuleDomHtml() {\n            return this.moduleDom.outerHTML;\n        }\n    }]);\n\n    return Super;\n}();\n\nmodule.exports = Super;\n\n/***/ }),\n\n/***/ 51:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n__webpack_require__(52);\nvar Super = __webpack_require__(3);\n\nvar Sub = function (_Super) {\n    _inherits(Sub, _Super);\n\n    function Sub() {\n        _classCallCheck(this, Sub);\n\n        return _possibleConstructorReturn(this, (Sub.__proto__ || Object.getPrototypeOf(Sub)).apply(this, arguments));\n    }\n\n    _createClass(Sub, [{\n        key: 'power',\n        value: function power() {\n            var superSelf = this;\n            var applications = superSelf.applications;\n            var dataInfo = superSelf.dataInfo;\n            var routes = dataInfo.routes;\n\n            // ajax测试\n            (function () {\n                // const Ajax = require('../api/ajax');\n                // new Ajax({\n                //     callback: {},\n                //     config: {\n                //         url: '/api/getList',\n                //     },\n                //     data: {\n                //         hellow: 'hellow',\n                //     },\n                // });\n            })();\n\n            // 测试滚动到底部功能以及loading组件\n            (function () {\n                var Loading = __webpack_require__(121);\n                var WhenScrollBottom = applications.WhenScrollBottom;\n                var num = 0;\n                new WhenScrollBottom({\n                    isInitRender: false,\n                    callback: {\n                        success: function success(self) {\n                            num++;\n                            new Loading({\n                                wrap: '.g-body',\n                                config: {\n                                    status: 'loading'\n                                }\n                            });\n                            if (num >= 5) {\n                                new Loading({\n                                    config: {\n                                        status: 'over'\n                                    }\n                                });\n                            } else {\n                                self.dataLoadContinue();\n                            }\n                        }\n                    }\n                });\n            })();\n\n            // slide切换\n            (function () {\n                var Slide = __webpack_require__(21);\n                new Slide({\n                    wrap: '.page-slide',\n                    data: {\n                        items: [{\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img1.imgtn.bdimg.com/it/u=1056872014,4038868309&fm=23&gp=0.jpg'\n                            },\n                            href: ''\n                        }, {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img3.imgtn.bdimg.com/it/u=1732308780,3782498029&fm=23&gp=0.jpg'\n                            },\n                            href: ''\n                        }, {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img3.imgtn.bdimg.com/it/u=4027566086,3099254237&fm=23&gp=0.jpg'\n                            },\n                            href: ''\n                        }, {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img4.imgtn.bdimg.com/it/u=120609946,455952432&fm=23&gp=0.jpg'\n                            },\n                            href: ''\n                        }, {\n                            img: {\n                                width: 0,\n                                height: 0,\n                                src: 'http://img2.imgtn.bdimg.com/it/u=2763208243,961494673&fm=23&gp=0.jpg'\n                            },\n                            href: ''\n                        }]\n                    }\n                });\n            })();\n\n            // 导航\n            (function () {\n                var Navigation = __webpack_require__(24);\n                new Navigation({\n                    wrap: '.page-navigation',\n                    data: {\n                        items: [{\n                            href: routes['home'].route,\n                            icon: 'icon-home',\n                            text: '首页',\n                            isShowMark: false\n                        }, {\n                            href: routes['dev-globals'].route,\n                            icon: 'icon-dev',\n                            text: '开发全局',\n                            isShowMark: false\n                        }, {\n                            href: routes['dev-components'].route,\n                            icon: 'icon-dev',\n                            text: '开发组件',\n                            isShowMark: false\n                        }, {\n                            href: routes['dev-words'].route,\n                            icon: 'icon-dev',\n                            text: '开发词汇',\n                            isShowMark: false\n                        }, {\n                            href: routes['mine'].route,\n                            icon: 'icon-mine',\n                            text: '我的',\n                            isShowMark: false\n                        }]\n                    }\n                });\n            })();\n\n            // 弹窗测试\n            (function () {\n                var Dialog = __webpack_require__(11);\n                document.querySelector('.page-button-dialog').addEventListener('click', function () {\n                    new Dialog({\n                        callback: {\n                            confirm: function confirm() {\n                                new Dialog({ config: { alert: { icon: 'icon-success', content: '已确认' } } });\n                            },\n                            cancel: function cancel() {\n                                new Dialog({ config: { alert: { icon: 'icon-success', content: '已取消' } } });\n                            },\n                            close: function close() {\n                                new Dialog({ config: { alert: { icon: 'icon-success', content: '已关闭' } } });\n                            }\n                        },\n                        config: {\n                            type: 'confirm'\n                        }\n                    });\n                });\n            })();\n\n            // 分页测试\n            (function () {\n                var Pagination = __webpack_require__(122);\n                new Pagination({ wrap: '.page-pagination' });\n            })();\n\n            // 没有数据\n            (function () {\n                var NoData = __webpack_require__(123);\n                new NoData({ wrap: '.page-no-data' });\n            })();\n\n            // 超类型模块测试\n            (function () {\n                var Super = __webpack_require__(2);\n                new Super({ wrap: '.page-super-type' });\n                var Sub = __webpack_require__(124);\n                new Sub({ wrap: '.page-super-type' });\n                new Sub(); // constructorInherit里parameter去掉了对象引用,否则这个子类的默认参数wrap会变成上面.page-super-type(bug回忆)\n                var SuperEs6 = __webpack_require__(50);\n                new SuperEs6({ wrap: '.page-super-type' });\n                var SubEs6 = __webpack_require__(125);\n                new SubEs6({ wrap: '.page-super-type' });\n            })();\n\n            // 单选开关\n            (function () {\n                var Radio = __webpack_require__(126);\n                new Radio({\n                    wrap: '.page-radio-switch',\n                    callback: {\n                        click: function click(json) {\n                            console.log(json);\n                        }\n                    }\n                });\n            })();\n\n            // 表格\n            (function () {\n                var Table = __webpack_require__(127);\n                new Table({\n                    wrap: '.page-table',\n                    data: {\n                        header: [{\n                            content: '<div>header0</div>'\n                        }, {\n                            content: '<div>header1</div>'\n                        }, {\n                            content: '<div>header2</div>'\n                        }],\n                        body: [[{\n                            content: '<div>body0-0</div>'\n                        }, {\n                            content: '<div>body1-0</div>'\n                        }, {\n                            content: '<div>body2-0</div>'\n                        }], [{\n                            content: '<div>body0-1</div>'\n                        }, {\n                            content: '<div>body1-1</div>'\n                        }, {\n                            content: '<div>body2-1</div>'\n                        }], [{\n                            content: '<div>body0-2</div>'\n                        }, {\n                            content: '<div>body1-2</div>'\n                        }, {\n                            content: '<div>body2-2</div>'\n                        }]],\n                        footer: ''\n                    }\n                });\n            })();\n\n            // 星评\n            (function () {\n                __webpack_require__.e/* require.ensure */(1).then((function (require) {\n                    var Star = __webpack_require__(162);\n                    new Star({\n                        wrap: '.page-star',\n                        callback: {\n                            click: function click(json) {\n                                console.log(json);\n                            }\n                        }\n                    });\n                }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n            })();\n        }\n    }]);\n\n    return Sub;\n}(Super);\n\nnew Sub();\n\n/***/ }),\n\n/***/ 52:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n},[51]);\n\n\n// WEBPACK FOOTER //\n// js/pages/dev-components.17193ccc8d52307e6fa7.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {\n        status: 'loading', // 加载状态 loading(加载中) over(加载完毕)\n        positionMethod: '', // 模块的定位方式 'fixed'(相对于整个文档) 'absolute'(相对于外部容器)\n        positionLocation: 'center', // 模块的定位位置\n    },\n    // 数据\n    data: {},\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    const config = this.opts.config;\n    let moduleDomHtml = '';\n    let moduleDomClass = '';\n    const status = config.status;\n    const positionMethod = config.positionMethod;\n    const positionLocation = config.positionLocation;\n    // 加载中\n    if (status === 'loading') {\n        moduleDomClass = 'g-loading-run ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += `g-loading-fixed g-loading-${positionLocation}`;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += `g-loading-absolute g-loading-${positionLocation}`;\n        }\n        moduleDomHtml = `\n            <div class=\"g-loading-body\">\n                <div class=\"g-loading-run-icon iconfont icon-loading\"></div>\n            </div>\n        `;\n    }\n    // 加载完毕\n    if (status === 'over') {\n        moduleDomClass = 'g-loading-over ';\n        // 相对文档居中\n        if (positionMethod === 'fixed') {\n            moduleDomClass += `g-loading-fixed g-loading-${positionLocation}`;\n        }\n        // 相对容器居中\n        if (positionMethod === 'absolute') {\n            moduleDomClass += `g-loading-absolute g-loading-${positionLocation}`;\n        }\n        moduleDomHtml = `\n            <div class=\"g-loading-body\">\n                <div class=\"g-loading-over-icon iconfont icon-no-data\"></div>\n                <div class=\"g-loading-over-text\">没有数据了</div>\n            </div>\n        `;\n    }\n    // 模块创建\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: `g-loading ${moduleDomClass}`,\n            innerHTML: moduleDomHtml,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-loading.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n\n// 默认数据\nconst defaultData = {\n    nowCount: 10, // 当前页的数据条数\n    allCount: 100, // 数据总条数\n    nowPage: 1, // 当前页\n    allPage: null, // 总页数\n};\ndefaultData.allPage = Math.ceil(defaultData.allCount / defaultData.nowCount);\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {\n        // 上一页的回调\n        prevPage: function () {\n        },\n        // 下一页的回调\n        nextPage: function () {\n        },\n        // 选择某一页的回调\n        selectPage: function () {\n        },\n    },\n    // 配置\n    config: {},\n    // 数据\n    data: defaultData,\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-pagination',\n            innerHTML: `\n                <div class=\"g-pagination-text\">第</div>\n                <div class=\"g-pagination-now-page\">\n                    <label class=\"g-select\">\n                        <span class=\"g-select-wrap\">\n                            <select class=\"g-select-select\">\n                                ${this.renderOption()}\n                            </select>\n                            <span class=\"g-select-mark iconfont icon-select\"></span>\n                        </span>\n                    </label>\n                </div>\n                <div class=\"g-pagination-text\">页</div>\n                <a href=\"javascript:;\" class=\"g-pagination-btn g-pagination-btn-inactive iconfont icon-prev\"></a>\n                <a href=\"javascript:;\" class=\"g-pagination-btn iconfont icon-next\"></a>\n            `,\n        },\n    });\n    this.prevDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[0];// 上一页的按钮\n    this.nextDom = this.moduleDom.querySelectorAll('.g-pagination-btn')[1];// 下一页的按钮\n    this.btnInactiveClass = 'g-pagination-btn-inactive';// 上一页和下一页的禁用状态\n    this.selectDom = this.moduleDom.querySelector('.g-pagination-now-page .g-select-select');// 选择某一页的按钮\n};\n\n// 渲染第几页里面的页码\nSub.prototype.renderOption = function () {\n    let html = '';\n    for (let i = 0; i < this.opts.data.allPage; i++) {\n        html += `<option value=\"${i + 1}\">${i + 1}</option>`;\n    }\n    return html;\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    const self = this;\n    const data = this.opts.data;\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n\n    this.prevDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.prevPage();\n        }\n    });\n\n    this.nextDom.addEventListener('click', function () {\n        if (!this.classList.contains(self.btnInactiveClass)) {\n            self.nextPage();\n        }\n    });\n\n    this.selectDom.addEventListener('change', function () {\n        self.selectPage();\n    });\n};\n\n// 上一页\nSub.prototype.prevPage = function () {\n    const data = this.opts.data;\n    if (data.nowPage > 1) {\n        data.nowPage--;\n        const oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.previousElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.previousElementSibling.selected = true;\n        }\n        this.nextPageEnable();\n        this.opts.callback.prevPage(this);\n    }\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    console.log(data);\n};\n\n// 下一页\nSub.prototype.nextPage = function () {\n    const data = this.opts.data;\n    if (data.nowPage < data.allPage) {\n        data.nowPage++;\n        const oldChecked = this.selectDom.querySelector('option:checked');\n        if (oldChecked.nextElementSibling) {\n            oldChecked.selected = false;\n            oldChecked.nextElementSibling.selected = true;\n        }\n        this.prevPageEnable();\n        this.opts.callback.nextPage(this);\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    console.log(data);\n};\n\n// 选择第几页\nSub.prototype.selectPage = function () {\n    const data = this.opts.data;\n    data.nowPage = this.selectDom.value;\n    this.nextPageEnable();\n    this.prevPageEnable();\n    if (data.nowPage === 1) {\n        this.prevPageDisable();\n    }\n    if (data.nowPage === data.allPage) {\n        this.nextPageDisable();\n    }\n    this.opts.callback.selectPage(this);\n    console.log(data);\n};\n\n// 上一页禁用\nSub.prototype.prevPageDisable = function () {\n    this.prevDom.classList.add(this.btnInactiveClass);\n};\n\n// 上一页启用\nSub.prototype.prevPageEnable = function () {\n    this.prevDom.classList.remove(this.btnInactiveClass);\n};\n\n// 下一页禁用\nSub.prototype.nextPageDisable = function () {\n    this.nextDom.classList.add(this.btnInactiveClass);\n};\n\n// 下一页启用\nSub.prototype.nextPageEnable = function () {\n    this.nextDom.classList.remove(this.btnInactiveClass);\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-pagination.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {\n        button: {\n            isShowIcon: false,\n        },\n    },\n    // 数据\n    data: {\n        icon: 'icon-no-data',\n        text: '没有数据',\n        button: {\n            icon: 'icon-home',\n            text: '回首页',\n            href: '/',\n        },\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    const data = this.opts.data;\n    let buttonIconHtml = '';\n    if (this.opts.config.button.isShowIcon) {\n        buttonIconHtml = `<div class=\"g-button-icon iconfont ${data.button.icon}\"></div>`;\n    }\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-no-data',\n            innerHTML: `\n                <div class=\"g-no-data-icon iconfont ${data.icon}\"></div>\n                <div class=\"g-no-data-text\">${data.text}</div>\n                <a class=\"g-no-data-button g-button\" href=\"${data.button.href}\">\n                    ${buttonIconHtml}\n                    <div class=\"g-button-text\">${data.button.text}</div>\n                </a>\n            `,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-no-data.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {},\n    // 数据\n    data: {},\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-sub-type',\n            innerHTML: `\n                <div class=\"g-sub-type-text\" style=\"text-align: center;\">周华飞爱侯丽杰,侯丽杰爱周华飞sub-es5</div>\n            `,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-sub.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super-es6'); // 超类型(子类型继承的对象)\n\n// 子类型\nclass Sub extends Super {\n    constructor(json) {\n        super(tools.extend({\n            // 回调\n            callback: {},\n            // 配置\n            config: {},\n            // 数据\n            data: {},\n        }, json));\n    }\n\n    // 内部模块的创建(覆盖超类型)\n    moduleDomCreate() {\n        this.moduleDom = applications.createElement({\n            style: this.opts.config.moduleDomStyle,\n            customAttribute: this.opts.config.moduleDomCustomAttribute,\n            attribute: {\n                className: 'g-sub-type-es6',\n                innerHTML: `\n                    <div class=\"g-sub-type-es6-text\" style=\"text-align: center;\">周华飞爱侯丽杰,侯丽杰爱周华飞sub-es6</div>\n                `,\n            },\n        });\n    }\n\n    // 功能重写(覆盖超类型)\n    power() {\n        // 功能重写待续...\n    }\n}\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-sub-es6.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {\n        click: function () {\n        },\n    },\n    // 配置\n    config: {\n        isHand: false, // 是否手动控制\n        status: 'on', // 状态\n        txt: {\n            on: '已开启',\n            off: '已关闭',\n        },\n    },\n    // 数据\n    data: {},\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    const config = this.opts.config;\n    this.moduleDomActiveClass = 'g-radio-switch-active';\n    let isOn = '';\n    if (config.status === 'on') {\n        isOn = this.moduleDomActiveClass;\n    }\n    this.moduleDom = applications.createElement({\n        style: config.moduleDomStyle,\n        customAttribute: config.moduleDomCustomAttribute,\n        attribute: {\n            className: `g-radio-switch ${isOn}`,\n            innerHTML: `\n                <div class=\"g-radio-switch-wrap\">\n                    <div class=\"g-radio-switch-round\"></div>\n                </div>\n                <div class=\"g-radio-switch-text\">${config.txt[config.status]}</div>\n            `,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    const self = this;\n    const config = this.opts.config;\n    this.moduleDom.addEventListener('click', function () {\n        if (!config.isHand) {\n            if (!self.isOn()) {\n                self.on();\n            } else {\n                self.off();\n            }\n        }\n        self.opts.callback.click({status: config.status});\n    });\n};\n\n// 是否处于开启状态\nSub.prototype.isOn = function () {\n    return this.moduleDom.classList.contains(this.moduleDomActiveClass);\n};\n\n// 开启\nSub.prototype.on = function () {\n    const config = this.opts.config;\n    if (!this.isOn()) {\n        this.moduleDom.classList.add(this.moduleDomActiveClass);\n        config.status = 'on';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = `${config.txt[config.status]}`;\n    }\n};\n\n// 关闭\nSub.prototype.off = function () {\n    const config = this.opts.config;\n    if (this.isOn()) {\n        this.moduleDom.classList.remove(this.moduleDomActiveClass);\n        config.status = 'off';\n        this.moduleDom.querySelector('.g-radio-switch-text').innerHTML = `${config.txt[config.status]}`;\n    }\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-radio-switch.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {},\n    // 数据\n    data: {\n        header: [{content: 'undefined-header0'}, {content: 'undefined-header1'}, {content: 'undefined-header2'}],\n        body: [[{content: 'undefined-body0-0'}, {content: 'undefined-body0-1'}, {content: 'undefined-body0-2'}]],\n        footer: '',\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-table',\n            innerHTML: `\n                <div class=\"g-table-header\">\n                    <div class=\"g-table-row\">\n                        ${this.moduleDomCreateHeader()}\n                    </div>\n                </div>\n                <div class=\"g-table-body\">\n                    ${this.moduleDomCreateBody()}\n                </div>\n                <div class=\"g-table-footer\">\n                    ${this.moduleDomCreateFooter()}\n                </div>\n            `,\n        },\n    });\n};\n\nSub.prototype.moduleDomCreateHeader = function () {\n    let html = '';\n    this.opts.data.header.forEach(function (v) {\n        html += `\n            <div class=\"g-table-col\">\n                <div class=\"g-table-col-wrap\">\n                    ${v.content}\n                </div>\n            </div>\n        `;\n    });\n    return html;\n};\n\nSub.prototype.moduleDomCreateBody = function () {\n    let html = '';\n    this.opts.data.body.forEach(function (v0) {\n        let row = '';\n        v0.forEach(function (v1) {\n            row += `\n                <div class=\"g-table-col\">\n                    <div class=\"g-table-col-wrap\">\n                        ${v1.content}\n                    </div>\n                </div>\n            `;\n        });\n        html += `<div class=\"g-table-row\">${row}</div>`;\n    });\n    return html;\n};\n\nSub.prototype.moduleDomCreateFooter = function () {\n    return this.opts.data.footer;\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-table.js","module.exports = __webpack_public_path__ + \"images/slide1.76c52cf8.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/phone/assets/images/home/slide1.jpg\n// module id = 16\n// module chunks = 3 4","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\nconst TouchSlide = require('../plugs/touch-slide'); // 轮播图插件\nconst px2rem = require('../utils/px2rem');\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {\n        startFun: function () {\n        },\n        endFun: function () {\n        },\n    },\n    // 配置\n    config: {\n        heightWidthScale: 1 / 2,\n        isShowHref: true, // 是否有跳转\n        // TouchSlide插件的配置\n        touchSlide: {\n            slideCell: '', // 外部容器,这个值会在底部进行覆盖,因为在这里没办法获取this\n            mainCell: '.g-slide-body', // 切换元素的包裹层对象\n            titCell: '.g-slide-header .g-slide-items', // 导航元素对象\n            effect: 'leftLoop', // 效果'left' 'leftLoop'\n            autoPlay: true, // 自动播放\n            delayTime: 200, // 切换一次的持续时间\n            interTime: 3000, // 多久切换一次\n            startFun: function () {\n                console.log('此处的函数会被覆盖,请在callback里执行回调');\n            },\n            endFun: function () {\n                console.log('此处的函数会被覆盖,请在callback里执行回调');\n            },\n            defaultIndex: 0, // 默认的当前位置索引\n            switchLoadClass: '.pre-load', // 预加载的class\n            switchLoad: 'data-src', // 预加载的属性\n        },\n    },\n    // 数据\n    data: {\n        items: [\n            {\n                img: {\n                    width: 0,\n                    height: 0,\n                    src: require('../../images/home/slide1.jpg'),\n                },\n                href: '',\n            },\n        ],\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-slide',\n            innerHTML: `\n                ${this.renderHeader()}\n                ${this.renderBody()}\n            `,\n        },\n    });\n};\n\nSub.prototype.renderHeader = function () {\n    const self = this;\n    let html = '';\n    const data = self.opts.data;\n    let className = '';\n    data.items.forEach(function (v, i) {\n        if (i === self.opts.config.touchSlide.defaultIndex) {\n            className = 'on';\n        }\n        html += `<div class=\"g-slide-items ${className}\"></div>`;\n    });\n    return `<div class=\"g-slide-header\">${html}</div>`;\n};\n\nSub.prototype.renderBody = function () {\n    const self = this;\n    let html = '';\n    const data = self.opts.data;\n    data.items.forEach(function (v) {\n        if (self.opts.config.isShowHref) {\n            html += `<a href=\"${v.href || 'javascript:;'}\" class=\"g-slide-items pre-load\" data-src=\"${v.img.src}\"></a>`;\n        } else {\n            html += `<a class=\"g-slide-items pre-load\" data-src=\"${v.img.src}\"></a>`;\n        }\n    });\n    return `<div class=\"g-slide-body\">${html}</div>`;\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    const self = this;\n    const callback = self.opts.callback;\n    const config = self.opts.config;\n    const touchSlide = config.touchSlide;\n    const moduleDom = self.moduleDom;\n    // moduleDom.style.height = `${moduleDom.offsetWidth * config.heightWidthScale}px`;\n    moduleDom.style.height = `${10 * config.heightWidthScale}rem`;\n    touchSlide.slideCell = moduleDom;\n    touchSlide.startFun = function (i) {\n        // 因为以下功能在插件本身进行了实现(本人对touch-slide插件进行了小修改),所以这里就注释了\n        // var allImg = self.moduleDom.querySelectorAll('.g-slide-body .g-slide-items');\n        // var nowIndex = ( i + 1);\n        // if (touchSlide.effect == 'left') {\n        //     nowIndex = i;\n        // }\n        // var nowImg = allImg[nowIndex];\n        // var prevImg = allImg[nowIndex - 1];\n        // var nextImg = allImg[nowIndex + 1];\n        // nowImg.style.backgroundImage = `url(${nowImg.dataset.src})`;\n        // prevImg && (prevImg.style.backgroundImage = `url(${prevImg.dataset.src})`);\n        // nextImg && (nextImg.style.backgroundImage = `url(${nextImg.dataset.src})`);\n        callback.startFun({self: self, index: i});\n    };\n    touchSlide.endFun = function (i) {\n        callback.endFun({self: self, index: i});\n    };\n    TouchSlide(self.opts.config.touchSlide);\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-slide.js","/*!\n * TouchSlide v1.1\n * javascript触屏滑动特效插件，移动端滑动特效，触屏焦点图，触屏Tab切换，触屏多图切换等\n * 详尽信息请看官网：http://www.SuperSlide2.com/TouchSlide/\n *\n * Copyright 2013 大话主席\n *\n * 请尊重原创，保留头部版权\n * 在保留版权的前提下可应用于个人或商业用途\n\n * 1.1 宽度自适应（修复安卓横屏时滑动范围不变的bug）\n */\n\n/*\n * 本人对此文件进行了稍微改动,还请见谅\n * 1.支持传入class和dom节点\n * 2.样式修改成flex布局\n * 3.把一些不规范的语法警告提示修正\n * 4.添加预加载功能pre-load,去掉插件自带的懒加载功能\n * 5.给主体区域的切换每一项加上className\n * */\n\n/* eslint-disable */\n\nvar TouchSlide = function (a) {\n    a = a || {};\n    var opts = {\n        slideCell: a.slideCell || '#touchSlide', //运行效果主对象，必须用id！，例如 slideCell:\"#touchSlide\"\n        titCell: a.titCell || '.hd li', // 导航对象，当自动分页设为true时为“导航对象包裹层”\n        mainCell: a.mainCell || '.bd', // 切换对象包裹层\n        effect: a.effect || 'left', // 效果，支持 left、leftLoop\n        autoPlay: a.autoPlay || false, // 自动播放\n        delayTime: a.delayTime || 200, // 效果持续时间\n        interTime: a.interTime || 2500, // 自动运行间隔\n        defaultIndex: a.defaultIndex || 0, // 默认的当前位置索引。0是第一个； defaultIndex:1 时，相当于从第2个开始执行\n        titOnClassName: a.titOnClassName || 'on', // 当前导航对象添加的className\n        autoPage: a.autoPage || false, // 自动分页，当为true时titCell为“导航对象包裹层”\n        prevCell: a.prevCell || '.prev', // 前一页按钮\n        nextCell: a.nextCell || '.next', // 后一页按钮\n        pageStateCell: a.pageStateCell || '.pageState', // 分页状态对象，用于显示分页状态，例如：2/3\n        pnLoop: a.pnLoop == 'undefined ' ? true : a.pnLoop, // 前后按钮点击是否继续执行效果，当为最前/后页是会自动添加“prevStop”/“nextStop”控制样色\n        startFun: a.startFun || null, // 每次切换效果开始时执行函数，用于处理特殊情况或创建更多效果。用法 satrtFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        endFun: a.endFun || null, // 每次切换效果结束时执行函数，用于处理特殊情况或创建更多效果。用法 endFun:function(i,c){ }； 其中i为当前分页，c为总页数\n        switchLoadClass: a.switchLoadClass || '.pre-load',//预加载的class\n        switchLoad: a.switchLoad || 'data-src' //预加载的属性\n    };\n    var slideCell = null;\n    //如果是字符串\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'string') {\n        slideCell = document.querySelector(opts.slideCell);\n    }\n    //如果是dom节点(一个元素)    原生的\n    if (opts.slideCell.nodeType == 1) {\n        slideCell = opts.slideCell;\n    }\n    /*\n     * 如果是dom集合(一组元素)    HtmlCollection(通过getElementsBy系列获取到的)\n     * 如果是dom集合(一组元素)    NodeList(通过querySelectorAll获取到的)\n     * */\n    if (Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'htmlcollection' || Object.prototype.toString.call(opts.slideCell).slice(8, -1).toLowerCase() == 'nodelist') {\n        slideCell = opts.slideCell[0];\n    }\n    if (!slideCell) {\n        return;\n    }\n    //简单模拟jquery选择器\n    var obj = function (str, parEle) {\n        str = str.split(' ');\n        var par = [];\n        parEle = parEle || document;\n        var retn = [parEle];\n        for (var attr in str) {\n            if (str.hasOwnProperty(attr)) {\n                if (str[attr].length != 0) {\n                    par.push(str[attr]);\n                }\n            }\n        }\n        //去掉重复空格\n        for (var i in par) {\n            if (par.hasOwnProperty(i)) {\n                if (retn.length == 0) {\n                    return false;\n                }\n                var _retn = [];\n                for (var r in retn) {\n                    if (retn.hasOwnProperty(r)) {\n                        if (par[i][0] == '#') {\n                            _retn.push(document.getElementById(par[i].replace('#', '')));\n                        } else if (par[i][0] == '.') {\n                            var tag = retn[r].getElementsByTagName('*');\n                            for (var j = 0; j < tag.length; j++) {\n                                var cln = tag[j].className;\n                                if (cln && cln.search && cln.search(new RegExp('\\\\b' + par[i].replace('.', '') + '\\\\b')) != -1) {\n                                    _retn.push(tag[j]);\n                                }\n                            }\n                        } else {\n                            var tag2 = retn[r].getElementsByTagName(par[i]);\n                            for (var k = 0; k < tag2.length; k++) {\n                                _retn.push(tag2[k]);\n                            }\n                        }\n                    }\n                }\n                retn = _retn;\n            }\n        }\n        return retn.length == 0 || retn[0] == parEle ? false : retn;\n    };\n    // 创建包裹层\n    var wrap = function (el, v) {\n        var tmp = document.createElement('div');\n        tmp.innerHTML = v;\n        tmp = tmp.children[0];\n        var _el = el.cloneNode(true);\n        tmp.appendChild(_el);\n        el.parentNode.replaceChild(tmp, el);\n        conBox = _el; // 重置conBox\n        return tmp;\n    };\n    // class处理\n    var addClass = function (ele, className) {\n        if (!ele || !className || (ele.className && ele.className.search(new RegExp('\\\\b' + className + '\\\\b')) != -1)) {\n            return;\n        }\n        ele.className += (ele.className ? ' ' : '') + className;\n    };\n    var removeClass = function (ele, className) {\n        if (!ele || !className || (ele.className && ele.className.search(new RegExp('\\\\b' + className + '\\\\b')) == -1)) {\n            return;\n        }\n        ele.className = ele.className.replace(new RegExp('\\\\s*\\\\b' + className + '\\\\b', 'g'), '');\n    };\n    //全局对象\n    var effect = opts.effect;\n    var prevBtn = obj(opts.prevCell, slideCell)[0];\n    var nextBtn = obj(opts.nextCell, slideCell)[0];\n    var pageState = obj(opts.pageStateCell)[0];\n    var conBox = obj(opts.mainCell, slideCell)[0];//内容元素父层对象\n    if (!conBox) {\n        return;\n    }\n    var conBoxSize = conBox.children.length;\n    var navObj = obj(opts.titCell, slideCell);//导航子元素结合\n    var navObjSize = navObj ? navObj.length : conBoxSize;\n    /*字符串转换*/\n    var index = parseInt(opts.defaultIndex);\n    var delayTime = parseInt(opts.delayTime);\n    var interTime = parseInt(opts.interTime);\n    var autoPlay = (!(opts.autoPlay == 'false' || opts.autoPlay == false));\n    var autoPage = (!(opts.autoPage == 'false' || opts.autoPage == false));\n    var loop = (!(opts.pnLoop == 'false' || opts.pnLoop == false));\n    var oldIndex = index;\n    var inter = null;// autoPlay的setInterval\n    var timeout = null; // leftLoop的setTimeout\n    var endTimeout = null;  //translate的setTimeout\n    var startX = 0;\n    var startY = 0;\n    var distX = 0;\n    var distY = 0;\n    //var dist = 0; //手指滑动距离\n    var isTouchPad = (/hp-tablet/gi).test(navigator.appVersion);\n    var hasTouch = 'ontouchstart' in window && !isTouchPad;\n    var touchStart = hasTouch ? 'touchstart' : 'mousedown';\n    var touchMove = hasTouch ? 'touchmove' : '';\n    var touchEnd = hasTouch ? 'touchend' : 'mouseup';\n    var slideW = conBox.parentNode.clientWidth;// mainCell滑动距离\n    var twCell;\n    var scrollY;\n    var tempSize = conBoxSize;\n    //处理分页\n    if (navObjSize == 0) {\n        navObjSize = conBoxSize;\n    }\n    if (autoPage) {\n        navObjSize = conBoxSize;\n        navObj = navObj[0];\n        navObj.innerHTML = '';\n        var str = '';\n\n        if (opts.autoPage == true || opts.autoPage == 'true') {\n            for (var i = 0; i < navObjSize; i++) {\n                str += '<li>' + (i + 1) + '</li>';\n            }\n        }\n        else {\n            for (var x = 0; x < navObjSize; x++) {\n                str += opts.autoPage.replace('$', (x + 1));\n            }\n        }\n        navObj.innerHTML = str;\n        navObj = navObj.children;//重置navObj\n    }\n    if (effect == 'leftLoop') {\n        tempSize += 2;\n        conBox.appendChild(conBox.children[0].cloneNode(true));\n        conBox.insertBefore(conBox.children[conBoxSize - 1].cloneNode(true), conBox.children[0]);\n    }\n    twCell = wrap(conBox, '<div class=\"tempWrap\" style=\"height:inherit;overflow:hidden; position:relative;\"></div>');\n    conBox.style.cssText = 'display:flex;width:' + tempSize * slideW + 'px;' + 'position:relative;overflow:hidden;padding:0;margin:0;';\n    for (var y = 0; y < tempSize; y++) {\n        conBox.children[y].style.cssText = 'height:inherit;display:flex;align-items: center;justify-content: center;width:' + slideW + 'px';\n    }\n    var doStartFun = function () {\n        if (typeof opts.startFun == 'function') {\n            opts.startFun(index, navObjSize);\n        }\n    };\n    var doEndFun = function () {\n        if (typeof opts.endFun == 'function') {\n            opts.endFun(index, navObjSize);\n        }\n    };\n    //动态设置滑动宽度\n    var orientationChange = function () {\n        slideW = twCell.clientWidth;\n        conBox.style.width = tempSize * slideW + 'px';\n        for (var i = 0; i < tempSize; i++) {\n            conBox.children[i].style.width = slideW + 'px';\n        }\n        var ind = effect == 'leftLoop' ? index + 1 : index;\n        translate(-ind * slideW, 0);\n    };\n    window.addEventListener('resize', orientationChange, false);\n    //滑动效果\n    var translate = function (dist, speed, ele) {\n        if (!!ele) {\n            ele = ele.style;\n        } else {\n            ele = conBox.style;\n        }\n        ele.webkitTransitionDuration = ele.MozTransitionDuration = ele.msTransitionDuration = ele.OTransitionDuration = ele.transitionDuration = speed + 'ms';\n        ele.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';\n        ele.msTransform = ele.MozTransform = ele.OTransform = 'translateX(' + dist + 'px)';\n    };\n    //效果函数\n    var doPlay = function (isTouch) {\n        switch (effect) {\n            case 'left':\n                if (index >= navObjSize) {\n                    index = isTouch ? index - 1 : 0;\n                } else if (index < 0) {\n                    index = isTouch ? 0 : navObjSize - 1;\n                }\n                translate((-index * slideW), delayTime);\n                oldIndex = index;\n                break;\n            case 'leftLoop':\n                translate(-(index + 1) * slideW, delayTime);\n                if (index == -1) {\n                    timeout = setTimeout(function () {\n                        translate(-navObjSize * slideW, 0);\n                    }, delayTime);\n                    index = navObjSize - 1;\n                } else if (index == navObjSize) {\n                    timeout = setTimeout(function () {\n                        translate(-slideW, 0);\n                    }, delayTime);\n                    index = 0;\n                }\n                oldIndex = index;\n                break;\n\n        }\n        //预加载\n        (function () {\n            var nowIndex = effect == 'leftLoop' ? index + 1 : index;\n            var allImage = conBox.querySelectorAll(opts.switchLoadClass);\n            var changeImagesSrc = function (img) {\n                if (img) {\n                    var imgSwitchSrc = img.getAttribute(opts.switchLoad);\n                    if (!imgSwitchSrc) {\n                        return false;\n                    }\n                    if (img.tagName.toLowerCase() == 'img') {\n                        img.src = imgSwitchSrc;\n                    } else {\n                        img.style.backgroundImage = `url(${imgSwitchSrc})`;\n                    }\n                }\n            };\n            if (allImage.length > 0) {\n                changeImagesSrc(allImage[nowIndex]);\n                changeImagesSrc(allImage[nowIndex - 1]);\n                changeImagesSrc(allImage[nowIndex + 1]);\n            }\n        })();\n        doStartFun();\n        endTimeout = setTimeout(function () {\n            doEndFun();\n        }, delayTime);\n        //给按钮区域的切换每一项加上className\n        for (var i = 0; i < navObjSize; i++) {\n            removeClass(navObj[i], opts.titOnClassName);\n            if (i == index) {\n                addClass(navObj[i], opts.titOnClassName);\n            }\n        }\n        /*\n         * 给主体区域的切换每一项加上className\n         * 注:如果想配合className写css3小效果,建议使用effect属性的left值\n         * 否则切换到尾帧和切换到首帧时,视觉上的体验不好\n         * */\n        // (function () {\n        //     var nowJ = effect == \"leftLoop\" ? index + 1 : index;\n        //     for (var j = 0; j < conBox.children.length; j++) {\n        //         removeClass(conBox.children[j], opts.titOnClassName);\n        //         if (j == nowJ) {\n        //             addClass(conBox.children[j], opts.titOnClassName);\n        //         }\n        //     }\n        // })();\n        //loop控制是否继续循环\n        if (loop == false) {\n            removeClass(nextBtn, 'nextStop');\n            removeClass(prevBtn, 'prevStop');\n            if (index == 0) {\n                addClass(prevBtn, 'prevStop');\n            } else if (index == navObjSize - 1) {\n                addClass(nextBtn, 'nextStop');\n            }\n        }\n        if (pageState) {\n            pageState.innerHTML = '<span>' + (index + 1) + '</span>/' + navObjSize;\n        }\n    };\n    //初始化执行\n    doPlay();\n    //自动播放\n    if (autoPlay) {\n        inter = setInterval(function () {\n            index++;\n            doPlay();\n        }, interTime);\n    }\n    //点击事件\n    if (navObj) {\n        for (var z = 0; z < navObjSize; z++) {\n            (function () {\n                var j = z;\n                navObj[j].addEventListener('click', function () {\n                    clearTimeout(timeout);\n                    clearTimeout(endTimeout);\n                    index = j;\n                    doPlay();\n                });\n            })();\n        }\n    }\n    if (nextBtn) {\n        nextBtn.addEventListener('click', function () {\n            if (loop == true || index != navObjSize - 1) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index++;\n                doPlay();\n            }\n        });\n    }\n    if (prevBtn) {\n        prevBtn.addEventListener('click', function () {\n            if (loop == true || index != 0) {\n                clearTimeout(timeout);\n                clearTimeout(endTimeout);\n                index--;\n                doPlay();\n            }\n        });\n    }\n    //触摸开始函数\n    var tStart = function (e) {\n        clearTimeout(timeout);\n        clearTimeout(endTimeout);\n        scrollY = undefined;\n        distX = 0;\n        var point = hasTouch ? e.touches[0] : e;\n        startX = point.pageX;\n        startY = point.pageY;\n        //添加“触摸移动”事件监听\n        conBox.addEventListener(touchMove, tMove, false);\n        //添加“触摸结束”事件监听\n        conBox.addEventListener(touchEnd, tEnd, false);\n    };\n    //触摸移动函数\n    var tMove = function (e) {\n        if (hasTouch) {\n            if (e.touches.length > 1 || e.scale && e.scale !== 1) {\n                return;\n            }\n        }\n        //多点或缩放\n        var point = hasTouch ? e.touches[0] : e;\n        distX = point.pageX - startX;\n        distY = point.pageY - startY;\n        if (typeof scrollY == 'undefined') {\n            scrollY = !!( scrollY || Math.abs(distX) < Math.abs(distY) );\n        }\n        if (!scrollY) {\n            e.preventDefault();\n            if (autoPlay) {\n                clearInterval(inter);\n            }\n            switch (effect) {\n                case 'left':\n                    if ((index == 0 && distX > 0) || (index >= navObjSize - 1 && distX < 0 )) {\n                        distX = distX * 0.4;\n                    }\n                    translate(-index * slideW + distX, 0);\n                    break;\n                case 'leftLoop':\n                    translate(-(index + 1) * slideW + distX, 0);\n                    break;\n            }\n        }\n    };\n    //触摸结束函数\n    var tEnd = function (e) {\n        if (distX == 0) {\n            return;\n        }\n        e.preventDefault();\n        if (!scrollY) {\n            if (Math.abs(distX) > slideW / 10) {\n                distX > 0 ? index-- : index++;\n            }\n            doPlay(true);\n            if (autoPlay) {\n                inter = setInterval(function () {\n                    index++;\n                    doPlay();\n                }, interTime);\n            }\n        }\n\n        conBox.removeEventListener(touchMove, tMove, false);\n        conBox.removeEventListener(touchEnd, tEnd, false);\n    };\n    //添加“触摸开始”事件监听\n    conBox.addEventListener(touchStart, tStart, false);\n};\n\nmodule.exports = TouchSlide;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/plugs/touch-slide.js","function px2rem(px, psd = 750) {\r\n    return `${px / psd * 10}rem`;\r\n}\r\n\r\nmodule.exports = px2rem;\r\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/utils/px2rem.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n// 超类型(子类型继承的对象)\nconst route = '/phone/';\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    // 回调\n    callback: {},\n    // 配置\n    config: {},\n    // 数据\n    data: {\n        items: [\n            /*\n            {\n                href: route,\n                icon: 'icon-home',\n                text: '首页',\n                isShowMark: false,\n            },\n            {\n                href: `${route}dev-globals/`,\n                icon: 'icon-dev',\n                text: '开发全局',\n                isShowMark: false,\n            },\n            {\n                href: `${route}dev-components/`,\n                icon: 'icon-dev',\n                text: '开发组件',\n                isShowMark: false,\n            },\n            {\n                href: `${route}dev-words/`,\n                icon: 'icon-dev',\n                text: '开发词汇',\n                isShowMark: false,\n            },\n            {\n                href: `${route}mine/`,\n                icon: 'icon-mine',\n                text: '我的',\n                isShowMark: false,\n            },\n            */\n        ],\n    },\n});\n\n// 内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    const data = this.opts.data;\n    const items = data.items;\n    let html = '';\n    items.forEach(function (v) {\n        let markHtml = '';\n        if (v.isShowMark) {\n            markHtml = '<div class=\"g-navigation-mark\"></div>';\n        }\n        html += `\n            <a href=\"${v.href}\" class=\"g-navigation-item\">\n                <div class=\"g-navigation-icon iconfont ${v.icon}\"></div>\n                <div class=\"g-navigation-text\">${v.text}</div>\n                ${markHtml}\n            </a>\n        `;\n    });\n    this.moduleDom = applications.createElement({\n        style: this.opts.config.moduleDomStyle,\n        customAttribute: this.opts.config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-navigation',\n            innerHTML: html,\n        },\n    });\n};\n\n// 功能(覆盖超类型)\nSub.prototype.power = function () {\n    // 功能重写待续...\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-navigation.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\n\n// 底层构造函数\nclass Super {\n    constructor(json) {\n        // 函数外部传来的参数\n        this.opts = tools.extend(\n            // 内部默认参数\n            {\n                // 父级\n                wrap: '.g-body', // 这个仅支持传入选择器和原生dom节点\n                // 回调\n                callback: {\n                    // 内部模块创建之前\n                    moduleDomCreateBefore: function (self) {\n                        // 内部模块创建之前的回调待续...\n                    },\n                    // 内部模块创建之后\n                    moduleDomCreateAfter: function (self) {\n                        // 内部模块创建之后的回调待续...\n                    },\n                    // 内部模块渲染之前\n                    moduleDomRenderBefore: function (self) {\n                        // 内部模块渲染之前的回调待续...\n                    },\n                    // 内部模块渲染之后\n                    moduleDomRenderAfter: function (self) {\n                        // 内部模块渲染之后的回调待续...\n                    },\n                    // 内部模块移除之前\n                    moduleDomRemoveBefore: function (self) {\n                        // 内部模块移除之前的回调待续...\n                    },\n                    // 内部模块移除之后\n                    moduleDomRemoveAfter: function (self) {\n                        // 内部模块移除之后的回调待续...\n                    },\n                    // 内部模块显示之前\n                    moduleDomShowBefore: function (self) {\n                        // 内部模块显示之前的回调待续...\n                    },\n                    // 内部模块显示之后\n                    moduleDomShowAfter: function (self) {\n                        // 内部模块显示之后的回调待续...\n                    },\n                    // 内部模块隐藏之前\n                    moduleDomHideBefore: function (self) {\n                        // 内部模块隐藏之前的回调待续...\n                    },\n                    // 内部模块隐藏之后\n                    moduleDomHideAfter: function (self) {\n                        // 内部模块隐藏之后的回调待续...\n                    },\n                    // 外部容器获取之前\n                    wrapDomGetBefore: function (self) {\n                        // 外部容器获取之前的回调待续...\n                    },\n                    // 外部容器获取之后\n                    wrapDomGetAfter: function (self) {\n                        // 外部容器获取之后的回调待续...\n                    },\n                    // 外部容器移除之前\n                    wrapDomRemoveBefore: function (self) {\n                        // 外部容器移除之前的回调待续...\n                    },\n                    // 外部容器移除之后\n                    wrapDomRemoveAfter: function (self) {\n                        // 外部容器移除之后的回调待续...\n                    },\n                },\n                // 配置\n                config: {\n                    // 内部模块的自定义属性\n                    moduleDomCustomAttribute: {},\n                    // 内部模块插入到外部容器的方式\n                    moduleDomRenderMethod: {\n                        method: 'appendChild', // 'appendChild','insertBefore'\n                        child: null,\n                    },\n                    moduleDomStyle: {}, // 内部模块的样式\n                    moduleDomIsRender: true, // 内部模块是否渲染\n                    moduleDomIsClearTimer: true, // 内部模块是否清除所有定时器(默认清除)\n                },\n                // 数据\n                data: {},\n            },\n            // 外部传入参数\n            json,\n        );\n        // 函数内部自带的属性\n        this.moduleDom = null;// 内部的模块\n        this.wrapDom = null;// 内部模块的外部承载容器,如果没有也没关系,不过不往里面append罢了\n        this.moduleDomTimer = {};// 内部模块的定时器存储(假设内部模块有定时器)\n        this.init();\n    }\n\n    // 初始化\n    init() {\n        this.render();\n        this.power();\n    }\n\n    // 渲染\n    render() {\n        this.moduleDomRemove();// 内部模块的移除(重新初始化的时候要移除掉以前有的内部模块)\n\n        const callback = this.opts.callback;\n        callback.moduleDomCreateBefore(this);\n        this.moduleDomCreate();// 内部模块的创建\n        callback.moduleDomCreateAfter(this);\n\n        this.wrapDomGet();// 外部容器的获取\n        this.moduleDomRender();// 内部模块的渲染(如果外部容器存在,就把内部模块填充到外部容器里)\n    }\n\n    // 功能(这个方法需要在子类型里被覆盖掉)\n    power() {\n        // 功能待续...\n    }\n\n    // 内部模块的创建(这个方法需要在子类型里被覆盖掉)\n    moduleDomCreate() {\n        this.moduleDom = applications.createElement({\n            style: this.opts.config.moduleDomStyle,\n            customAttribute: this.opts.config.moduleDomCustomAttribute,\n            attribute: {\n                className: 'g-super-type-es6',\n                innerHTML: `\n                    <div class=\"g-super-type-es6-text\" style=\"text-align: center;\">周华飞爱侯丽杰,侯丽杰爱周华飞sup-es6</div>\n                `,\n            },\n        });\n    }\n\n    // 内部模块的渲染\n    moduleDomRender() {\n        const callback = this.opts.callback;\n        const config = this.opts.config;\n        if (config.moduleDomIsRender && this.wrapDom) {\n            callback.moduleDomRenderBefore(this);\n            const renderMethod = config.moduleDomRenderMethod;\n            if (renderMethod.method === 'insertBefore') {\n                const dom = applications.getDomArray(renderMethod.child)[0];\n                if (dom) {\n                    this.wrapDom.insertBefore(this.moduleDom, dom);\n                } else {\n                    this.wrapDom.insertBefore(this.moduleDom, this.wrapDom.children[0]);\n                }\n            }\n            if (renderMethod.method === 'appendChild') {\n                this.wrapDom.appendChild(this.moduleDom);\n            }\n            callback.moduleDomRenderAfter(this);\n        }\n    }\n\n    // 内部模块的移除\n    moduleDomRemove() {\n        const callback = this.opts.callback;\n        if (this.moduleDom && this.moduleDom.parentNode) {\n            callback.moduleDomRemoveBefore(this);\n            this.moduleDom.parentNode.removeChild(this.moduleDom);\n            callback.moduleDomRemoveAfter(this);\n        }\n        this.moduleDomClearTimer();\n    }\n\n    // 内部模块的定时器清除(假设内部模块有定时器)\n    moduleDomClearTimer() {\n        const self = this;\n        if (self.opts.config.moduleDomIsClearTimer) {\n            Object.keys(self.moduleDomTimer).forEach(function (attr) {\n                clearInterval(self.moduleDomTimer[attr]);\n                clearTimeout(self.moduleDomTimer[attr]);\n            });\n        }\n    }\n\n    // 内部模块的隐藏(显示隐藏和是否清除定时器无关)\n    moduleDomHide() {\n        const callback = this.opts.callback;\n        if (this.moduleDom.parentNode) {\n            this.opts.config.moduleDomIsRender = false;\n            callback.moduleDomHideBefore(this);\n            this.moduleDom.parentNode.removeChild(this.moduleDom);\n            callback.moduleDomHideAfter(this);\n        }\n    }\n\n    // 内部模块的显示(显示隐藏和是否清除定时器无关)\n    moduleDomShow() {\n        const callback = this.opts.callback;\n        callback.moduleDomShowBefore(this);\n        if (this.wrapDom) {\n            this.opts.config.moduleDomIsRender = true;\n            this.moduleDomRender();\n        }\n        callback.moduleDomShowAfter(this);\n    }\n\n    // 外部容器的获取\n    wrapDomGet() {\n        const callback = this.opts.callback;\n        callback.wrapDomGetBefore(this);\n        this.wrapDom = applications.getDomArray(this.opts.wrap)[0];\n        callback.wrapDomGetAfter(this);\n    }\n\n    // 外部容器的移除\n    wrapDomRemove() {\n        const callback = this.opts.callback;\n        // 先移除内部的模块\n        this.moduleDomRemove();\n        // 再移除外部的容器\n        if (this.wrapDom) {\n            callback.wrapDomRemoveBefore(this);\n            this.wrapDom.parentNode.removeChild(this.wrapDom);\n            callback.wrapDomRemoveAfter(this);\n        }\n    }\n\n    // 获取内部模块的整体html结构\n    getModuleDomHtml() {\n        return this.moduleDom.outerHTML;\n    }\n}\n\nmodule.exports = Super;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom-super/g-super-es6.js","require('../../scss/pages/dev-components.scss');\r\nconst Super = require('../pages-super/super');\r\n\r\nclass Sub extends Super {\r\n    power() {\r\n        const superSelf = this;\r\n        const applications = superSelf.applications;\r\n        const dataInfo = superSelf.dataInfo;\r\n        const routes = dataInfo.routes;\r\n\r\n        // ajax测试\r\n        (function () {\r\n            // const Ajax = require('../api/ajax');\r\n            // new Ajax({\r\n            //     callback: {},\r\n            //     config: {\r\n            //         url: '/api/getList',\r\n            //     },\r\n            //     data: {\r\n            //         hellow: 'hellow',\r\n            //     },\r\n            // });\r\n        }());\r\n\r\n        // 测试滚动到底部功能以及loading组件\r\n        (function () {\r\n            const Loading = require('../components-dom/g-loading');\r\n            const WhenScrollBottom = applications.WhenScrollBottom;\r\n            let num = 0;\r\n            new WhenScrollBottom({\r\n                isInitRender: false,\r\n                callback: {\r\n                    success: function (self) {\r\n                        num++;\r\n                        new Loading({\r\n                            wrap: '.g-body',\r\n                            config: {\r\n                                status: 'loading',\r\n                            },\r\n                        });\r\n                        if (num >= 5) {\r\n                            new Loading({\r\n                                config: {\r\n                                    status: 'over',\r\n                                },\r\n                            });\r\n                        } else {\r\n                            self.dataLoadContinue();\r\n                        }\r\n                    },\r\n                },\r\n            });\r\n        }());\r\n\r\n        // slide切换\r\n        (function () {\r\n            const Slide = require('../components-dom/g-slide');\r\n            new Slide({\r\n                wrap: '.page-slide',\r\n                data: {\r\n                    items: [\r\n                        {\r\n                            img: {\r\n                                width: 0,\r\n                                height: 0,\r\n                                src: 'http://img1.imgtn.bdimg.com/it/u=1056872014,4038868309&fm=23&gp=0.jpg',\r\n                            },\r\n                            href: '',\r\n                        },\r\n                        {\r\n                            img: {\r\n                                width: 0,\r\n                                height: 0,\r\n                                src: 'http://img3.imgtn.bdimg.com/it/u=1732308780,3782498029&fm=23&gp=0.jpg',\r\n                            },\r\n                            href: '',\r\n                        },\r\n                        {\r\n                            img: {\r\n                                width: 0,\r\n                                height: 0,\r\n                                src: 'http://img3.imgtn.bdimg.com/it/u=4027566086,3099254237&fm=23&gp=0.jpg',\r\n                            },\r\n                            href: '',\r\n                        },\r\n                        {\r\n                            img: {\r\n                                width: 0,\r\n                                height: 0,\r\n                                src: 'http://img4.imgtn.bdimg.com/it/u=120609946,455952432&fm=23&gp=0.jpg',\r\n                            },\r\n                            href: '',\r\n                        },\r\n                        {\r\n                            img: {\r\n                                width: 0,\r\n                                height: 0,\r\n                                src: 'http://img2.imgtn.bdimg.com/it/u=2763208243,961494673&fm=23&gp=0.jpg',\r\n                            },\r\n                            href: '',\r\n                        },\r\n                    ],\r\n                },\r\n            });\r\n        }());\r\n\r\n        // 导航\r\n        (function () {\r\n            const Navigation = require('../components-dom/g-navigation');\r\n            new Navigation({\r\n                wrap: '.page-navigation',\r\n                data: {\r\n                    items: [\r\n                        {\r\n                            href: routes['home'].route,\r\n                            icon: 'icon-home',\r\n                            text: '首页',\r\n                            isShowMark: false,\r\n                        },\r\n                        {\r\n                            href: routes['dev-globals'].route,\r\n                            icon: 'icon-dev',\r\n                            text: '开发全局',\r\n                            isShowMark: false,\r\n                        },\r\n                        {\r\n                            href: routes['dev-components'].route,\r\n                            icon: 'icon-dev',\r\n                            text: '开发组件',\r\n                            isShowMark: false,\r\n                        },\r\n                        {\r\n                            href: routes['dev-words'].route,\r\n                            icon: 'icon-dev',\r\n                            text: '开发词汇',\r\n                            isShowMark: false,\r\n                        },\r\n                        {\r\n                            href: routes['mine'].route,\r\n                            icon: 'icon-mine',\r\n                            text: '我的',\r\n                            isShowMark: false,\r\n                        },\r\n                    ],\r\n                },\r\n            });\r\n        }());\r\n\r\n        // 弹窗测试\r\n        (function () {\r\n            const Dialog = require('../components-dom/g-dialog');\r\n            document.querySelector('.page-button-dialog').addEventListener('click', function () {\r\n                new Dialog({\r\n                    callback: {\r\n                        confirm: function () {\r\n                            new Dialog({config: {alert: {icon: 'icon-success', content: '已确认'}}});\r\n                        },\r\n                        cancel: function () {\r\n                            new Dialog({config: {alert: {icon: 'icon-success', content: '已取消'}}});\r\n                        },\r\n                        close: function () {\r\n                            new Dialog({config: {alert: {icon: 'icon-success', content: '已关闭'}}});\r\n                        },\r\n                    },\r\n                    config: {\r\n                        type: 'confirm',\r\n                    },\r\n                });\r\n            });\r\n        }());\r\n\r\n        // 分页测试\r\n        (function () {\r\n            const Pagination = require('../components-dom/g-pagination');\r\n            new Pagination({wrap: '.page-pagination'});\r\n        }());\r\n\r\n        // 没有数据\r\n        (function () {\r\n            const NoData = require('../components-dom/g-no-data');\r\n            new NoData({wrap: '.page-no-data'});\r\n        }());\r\n\r\n        // 超类型模块测试\r\n        (function () {\r\n            const Super = require('../components-dom-super/g-super');\r\n            new Super({wrap: '.page-super-type'});\r\n            const Sub = require('../components-dom/g-sub');\r\n            new Sub({wrap: '.page-super-type'});\r\n            new Sub(); // constructorInherit里parameter去掉了对象引用,否则这个子类的默认参数wrap会变成上面.page-super-type(bug回忆)\r\n            const SuperEs6 = require('../components-dom-super/g-super-es6');\r\n            new SuperEs6({wrap: '.page-super-type'});\r\n            const SubEs6 = require('../components-dom/g-sub-es6');\r\n            new SubEs6({wrap: '.page-super-type'});\r\n        }());\r\n\r\n        // 单选开关\r\n        (function () {\r\n            const Radio = require('../components-dom/g-radio-switch');\r\n            new Radio({\r\n                wrap: '.page-radio-switch',\r\n                callback: {\r\n                    click: function (json) {\r\n                        console.log(json);\r\n                    },\r\n                },\r\n            });\r\n        }());\r\n\r\n        // 表格\r\n        (function () {\r\n            const Table = require('../components-dom/g-table');\r\n            new Table({\r\n                wrap: '.page-table',\r\n                data: {\r\n                    header: [\r\n                        {\r\n                            content: '<div>header0</div>',\r\n                        },\r\n                        {\r\n                            content: '<div>header1</div>',\r\n                        },\r\n                        {\r\n                            content: '<div>header2</div>',\r\n                        },\r\n                    ],\r\n                    body: [\r\n                        [\r\n                            {\r\n                                content: '<div>body0-0</div>',\r\n                            },\r\n                            {\r\n                                content: '<div>body1-0</div>',\r\n                            },\r\n                            {\r\n                                content: '<div>body2-0</div>',\r\n                            },\r\n                        ],\r\n                        [\r\n                            {\r\n                                content: '<div>body0-1</div>',\r\n                            },\r\n                            {\r\n                                content: '<div>body1-1</div>',\r\n                            },\r\n                            {\r\n                                content: '<div>body2-1</div>',\r\n                            },\r\n                        ],\r\n                        [\r\n                            {\r\n                                content: '<div>body0-2</div>',\r\n                            },\r\n                            {\r\n                                content: '<div>body1-2</div>',\r\n                            },\r\n                            {\r\n                                content: '<div>body2-2</div>',\r\n                            },\r\n                        ],\r\n                    ],\r\n                    footer: '',\r\n                },\r\n            });\r\n        }());\r\n\r\n        // 星评\r\n        (function () {\r\n            require.ensure([], function (require) {\r\n                const Star = require('../components-dom/g-star');\r\n                new Star({\r\n                    wrap: '.page-star',\r\n                    callback: {\r\n                        click: function (json) {\r\n                            console.log(json);\r\n                        },\r\n                    },\r\n                });\r\n            }, 'g-star');\r\n        }());\r\n    }\r\n}\r\n\r\nnew Sub();\r\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/pages/dev-components.js"],"sourceRoot":""}
{"version":3,"sources":["webpack:///js/pages/password-modify.636e5b004b27888335db.js","webpack:///./app/admin/assets/js/pages/password-modify.js","webpack:///./app/admin/assets/js/components-dom/g-validate-form-hint.js"],"names":["webpackJsonp","111","module","exports","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","Super","_Super","Sub","this","getPrototypeOf","apply","arguments","superSelf","dataInfo","routes","axios","api","element","form","document","querySelector","addEventListener","url","action","method","data","$","serialize","then","json","status","window","location","href","route","Dialog","config","type","confirm","content","21","9","ValidateForm","opts","tools","extend","hintClass","applications","getDomArray","init","domAddPosition","checkStr","render","power","forEach","v","parentNode","customValidateRule","hintDom","createElement","classList","add","renderHintAdd","undefined","input","offsetWidth","innerHTML","txt","appendChild","renderHintRemove","parentDom","removeChild","validateInput","keys","obj","isValidateSuccess","fn","validateType","dataset","validate","validateHintTxt","hint","split","hintTxt","inputType","isPassword","isEmpty","isZero","isPositiveInteger","isAllPassValidate","eventsType","event","setValidate","name"],"mappings":"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","file":"js/pages/password-modify.636e5b004b27888335db.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 111:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n__webpack_require__(21);\nvar Super = __webpack_require__(11);\n\nvar Sub = function (_Super) {\n    _inherits(Sub, _Super);\n\n    function Sub() {\n        _classCallCheck(this, Sub);\n\n        return _possibleConstructorReturn(this, (Sub.__proto__ || Object.getPrototypeOf(Sub)).apply(this, arguments));\n    }\n\n    _createClass(Sub, [{\n        key: 'power',\n        value: function power() {\n            var superSelf = this;\n            var dataInfo = superSelf.dataInfo;\n            var routes = dataInfo.routes;\n            var api = dataInfo.api;\n            var axios = superSelf.axios;\n\n            // 验证\n            (function () {\n                var ValidateInput = __webpack_require__(9);\n                new ValidateInput({ element: '.page-validate-form' });\n            })();\n\n            // 修改\n            (function () {\n                var form = document.querySelector('#form');\n                var username = document.querySelector('#username');\n                var oldPassword = document.querySelector('#old-password');\n                var newPassword = document.querySelector('#new-password');\n                var repeatNewPassword = document.querySelector('#repeat-new-password');\n                var btn = document.querySelector('.js-button');\n                btn.addEventListener('click', function () {\n                    axios({\n                        url: form.action,\n                        method: form.method,\n                        /*\n                        data: {\n                            username: username.value,\n                            'old-password': oldPassword.value,\n                            'new-password': newPassword.value,\n                            'repeat-password': repeatNewPassword.value,\n                        },\n                        */\n                        data: $(form).serialize()\n                        // data: new FormData(form),\n                    }).then(function (json) {\n                        if (json.status === 'success') {\n                            window.location.href = routes['login'].route;\n                            /*\n                            const DialogJumpLink = require('../components-dom/g-dialog-jump-link');\n                            new DialogJumpLink({\n                                title: json.message,\n                                seconds: 3,\n                                pageTitle: routes['login'].title,\n                                href: routes['login'].route,\n                            });\n                            */\n                        }\n                    });\n                });\n            })();\n\n            // 忘记密码,去删库\n            document.querySelector('.js-del-db').addEventListener('click', function () {\n                new superSelf.Dialog({\n                    config: {\n                        type: 'confirm', // 默认是提示框\n                        confirm: {\n                            content: '<div class=\"page-dialog-del-db\">\\n                            <div>1. \\u94FE\\u63A5\\u4F60\\u7684mongodb\\u6570\\u636E\\u5E93\\u3002</div>\\n                            <div>2. \\u627E\\u5230\\u540D\\u4E3Asuibianxiexie\\u7684\\u6570\\u636E\\u5E93\\u3002</div>\\n                            <div>3. \\u627E\\u5230\\u540D\\u4E3Aadmins\\u7684\\u96C6\\u5408\\u3002</div>\\n                            <div>4. \\u5220\\u9664\\u540D\\u4E3Aadmins\\u7684\\u96C6\\u5408\\u3002</div>\\n                            <div>5. \\u5728\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF\\u91CC\\u91CD\\u65B0\\u6CE8\\u518C\\u7BA1\\u7406\\u5458\\u8D26\\u53F7\\u3002</div>\\n                        </div>'\n                        }\n                    }\n                });\n            });\n        }\n    }]);\n\n    return Sub;\n}(Super);\n\nnew Sub();\n\n/***/ }),\n\n/***/ 21:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(2); // 应用方法集合\nvar domAddPosition = __webpack_require__(10);\nvar checkStr = tools.checkStr;\n\nfunction ValidateForm(json) {\n    this.opts = tools.extend({\n        element: '',\n        hintClass: 'g-validate-form-hint'\n    }, json);\n    if (this.opts.element) {\n        this.element = applications.getDomArray(this.opts.element);\n    }\n    if (this.element.length) {\n        this.init();\n    }\n}\n\nValidateForm.prototype.init = function () {\n    this.render();\n    this.power();\n};\nValidateForm.prototype.render = function () {\n    var self = this;\n    self.element.forEach(function (v) {\n        if (v.parentNode) {\n            domAddPosition(v.parentNode, 'relative');\n        }\n        v.customValidateRule = {}; // 自定义规则\n        v.hintDom = document.createElement('span');\n        v.hintDom.classList.add(self.opts.hintClass);\n    });\n};\nValidateForm.prototype.renderHintAdd = function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // 只有没被隐藏的才进行验证\n    var input = opts.input;\n    var hintDom = input.hintDom;\n    if (input.offsetWidth && hintDom) {\n        hintDom.innerHTML = opts.txt;\n        input.parentNode.appendChild(hintDom);\n    }\n};\nValidateForm.prototype.renderHintRemove = function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var input = opts.input;\n    var parentDom = input.parentNode;\n    var hintDom = input.parentNode.querySelector('.' + this.opts.hintClass);\n    if (parentDom && hintDom) {\n        parentDom.removeChild(input.hintDom);\n    }\n};\nValidateForm.prototype.validateInput = function (input) {\n    var self = this;\n    var customValidateRule = input.customValidateRule;\n    Object.keys(customValidateRule).forEach(function (keys) {\n        var obj = customValidateRule[keys];\n        obj.isValidateSuccess = obj.fn(input.value);\n    });\n    var validateType = input.dataset.validate || 'undefined';\n    var validateHintTxt = input.dataset.hint || 'undefined';\n    var type = validateType.split(' ');\n    var hintTxt = validateHintTxt.split(' ');\n    var value = input.value;\n    var inputType = input.type;\n    var isPassword = inputType === 'password';\n    var isValidateSuccess = true; // 是否验证成功了\n    type.forEach(function (v, i) {\n        if (isValidateSuccess && customValidateRule[v]) {\n            if (isValidateSuccess && customValidateRule[v].isValidateSuccess) {\n                self.renderHintRemove({ input: input });\n                isValidateSuccess = true;\n            } else {\n                self.renderHintAdd({ txt: hintTxt[i], input: input });\n                isValidateSuccess = false;\n            }\n        }\n        if (isValidateSuccess && !customValidateRule[v]) {\n            if (isValidateSuccess && v === 'no-empty') {\n                // 设置了非空验证\n                var isEmpty = checkStr.isEmpty(value);\n                if (isPassword) {\n                    isEmpty = value === ''; // input为password类型的进行特殊处理\n                }\n                if (isEmpty) {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'no-zero') {\n                // 设置了非零验证\n                if (checkStr.isZero(value)) {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-integer') {\n                // 设置了正整数验证\n                if (checkStr.isPositiveInteger(value)) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n        }\n    });\n    input.isValidateSuccess = isValidateSuccess;\n};\nValidateForm.prototype.isAllPassValidate = function () {\n    var self = this;\n    var isValidateSuccess = true;\n    self.element.forEach(function (v) {\n        self.validateInput(v);\n        if (v.isValidateSuccess !== true) {\n            isValidateSuccess = false;\n        }\n    });\n    return isValidateSuccess;\n};\nValidateForm.prototype.power = function () {\n    var self = this;\n    self.element.forEach(function (v) {\n        var eventsType = v.dataset.event || 'blur';\n        v.addEventListener(eventsType, function () {\n            self.validateInput(this);\n        });\n    });\n};\n\n// 自定义验证规则\nValidateForm.prototype.setValidate = function (name, fn) {\n    this.element.forEach(function (v) {\n        v.customValidateRule[name] = {\n            fn: fn,\n            isValidateSuccess: fn(v.value)\n        };\n    });\n};\n\nmodule.exports = ValidateForm;\n\n/***/ })\n\n},[111]);\n\n\n// WEBPACK FOOTER //\n// js/pages/password-modify.636e5b004b27888335db.js","require('../../scss/pages/register.scss');\nconst Super = require('../pages-super/super');\n\nclass Sub extends Super {\n    power() {\n        const superSelf = this;\n        const dataInfo = superSelf.dataInfo;\n        const routes = dataInfo.routes;\n        const api = dataInfo.api;\n        const axios = superSelf.axios;\n\n        // 验证\n        (function () {\n            const ValidateInput = require('../components-dom/g-validate-form-hint');\n            new ValidateInput({element: '.page-validate-form'});\n        }());\n\n        // 修改\n        (function () {\n            const form = document.querySelector('#form');\n            const username = document.querySelector('#username');\n            const oldPassword = document.querySelector('#old-password');\n            const newPassword = document.querySelector('#new-password');\n            const repeatNewPassword = document.querySelector('#repeat-new-password');\n            const btn = document.querySelector('.js-button');\n            btn.addEventListener('click', function () {\n                axios({\n                    url: form.action,\n                    method: form.method,\n                    /*\n                    data: {\n                        username: username.value,\n                        'old-password': oldPassword.value,\n                        'new-password': newPassword.value,\n                        'repeat-password': repeatNewPassword.value,\n                    },\n                    */\n                    data: $(form).serialize(),\n                    // data: new FormData(form),\n                }).then(function (json) {\n                    if (json.status === 'success') {\n                        window.location.href = routes['login'].route;\n                        /*\n                        const DialogJumpLink = require('../components-dom/g-dialog-jump-link');\n                        new DialogJumpLink({\n                            title: json.message,\n                            seconds: 3,\n                            pageTitle: routes['login'].title,\n                            href: routes['login'].route,\n                        });\n                        */\n                    }\n                });\n            });\n        })();\n\n        // 忘记密码,去删库\n        document.querySelector('.js-del-db').addEventListener('click', function () {\n            new superSelf.Dialog({\n                config: {\n                    type: 'confirm', // 默认是提示框\n                    confirm: {\n                        content: `<div class=\"page-dialog-del-db\">\n                            <div>1. 链接你的mongodb数据库。</div>\n                            <div>2. 找到名为suibianxiexie的数据库。</div>\n                            <div>3. 找到名为admins的集合。</div>\n                            <div>4. 删除名为admins的集合。</div>\n                            <div>5. 在后台管理系统里重新注册管理员账号。</div>\n                        </div>`,\n                    },\n                },\n            });\n        });\n    }\n}\n\nnew Sub();\n\n\n\n// WEBPACK FOOTER //\n// ./app/admin/assets/js/pages/password-modify.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst domAddPosition = require('zhf.dom-add-position');\nconst checkStr = tools.checkStr;\n\nfunction ValidateForm(json) {\n    this.opts = tools.extend({\n        element: '',\n        hintClass: 'g-validate-form-hint',\n    }, json);\n    if (this.opts.element) {\n        this.element = applications.getDomArray(this.opts.element);\n    }\n    if (this.element.length) {\n        this.init();\n    }\n}\n\nValidateForm.prototype.init = function () {\n    this.render();\n    this.power();\n};\nValidateForm.prototype.render = function () {\n    const self = this;\n    self.element.forEach(function (v) {\n        if (v.parentNode) {\n            domAddPosition(v.parentNode, 'relative');\n        }\n        v.customValidateRule = {}; // 自定义规则\n        v.hintDom = document.createElement('span');\n        v.hintDom.classList.add(self.opts.hintClass);\n    });\n};\nValidateForm.prototype.renderHintAdd = function (opts = {}) {\n    // 只有没被隐藏的才进行验证\n    const input = opts.input;\n    const hintDom = input.hintDom;\n    if (input.offsetWidth && hintDom) {\n        hintDom.innerHTML = opts.txt;\n        input.parentNode.appendChild(hintDom);\n    }\n};\nValidateForm.prototype.renderHintRemove = function (opts = {}) {\n    const input = opts.input;\n    const parentDom = input.parentNode;\n    const hintDom = input.parentNode.querySelector(`.${this.opts.hintClass}`);\n    if (parentDom && hintDom) {\n        parentDom.removeChild(input.hintDom);\n    }\n};\nValidateForm.prototype.validateInput = function (input) {\n    const self = this;\n    const customValidateRule = input.customValidateRule;\n    Object.keys(customValidateRule).forEach((keys) => {\n        const obj = customValidateRule[keys];\n        obj.isValidateSuccess = obj.fn(input.value);\n    });\n    const validateType = input.dataset.validate || 'undefined';\n    const validateHintTxt = input.dataset.hint || 'undefined';\n    const type = validateType.split(' ');\n    const hintTxt = validateHintTxt.split(' ');\n    const value = input.value;\n    const inputType = input.type;\n    const isPassword = inputType === 'password';\n    let isValidateSuccess = true; // 是否验证成功了\n    type.forEach(function (v, i) {\n        if (isValidateSuccess && customValidateRule[v]) {\n            if (isValidateSuccess && customValidateRule[v].isValidateSuccess) {\n                self.renderHintRemove({input: input});\n                isValidateSuccess = true;\n            } else {\n                self.renderHintAdd({txt: hintTxt[i], input: input});\n                isValidateSuccess = false;\n            }\n        }\n        if (isValidateSuccess && !customValidateRule[v]) {\n            if (isValidateSuccess && v === 'no-empty') { // 设置了非空验证\n                let isEmpty = checkStr.isEmpty(value);\n                if (isPassword) {\n                    isEmpty = value === ''; // input为password类型的进行特殊处理\n                }\n                if (isEmpty) {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'no-zero') { // 设置了非零验证\n                if (checkStr.isZero(value)) {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-integer') { // 设置了正整数验证\n                if (checkStr.isPositiveInteger(value)) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n        }\n    });\n    input.isValidateSuccess = isValidateSuccess;\n};\nValidateForm.prototype.isAllPassValidate = function () {\n    const self = this;\n    let isValidateSuccess = true;\n    self.element.forEach(function (v) {\n        self.validateInput(v);\n        if (v.isValidateSuccess !== true) {\n            isValidateSuccess = false;\n        }\n    });\n    return isValidateSuccess;\n};\nValidateForm.prototype.power = function () {\n    const self = this;\n    self.element.forEach(function (v) {\n        const eventsType = v.dataset.event || 'blur';\n        v.addEventListener(eventsType, function () {\n            self.validateInput(this);\n        });\n    });\n};\n\n// 自定义验证规则\nValidateForm.prototype.setValidate = function (name, fn) {\n    this.element.forEach(function (v) {\n        v.customValidateRule[name] = {\n            fn: fn,\n            isValidateSuccess: fn(v.value),\n        };\n    });\n};\n\nmodule.exports = ValidateForm;\n\n\n\n// WEBPACK FOOTER //\n// ./app/admin/assets/js/components-dom/g-validate-form-hint.js"],"sourceRoot":""}
{"version":3,"sources":["webpack:///js/pages/dev-globals.8414ba25ecf9f2bb8dfb.js","webpack:///./app/phone/assets/js/pages/dev-globals.js","webpack:///./app/phone/assets/js/components-dom/g-validate-form-hint.js","webpack:///./node_modules/zhf.dom-add-position/dist/index.min.js","webpack:///./node_modules/zhf.dom-position/dist/index.min.js","webpack:///./app/phone/assets/js/components-dom/g-dialog-confirm.js"],"names":["webpackJsonp","138","module","exports","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","Super","_Super","Sub","this","getPrototypeOf","apply","arguments","applications","SelectAll","items","callback","click","obj","console","log","element","setValidate","Number","DialogConfirm","DialogAlert","document","querySelector","addEventListener","confirm","config","icon","content","cancel","close","139","140","ValidateForm","json","opts","tools","extend","hintWrapClass","fileActiveClass","isBindEvent","init","domAddPosition","checkStr","getParent","getDomArray","hintClass","render","power","forEach","v","hintWrapDom","getHintWrapDom","hintDom","createElement","innerHTML","classList","add","input","parent","parentNode","renderHintAdd","undefined","txt","hintDomIsExist","insertBefore","children","renderHintRemove","removeChild","validateInput","offsetWidth","validateType","dataset","validate","validateHintTxt","hint","type","split","hintTxt","inputType","inputName","name","isPassword","isRadio","isCheckbox","isFile","customValidateRule","keys","isValidateSuccess","fn","isEmpty","isZero","isPositiveInteger","isPositiveFloat","isPhoneNumEasy","isEmail","isUrl","yesLimitLength","exec","isPassLimitLength","querySelectorAll","isAllPassValidate","eventIsRepeat","eventsType","event","$","on","141","o","t","e","style","position","DomPosition","hasPosition","142","n","dom","domHasPosition","domPositionType","getComputedStyle","29","constructorInherit","wrap","positionLocation","isShowClose","closeContent","isShowHeader","headerContent","isShowBody","isShowIcon","isCustom","isShowFooter","isShowConfirm","confirmContent","isShowCancel","cancelContent","isShowMask","isHandHide","data","moduleDomCreate","html","renderConfirm","moduleDom","moduleDomStyle","customAttribute","moduleDomCustomAttribute","attribute","className","htmlHeader","htmlBody","htmlIcon","bodyClass","bodyContent","htmlFooter","htmlCancel","htmlConfirm","htmlClose","htmlMask","moduleDomHide"],"mappings":"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","file":"js/pages/dev-globals.8414ba25ecf9f2bb8dfb.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 138:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n__webpack_require__(139);\nvar Super = __webpack_require__(3);\n\nvar Sub = function (_Super) {\n    _inherits(Sub, _Super);\n\n    function Sub() {\n        _classCallCheck(this, Sub);\n\n        return _possibleConstructorReturn(this, (Sub.__proto__ || Object.getPrototypeOf(Sub)).apply(this, arguments));\n    }\n\n    _createClass(Sub, [{\n        key: 'power',\n\n        // (功)(覆)功能(覆盖超类型)\n        value: function power() {\n            var self = this;\n            var applications = self.applications;\n\n            // base函数测试\n            (function () {\n                // 测试全选\n                var SelectAll = applications.SelectAll;\n                new SelectAll({\n                    items: '.g-checkbox-body-checkbox',\n                    callback: {\n                        click: function click(obj) {\n                            console.log(obj);\n                        }\n                    }\n                });\n            })();\n\n            // 验证\n            (function () {\n                var ValidateInput = __webpack_require__(140);\n                var validateInput = new ValidateInput({ element: '.js-validate-form' });\n                validateInput.setValidate('no-999', function (value) {\n                    return Number(value) !== 999;\n                });\n            })();\n\n            // 弹窗测试\n            (function () {\n                var DialogConfirm = __webpack_require__(29);\n                var DialogAlert = __webpack_require__(13);\n                document.querySelector('.js-button-dialog').addEventListener('click', function () {\n                    new DialogConfirm({\n                        callback: {\n                            confirm: function confirm() {\n                                new DialogAlert({ config: { icon: 'icon-success', content: '已确认' } });\n                            },\n                            cancel: function cancel() {\n                                new DialogAlert({ config: { icon: 'icon-success', content: '已取消' } });\n                            },\n                            close: function close() {\n                                new DialogAlert({ config: { icon: 'icon-success', content: '已关闭' } });\n                            }\n                        }\n                    });\n                });\n            })();\n        }\n    }]);\n\n    return Sub;\n}(Super);\n\nnew Sub();\n\n/***/ }),\n\n/***/ 139:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 140:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar domAddPosition = __webpack_require__(141);\nvar checkStr = tools.checkStr;\nvar getParent = applications.getParent;\nvar getDomArray = applications.getDomArray;\n\nfunction ValidateForm(json) {\n    this.opts = tools.extend({\n        element: '',\n        hintWrapClass: 'g-form', // 指定提示框的父级\n        fileActiveClass: 'g-upload_active', // 文件或者图片上传成功之后的class，做限制个数需要这个\n        isBindEvent: true // 是否绑定事件\n    }, json);\n    this.init();\n}\n\nValidateForm.prototype.init = function () {\n    this.hintClass = 'g-validate-form-hint';\n    this.render();\n    if (this.opts.isBindEvent) {\n        this.power();\n    }\n};\nValidateForm.prototype.render = function () {\n    var self = this;\n    self.element = getDomArray(this.opts.element); // 为了兼容未来动态创建的元素，此方法会被多次调用，元素要重新获取。\n    self.element.forEach(function (v) {\n        if (!v.hintWrapDom) {\n            // 为了兼容未来动态创建的元素，此方法会被多次调用，为了提高性能，所以这里不重新赋值，虽然此处可以重新赋值。\n            var hintWrapDom = self.getHintWrapDom(v);\n            if (hintWrapDom) {\n                domAddPosition(hintWrapDom, 'relative');\n                v.hintWrapDom = hintWrapDom;\n            }\n        }\n        if (!v.hintDom) {\n            // 为了兼容未来动态创建的元素，此方法会被多次调用，但是这里却不能重新赋值，否则会导致引用消失，以至于renderHintAdd时修改hintDom内g-validate-form-hint-text的innerHTML失效。\n            v.hintDom = document.createElement('span');\n            v.hintDom.innerHTML = '\\n                <span class=\"g-validate-form-hint-text\"></span>\\n                <span class=\"g-validate-form-hint-icon\"></span>\\n            ';\n            v.hintDom.classList.add(self.hintClass);\n        }\n    });\n};\nValidateForm.prototype.getHintWrapDom = function (input) {\n    var hintWrapClass = this.opts.hintWrapClass;\n    var parent = getParent(input, '.' + hintWrapClass); // 把这个放上面，是为了少调用一次getParent方法，因为g-form布局用的居多，g-validate-form-hint-wrap没怎么使用。\n    if (!parent) {\n        parent = getParent(input, '.g-validate-form-hint-wrap');\n    }\n    if (!parent) {\n        parent = input.parentNode;\n    }\n    return parent;\n};\nValidateForm.prototype.renderHintAdd = function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var input = opts.input;\n    var hintDom = input.hintDom;\n    if (hintDom) {\n        hintDom.querySelector('.g-validate-form-hint-text').innerHTML = opts.txt;\n        var hintWrapDom = input.hintWrapDom;\n        var hintDomIsExist = hintWrapDom.querySelector('.' + this.hintClass);\n        if (hintWrapDom && !hintDomIsExist) {\n            // hintWrapDom.appendChild(hintDom);\n            hintWrapDom.insertBefore(hintDom, hintWrapDom.children[0]);\n        }\n    }\n};\nValidateForm.prototype.renderHintRemove = function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var input = opts.input;\n    var hintWrapDom = input.hintWrapDom;\n    var hintDom = hintWrapDom.querySelector('.' + this.hintClass);\n    if (hintWrapDom && hintDom) {\n        hintWrapDom.removeChild(hintDom);\n    }\n};\nValidateForm.prototype.validateInput = function (input) {\n    var self = this;\n    var opts = self.opts;\n    if (input.offsetWidth === 0) {\n        // 不验证宽度为0的input(display为none时不验证)(只有没被隐藏的才进行验证)\n        return;\n    }\n    var validateType = input.dataset.validate || 'undefined';\n    var validateHintTxt = input.dataset.hint || 'undefined';\n    var type = validateType.split(' ');\n    var hintTxt = validateHintTxt.split(' ');\n    var hintWrapDom = input.hintWrapDom;\n    var inputType = input.type;\n    var inputName = input.name; // 这个不能使用，因为有些name名称是这种格式 hobby[] 此时通过name获取会报错 -> 纠正 其实不会报错 只需要 input[name=\"\"] 把变量放在双引号里拼接一下就行了\n    var isPassword = inputType === 'password';\n    var isRadio = inputType === 'radio';\n    var isCheckbox = inputType === 'checkbox';\n    var isFile = inputType === 'file';\n    var value = input.value;\n    if (isFile) {\n        // 如果是file类型的input，值就是input身上的自定义属性data-value\n        value = input.dataset.value;\n    }\n    // 验证自定义的规则\n    var customValidateRule = input.customValidateRule || {};\n    Object.keys(customValidateRule).forEach(function (keys) {\n        var obj = customValidateRule[keys];\n        obj.isValidateSuccess = obj.fn(value);\n    });\n    // 验证非自定义的规则\n    var isValidateSuccess = true; // 是否验证成功了，假设验证通过了。\n    type.forEach(function (v, i) {\n        if (isValidateSuccess && customValidateRule[v]) {\n            // 验证通过了且自定义验证存在则校验自定义的规则是否通过了\n            if (isValidateSuccess && customValidateRule[v].isValidateSuccess) {\n                self.renderHintRemove({ input: input });\n                isValidateSuccess = true;\n            } else {\n                self.renderHintAdd({ txt: hintTxt[i], input: input });\n                isValidateSuccess = false;\n            }\n        }\n        if (isValidateSuccess && !customValidateRule[v]) {\n            // 验证通过了且自定义验证不存在则校验非自定义的规则是否通过了\n            if (isValidateSuccess && v === 'no-empty') {\n                // 设置了非空验证\n                var isEmpty = checkStr.isEmpty(value);\n                if (isPassword) {\n                    // input为password类型的进行特殊处理\n                    isEmpty = value === ''; // 因为密码可以输入空格，所以没必要去除首尾空格。\n                }\n                if (isRadio || isCheckbox) {\n                    // input为radio类型和input为checkbox类型的进行特殊处理（这两种类型只验证是否必填就够用了，file类型和select下拉框也是只验证必填就够用了。）\n                    var isChecked = hintWrapDom.querySelector('input[name=\"' + inputName + '\"]:checked');\n                    isEmpty = isChecked === null;\n                }\n                if (isEmpty) {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'no-zero') {\n                // 设置了非零验证\n                if (checkStr.isZero(value)) {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-integer') {\n                // 设置了正整数验证\n                if (checkStr.isPositiveInteger(value)) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-float') {\n                // 设置了正浮点数验证\n                if (checkStr.isPositiveFloat(value)) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-phone') {\n                // 设置了电话验证\n                if (checkStr.isPhoneNumEasy(value)) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-email') {\n                // 设置了邮箱验证\n                if (checkStr.isEmail(value)) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-url') {\n                // 设置了网址验证\n                if (checkStr.isUrl(value)) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n            var yesLimitLength = /yes-limit-length-(\\d+)/.exec(v);\n            if (isValidateSuccess && yesLimitLength) {\n                // 设置了限制长度\n                var length = yesLimitLength[1];\n                var isPassLimitLength = value.length > length;\n                if (isCheckbox) {\n                    // input为checkbox类型的进行特殊处理\n                    var checkboxAll = hintWrapDom.querySelectorAll('input[name=\"' + inputName + '\"]:checked');\n                    isPassLimitLength = length >= checkboxAll.length;\n                }\n                if (isFile) {\n                    // input为file类型的进行特殊处理\n                    var fileAll = hintWrapDom.querySelectorAll('.' + opts.fileActiveClass); // 这个class应该放到opts里，是可配置的。\n                    isPassLimitLength = length >= fileAll.length;\n                }\n                if (isPassLimitLength) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n        }\n    });\n    input.isValidateSuccess = isValidateSuccess;\n};\nValidateForm.prototype.isAllPassValidate = function () {\n    var self = this;\n    self.render(); // 为了兼容未来动态创建的元素，这里需要重新渲染并绑定属性\n    var isValidateSuccess = true;\n    self.element.forEach(function (v) {\n        self.validateInput(v);\n        if (v.isValidateSuccess !== true) {\n            isValidateSuccess = false;\n        }\n    });\n    return isValidateSuccess;\n};\nValidateForm.prototype.power = function () {\n    var self = this;\n    var eventIsRepeat = {};\n    self.element.forEach(function (v) {\n        var eventsType = v.dataset.event || 'blur';\n        // js原生事件无法给未来动态创建的元素加事件，除非我用自己封装的那个事件委托进行绑定，但是代码上百行，还是直接用jq的吧。\n        // jq的事件委托很奇葩，如果input里有值，清空之后失去焦点会触发两次，没有值触发一次。\n        // 奇葩的原因是因为委托了blur和change事件，blur的时候如果value改变了，会触发blur和change，所以会触发两次，没毛病。\n        // jq的事件委托可以给未来动态创建的元素加事件，但是事件会被绑定多次，所以我定义了一个eventIsRepeat来进行过滤。\n        var name = eventsType + self.opts.element;\n        if (!eventIsRepeat[name]) {\n            eventIsRepeat[name] = true;\n            $(document).on(eventsType, self.opts.element, function () {\n                self.render(); // 为了兼容未来动态创建的元素，这里需要重新渲染并绑定属性\n                self.validateInput(this);\n            });\n        }\n    });\n};\n\n// 自定义验证规则\nValidateForm.prototype.setValidate = function (name, fn) {\n    this.element.forEach(function (v) {\n        if (!v.customValidateRule) {\n            v.customValidateRule = {}; // 自定义规则\n        }\n        v.customValidateRule[name] = {\n            fn: fn,\n            isValidateSuccess: false\n        };\n    });\n};\n\nmodule.exports = ValidateForm;\n\n/***/ }),\n\n/***/ 141:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar getDomArray=__webpack_require__(6),DomPosition=__webpack_require__(142);function domAddPosition(o){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"relative\",t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],e=getDomArray(o)[0];e?t?e.style.position=i:new DomPosition(e).hasPosition()||(e.style.position=i):console.log(\"no find dom\")}module.exports=domAddPosition;\n\n/***/ }),\n\n/***/ 142:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar _createClass=function(){function t(t,i){for(var o=0;o<i.length;o++){var n=i[o];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,o,n){return o&&t(i.prototype,o),n&&t(i,n),i}}();function _classCallCheck(t,i){if(!(t instanceof i))throw new TypeError(\"Cannot call a class as a function\")}var getDomArray=__webpack_require__(6),DomPosition=function(){function t(i){_classCallCheck(this,t);var o=getDomArray(i)[0];o?(this.dom=o,this.init()):console.log(\"no find dom\")}return _createClass(t,[{key:\"init\",value:function(){this.domHasPosition=!1,this.domPositionType=\"static\";var t=this.dom,i=getComputedStyle(t).position;\"static\"!==i&&\"\"!==i&&(this.domHasPosition=!0,this.domPositionType=i)}},{key:\"hasPosition\",value:function(t){return this.init(),void 0===t?this.domHasPosition:this.domPositionType===t}},{key:\"getPosition\",value:function(){return this.init(),this.domPositionType}},{key:\"setPosition\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"relative\",i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=this.dom;i?o.style.position=t:this.hasPosition()||(o.style.position=t)}}]),t}();module.exports=DomPosition;\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar Super = __webpack_require__(2); // 超类型(子类型继承的对象)\n\n// 子类型\nvar Sub = tools.constructorInherit(Super, {\n    wrap: '.g-wrap',\n    // 回调\n    callback: {\n        // 确认\n        confirm: function confirm() {},\n        // 取消\n        cancel: function cancel() {},\n        // 关闭\n        close: function close() {}\n    },\n    // 配置\n    config: {\n        positionLocation: 'center', // 弹窗的定位位置('top'，'center'，'bottom')。positionMethod定位方式强制fixed。\n        isShowClose: true, // 是否显示关闭按钮\n        closeContent: '<div class=\"iconfont icon-close\"></div>', // 关闭按钮的内容\n        isShowHeader: true, // 是否显示头部\n        headerContent: '提示:', // 头部内容\n        isShowBody: true, // 是否显示主体\n        isShowIcon: false, // 是否显示icon\n        icon: 'icon-warning', // icon的类型\n        isCustom: false, // 是否自定义\n        content: '<div>确定要执行这个操作?</div>', // 主体内容\n        isShowFooter: true, // 是否显示尾部\n        isShowConfirm: true, // 是否显示确认按钮\n        confirmContent: '确认', // 确认按钮的内容\n        isShowCancel: true, // 是否显示取消按钮\n        cancelContent: '取消', // 取消按钮的内容\n        isShowMask: true, // 是否显示遮罩\n        isHandHide: false // 是否手动隐藏(一般只用于点击确认时)\n    },\n    // 数据\n    data: {}\n});\n\n// (建)(覆)内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    var config = this.opts.config;\n    var positionLocation = 'g-dialog-confirm-wrap_' + config.positionLocation; // 弹窗的定位位置\n    // 弹窗结构\n    var html = this.renderConfirm();\n    this.moduleDom = applications.createElement({\n        style: config.moduleDomStyle,\n        customAttribute: config.moduleDomCustomAttribute,\n        attribute: {\n            className: 'g-dialog-confirm-wrap ' + positionLocation,\n            innerHTML: html\n        }\n    });\n};\n\n// 确认框\nSub.prototype.renderConfirm = function () {\n    var config = this.opts.config;\n    var htmlHeader = '';\n    if (config.isShowHeader) {\n        htmlHeader = '<div class=\"g-dialog-confirm-header\">' + config.headerContent + '</div>';\n    }\n    var htmlBody = '';\n    if (config.isShowBody) {\n        var htmlIcon = '';\n        if (config.isShowIcon) {\n            htmlIcon = '<div class=\"g-dialog-confirm-body-system-icon iconfont ' + config.icon + '\"></div>';\n        }\n        var bodyClass = 'g-dialog-confirm-body-system';\n        var bodyContent = '\\n            ' + htmlIcon + '\\n            <div class=\"g-dialog-confirm-body-system-text\">' + config.content + '</div>\\n        ';\n        if (config.isCustom) {\n            bodyClass = 'g-dialog-confirm-body-custom';\n            bodyContent = config.content;\n        }\n        htmlBody = '\\n            <div class=\"g-dialog-confirm-body\">\\n                <div class=\"' + bodyClass + '\">\\n                    ' + bodyContent + '\\n                </div>\\n            </div>\\n        ';\n    }\n    var htmlFooter = '';\n    if (config.isShowFooter) {\n        var htmlCancel = '';\n        if (config.isShowCancel) {\n            htmlCancel = '<div class=\"g-button g-button-cancel g-dialog-confirm-footer-cancel\">' + config.cancelContent + '</div>';\n        }\n        var htmlConfirm = '';\n        if (config.isShowConfirm) {\n            htmlConfirm = '<div class=\"g-button g-dialog-confirm-footer-confirm\">' + config.confirmContent + '</div>';\n        }\n        htmlFooter = '<div class=\"g-dialog-confirm-footer\">' + htmlCancel + htmlConfirm + '</div>';\n    }\n    var htmlClose = '';\n    if (config.isShowClose) {\n        htmlClose = '<div class=\"g-dialog-confirm-close\">' + config.closeContent + '</div>';\n    }\n    var htmlMask = '';\n    if (config.isShowMask) {\n        htmlMask = '<div class=\"g-mask\"></div>';\n    }\n    return '\\n        ' + htmlMask + '\\n        <div class=\"g-dialog-confirm\">\\n            ' + htmlHeader + '\\n            ' + htmlBody + '\\n            ' + htmlFooter + '\\n            ' + htmlClose + ' \\n        </div>\\n    ';\n};\n\n// (功)(覆)功能(覆盖超类型)\nSub.prototype.power = function () {\n    var self = this;\n    var config = this.opts.config;\n    var callback = this.opts.callback;\n    // 关闭\n    var close = this.moduleDom.querySelector('.g-dialog-confirm-close');\n    if (close) {\n        close.addEventListener('click', function () {\n            self.moduleDomHide();\n            callback.close();\n        });\n    }\n    // 取消\n    var cancel = this.moduleDom.querySelector('.g-dialog-confirm-footer-cancel');\n    if (cancel) {\n        cancel.addEventListener('click', function () {\n            self.moduleDomHide();\n            callback.cancel();\n        });\n    }\n    // 确认\n    var confirm = this.moduleDom.querySelector('.g-dialog-confirm-footer-confirm');\n    if (confirm) {\n        confirm.addEventListener('click', function () {\n            if (!config.isHandHide) {\n                self.moduleDomHide();\n            }\n            callback.confirm();\n        });\n    }\n};\n\nmodule.exports = Sub;\n\n/***/ })\n\n},[138]);\n\n\n// WEBPACK FOOTER //\n// js/pages/dev-globals.8414ba25ecf9f2bb8dfb.js","require('../../scss/pages/dev-globals.scss');\r\nconst Super = require('../pages-super/super');\r\n\r\nclass Sub extends Super {\r\n    // (功)(覆)功能(覆盖超类型)\r\n    power() {\r\n        const self = this;\r\n        const applications = self.applications;\r\n\r\n        // base函数测试\r\n        (function () {\r\n            // 测试全选\r\n            const SelectAll = applications.SelectAll;\r\n            new SelectAll({\r\n                items: '.g-checkbox-body-checkbox',\r\n                callback: {\r\n                    click: function (obj) {\r\n                        console.log(obj);\r\n                    },\r\n                },\r\n            });\r\n        }());\r\n\r\n        // 验证\r\n        (function () {\r\n            const ValidateInput = require('../components-dom/g-validate-form-hint');\r\n            const validateInput = new ValidateInput({element: '.js-validate-form'});\r\n            validateInput.setValidate('no-999', function (value) {\r\n                return Number(value) !== 999;\r\n            });\r\n        }());\r\n\r\n        // 弹窗测试\r\n        (function () {\r\n            const DialogConfirm = require('../components-dom/g-dialog-confirm');\r\n            const DialogAlert = require('../components-dom/g-dialog-alert');\r\n            document.querySelector('.js-button-dialog').addEventListener('click', function () {\r\n                new DialogConfirm({\r\n                    callback: {\r\n                        confirm: function () {\r\n                            new DialogAlert({config: {icon: 'icon-success', content: '已确认'}});\r\n                        },\r\n                        cancel: function () {\r\n                            new DialogAlert({config: {icon: 'icon-success', content: '已取消'}});\r\n                        },\r\n                        close: function () {\r\n                            new DialogAlert({config: {icon: 'icon-success', content: '已关闭'}});\r\n                        },\r\n                    },\r\n                });\r\n            });\r\n        }());\r\n    }\r\n}\r\n\r\nnew Sub();\r\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/pages/dev-globals.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst domAddPosition = require('zhf.dom-add-position');\nconst checkStr = tools.checkStr;\nconst getParent = applications.getParent;\nconst getDomArray = applications.getDomArray;\n\nfunction ValidateForm(json) {\n    this.opts = tools.extend({\n        element: '',\n        hintWrapClass: 'g-form', // 指定提示框的父级\n        fileActiveClass: 'g-upload_active', // 文件或者图片上传成功之后的class，做限制个数需要这个\n        isBindEvent: true, // 是否绑定事件\n    }, json);\n    this.init();\n}\n\nValidateForm.prototype.init = function () {\n    this.hintClass = 'g-validate-form-hint';\n    this.render();\n    if (this.opts.isBindEvent) {\n        this.power();\n    }\n};\nValidateForm.prototype.render = function () {\n    const self = this;\n    self.element = getDomArray(this.opts.element); // 为了兼容未来动态创建的元素，此方法会被多次调用，元素要重新获取。\n    self.element.forEach(function (v) {\n        if (!v.hintWrapDom) { // 为了兼容未来动态创建的元素，此方法会被多次调用，为了提高性能，所以这里不重新赋值，虽然此处可以重新赋值。\n            const hintWrapDom = self.getHintWrapDom(v);\n            if (hintWrapDom) {\n                domAddPosition(hintWrapDom, 'relative');\n                v.hintWrapDom = hintWrapDom;\n            }\n        }\n        if (!v.hintDom) { // 为了兼容未来动态创建的元素，此方法会被多次调用，但是这里却不能重新赋值，否则会导致引用消失，以至于renderHintAdd时修改hintDom内g-validate-form-hint-text的innerHTML失效。\n            v.hintDom = document.createElement('span');\n            v.hintDom.innerHTML = `\n                <span class=\"g-validate-form-hint-text\"></span>\n                <span class=\"g-validate-form-hint-icon\"></span>\n            `;\n            v.hintDom.classList.add(self.hintClass);\n        }\n    });\n};\nValidateForm.prototype.getHintWrapDom = function (input) {\n    const hintWrapClass = this.opts.hintWrapClass;\n    let parent = getParent(input, `.${hintWrapClass}`); // 把这个放上面，是为了少调用一次getParent方法，因为g-form布局用的居多，g-validate-form-hint-wrap没怎么使用。\n    if (!parent) {\n        parent = getParent(input, '.g-validate-form-hint-wrap');\n    }\n    if (!parent) {\n        parent = input.parentNode;\n    }\n    return parent;\n};\nValidateForm.prototype.renderHintAdd = function (opts = {}) {\n    const input = opts.input;\n    const hintDom = input.hintDom;\n    if (hintDom) {\n        hintDom.querySelector('.g-validate-form-hint-text').innerHTML = opts.txt;\n        const hintWrapDom = input.hintWrapDom;\n        const hintDomIsExist = hintWrapDom.querySelector(`.${this.hintClass}`);\n        if (hintWrapDom && !hintDomIsExist) {\n            // hintWrapDom.appendChild(hintDom);\n            hintWrapDom.insertBefore(hintDom, hintWrapDom.children[0]);\n        }\n    }\n};\nValidateForm.prototype.renderHintRemove = function (opts = {}) {\n    const input = opts.input;\n    const hintWrapDom = input.hintWrapDom;\n    const hintDom = hintWrapDom.querySelector(`.${this.hintClass}`);\n    if (hintWrapDom && hintDom) {\n        hintWrapDom.removeChild(hintDom);\n    }\n};\nValidateForm.prototype.validateInput = function (input) {\n    const self = this;\n    const opts = self.opts;\n    if (input.offsetWidth === 0) { // 不验证宽度为0的input(display为none时不验证)(只有没被隐藏的才进行验证)\n        return;\n    }\n    const validateType = input.dataset.validate || 'undefined';\n    const validateHintTxt = input.dataset.hint || 'undefined';\n    const type = validateType.split(' ');\n    const hintTxt = validateHintTxt.split(' ');\n    const hintWrapDom = input.hintWrapDom;\n    const inputType = input.type;\n    const inputName = input.name; // 这个不能使用，因为有些name名称是这种格式 hobby[] 此时通过name获取会报错 -> 纠正 其实不会报错 只需要 input[name=\"\"] 把变量放在双引号里拼接一下就行了\n    const isPassword = inputType === 'password';\n    const isRadio = inputType === 'radio';\n    const isCheckbox = inputType === 'checkbox';\n    const isFile = inputType === 'file';\n    let value = input.value;\n    if (isFile) { // 如果是file类型的input，值就是input身上的自定义属性data-value\n        value = input.dataset.value;\n    }\n    // 验证自定义的规则\n    const customValidateRule = input.customValidateRule || {};\n    Object.keys(customValidateRule).forEach((keys) => {\n        const obj = customValidateRule[keys];\n        obj.isValidateSuccess = obj.fn(value);\n    });\n    // 验证非自定义的规则\n    let isValidateSuccess = true; // 是否验证成功了，假设验证通过了。\n    type.forEach(function (v, i) {\n        if (isValidateSuccess && customValidateRule[v]) { // 验证通过了且自定义验证存在则校验自定义的规则是否通过了\n            if (isValidateSuccess && customValidateRule[v].isValidateSuccess) {\n                self.renderHintRemove({input: input});\n                isValidateSuccess = true;\n            } else {\n                self.renderHintAdd({txt: hintTxt[i], input: input});\n                isValidateSuccess = false;\n            }\n        }\n        if (isValidateSuccess && !customValidateRule[v]) { // 验证通过了且自定义验证不存在则校验非自定义的规则是否通过了\n            if (isValidateSuccess && v === 'no-empty') { // 设置了非空验证\n                let isEmpty = checkStr.isEmpty(value);\n                if (isPassword) { // input为password类型的进行特殊处理\n                    isEmpty = value === ''; // 因为密码可以输入空格，所以没必要去除首尾空格。\n                }\n                if (isRadio || isCheckbox) { // input为radio类型和input为checkbox类型的进行特殊处理（这两种类型只验证是否必填就够用了，file类型和select下拉框也是只验证必填就够用了。）\n                    const isChecked = hintWrapDom.querySelector(`input[name=\"${inputName}\"]:checked`);\n                    isEmpty = isChecked === null;\n                }\n                if (isEmpty) {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'no-zero') { // 设置了非零验证\n                if (checkStr.isZero(value)) {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-integer') { // 设置了正整数验证\n                if (checkStr.isPositiveInteger(value)) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-float') { // 设置了正浮点数验证\n                if (checkStr.isPositiveFloat(value)) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-phone') { // 设置了电话验证\n                if (checkStr.isPhoneNumEasy(value)) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-email') { // 设置了邮箱验证\n                if (checkStr.isEmail(value)) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-url') { // 设置了网址验证\n                if (checkStr.isUrl(value)) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n            const yesLimitLength = /yes-limit-length-(\\d+)/.exec(v);\n            if (isValidateSuccess && yesLimitLength) { // 设置了限制长度\n                const length = yesLimitLength[1];\n                let isPassLimitLength = value.length > length;\n                if (isCheckbox) { // input为checkbox类型的进行特殊处理\n                    const checkboxAll = hintWrapDom.querySelectorAll(`input[name=\"${inputName}\"]:checked`);\n                    isPassLimitLength = length >= checkboxAll.length;\n                }\n                if (isFile) { // input为file类型的进行特殊处理\n                    const fileAll = hintWrapDom.querySelectorAll(`.${opts.fileActiveClass}`); // 这个class应该放到opts里，是可配置的。\n                    isPassLimitLength = length >= fileAll.length;\n                }\n                if (isPassLimitLength) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n        }\n    });\n    input.isValidateSuccess = isValidateSuccess;\n};\nValidateForm.prototype.isAllPassValidate = function () {\n    const self = this;\n    self.render(); // 为了兼容未来动态创建的元素，这里需要重新渲染并绑定属性\n    let isValidateSuccess = true;\n    self.element.forEach(function (v) {\n        self.validateInput(v);\n        if (v.isValidateSuccess !== true) {\n            isValidateSuccess = false;\n        }\n    });\n    return isValidateSuccess;\n};\nValidateForm.prototype.power = function () {\n    const self = this;\n    const eventIsRepeat = {};\n    self.element.forEach(function (v) {\n        const eventsType = v.dataset.event || 'blur';\n        // js原生事件无法给未来动态创建的元素加事件，除非我用自己封装的那个事件委托进行绑定，但是代码上百行，还是直接用jq的吧。\n        // jq的事件委托很奇葩，如果input里有值，清空之后失去焦点会触发两次，没有值触发一次。\n        // 奇葩的原因是因为委托了blur和change事件，blur的时候如果value改变了，会触发blur和change，所以会触发两次，没毛病。\n        // jq的事件委托可以给未来动态创建的元素加事件，但是事件会被绑定多次，所以我定义了一个eventIsRepeat来进行过滤。\n        const name = eventsType + self.opts.element;\n        if (!eventIsRepeat[name]) {\n            eventIsRepeat[name] = true;\n            $(document).on(eventsType, self.opts.element, function () {\n                self.render(); // 为了兼容未来动态创建的元素，这里需要重新渲染并绑定属性\n                self.validateInput(this);\n            });\n        }\n    });\n};\n\n// 自定义验证规则\nValidateForm.prototype.setValidate = function (name, fn) {\n    this.element.forEach(function (v) {\n        if (!v.customValidateRule) {\n            v.customValidateRule = {}; // 自定义规则\n        }\n        v.customValidateRule[name] = {\n            fn: fn,\n            isValidateSuccess: false,\n        };\n    });\n};\n\nmodule.exports = ValidateForm;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-validate-form-hint.js","\"use strict\";var getDomArray=require(\"zhf.get-dom-array\"),DomPosition=require(\"zhf.dom-position\");function domAddPosition(o){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"relative\",t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],e=getDomArray(o)[0];e?t?e.style.position=i:new DomPosition(e).hasPosition()||(e.style.position=i):console.log(\"no find dom\")}module.exports=domAddPosition;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zhf.dom-add-position/dist/index.min.js\n// module id = 141\n// module chunks = 8","\"use strict\";var _createClass=function(){function t(t,i){for(var o=0;o<i.length;o++){var n=i[o];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,o,n){return o&&t(i.prototype,o),n&&t(i,n),i}}();function _classCallCheck(t,i){if(!(t instanceof i))throw new TypeError(\"Cannot call a class as a function\")}var getDomArray=require(\"zhf.get-dom-array\"),DomPosition=function(){function t(i){_classCallCheck(this,t);var o=getDomArray(i)[0];o?(this.dom=o,this.init()):console.log(\"no find dom\")}return _createClass(t,[{key:\"init\",value:function(){this.domHasPosition=!1,this.domPositionType=\"static\";var t=this.dom,i=getComputedStyle(t).position;\"static\"!==i&&\"\"!==i&&(this.domHasPosition=!0,this.domPositionType=i)}},{key:\"hasPosition\",value:function(t){return this.init(),void 0===t?this.domHasPosition:this.domPositionType===t}},{key:\"getPosition\",value:function(){return this.init(),this.domPositionType}},{key:\"setPosition\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"relative\",i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=this.dom;i?o.style.position=t:this.hasPosition()||(o.style.position=t)}}]),t}();module.exports=DomPosition;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zhf.dom-position/dist/index.min.js\n// module id = 142\n// module chunks = 8","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst Super = require('../components-dom-super/g-super'); // 超类型(子类型继承的对象)\n\n// 子类型\nconst Sub = tools.constructorInherit(Super, {\n    wrap: '.g-wrap',\n    // 回调\n    callback: {\n        // 确认\n        confirm: function () {\n        },\n        // 取消\n        cancel: function () {\n        },\n        // 关闭\n        close: function () {\n        },\n    },\n    // 配置\n    config: {\n        positionLocation: 'center', // 弹窗的定位位置('top'，'center'，'bottom')。positionMethod定位方式强制fixed。\n        isShowClose: true, // 是否显示关闭按钮\n        closeContent: '<div class=\"iconfont icon-close\"></div>', // 关闭按钮的内容\n        isShowHeader: true, // 是否显示头部\n        headerContent: '提示:', // 头部内容\n        isShowBody: true, // 是否显示主体\n        isShowIcon: false, // 是否显示icon\n        icon: 'icon-warning', // icon的类型\n        isCustom: false, // 是否自定义\n        content: '<div>确定要执行这个操作?</div>', // 主体内容\n        isShowFooter: true, // 是否显示尾部\n        isShowConfirm: true, // 是否显示确认按钮\n        confirmContent: '确认', // 确认按钮的内容\n        isShowCancel: true, // 是否显示取消按钮\n        cancelContent: '取消', // 取消按钮的内容\n        isShowMask: true, // 是否显示遮罩\n        isHandHide: false, // 是否手动隐藏(一般只用于点击确认时)\n    },\n    // 数据\n    data: {},\n});\n\n// (建)(覆)内部模块的创建(覆盖超类型)\nSub.prototype.moduleDomCreate = function () {\n    const config = this.opts.config;\n    const positionLocation = `g-dialog-confirm-wrap_${config.positionLocation}`;// 弹窗的定位位置\n    // 弹窗结构\n    const html = this.renderConfirm();\n    this.moduleDom = applications.createElement({\n        style: config.moduleDomStyle,\n        customAttribute: config.moduleDomCustomAttribute,\n        attribute: {\n            className: `g-dialog-confirm-wrap ${positionLocation}`,\n            innerHTML: html,\n        },\n    });\n};\n\n// 确认框\nSub.prototype.renderConfirm = function () {\n    const config = this.opts.config;\n    let htmlHeader = '';\n    if (config.isShowHeader) {\n        htmlHeader = `<div class=\"g-dialog-confirm-header\">${config.headerContent}</div>`;\n    }\n    let htmlBody = '';\n    if (config.isShowBody) {\n        let htmlIcon = '';\n        if (config.isShowIcon) {\n            htmlIcon = `<div class=\"g-dialog-confirm-body-system-icon iconfont ${config.icon}\"></div>`;\n        }\n        let bodyClass = 'g-dialog-confirm-body-system';\n        let bodyContent = `\n            ${htmlIcon}\n            <div class=\"g-dialog-confirm-body-system-text\">${config.content}</div>\n        `;\n        if (config.isCustom) {\n            bodyClass = 'g-dialog-confirm-body-custom';\n            bodyContent = config.content;\n        }\n        htmlBody = `\n            <div class=\"g-dialog-confirm-body\">\n                <div class=\"${bodyClass}\">\n                    ${bodyContent}\n                </div>\n            </div>\n        `;\n    }\n    let htmlFooter = '';\n    if (config.isShowFooter) {\n        let htmlCancel = '';\n        if (config.isShowCancel) {\n            htmlCancel = `<div class=\"g-button g-button-cancel g-dialog-confirm-footer-cancel\">${config.cancelContent}</div>`;\n        }\n        let htmlConfirm = '';\n        if (config.isShowConfirm) {\n            htmlConfirm = `<div class=\"g-button g-dialog-confirm-footer-confirm\">${config.confirmContent}</div>`;\n        }\n        htmlFooter = `<div class=\"g-dialog-confirm-footer\">${htmlCancel}${htmlConfirm}</div>`;\n    }\n    let htmlClose = '';\n    if (config.isShowClose) {\n        htmlClose = `<div class=\"g-dialog-confirm-close\">${config.closeContent}</div>`;\n    }\n    let htmlMask = '';\n    if (config.isShowMask) {\n        htmlMask = `<div class=\"g-mask\"></div>`;\n    }\n    return `\n        ${htmlMask}\n        <div class=\"g-dialog-confirm\">\n            ${htmlHeader}\n            ${htmlBody}\n            ${htmlFooter}\n            ${htmlClose} \n        </div>\n    `;\n};\n\n// (功)(覆)功能(覆盖超类型)\nSub.prototype.power = function () {\n    const self = this;\n    const config = this.opts.config;\n    const callback = this.opts.callback;\n    // 关闭\n    const close = this.moduleDom.querySelector('.g-dialog-confirm-close');\n    if (close) {\n        close.addEventListener('click', function () {\n            self.moduleDomHide();\n            callback.close();\n        });\n    }\n    // 取消\n    const cancel = this.moduleDom.querySelector('.g-dialog-confirm-footer-cancel');\n    if (cancel) {\n        cancel.addEventListener('click', function () {\n            self.moduleDomHide();\n            callback.cancel();\n        });\n    }\n    // 确认\n    const confirm = this.moduleDom.querySelector('.g-dialog-confirm-footer-confirm');\n    if (confirm) {\n        confirm.addEventListener('click', function () {\n            if (!config.isHandHide) {\n                self.moduleDomHide();\n            }\n            callback.confirm();\n        });\n    }\n};\n\nmodule.exports = Sub;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-dialog-confirm.js"],"sourceRoot":""}
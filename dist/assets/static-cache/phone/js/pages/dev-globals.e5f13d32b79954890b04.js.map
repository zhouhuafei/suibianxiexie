{"version":3,"sources":["webpack:///js/pages/dev-globals.e5f13d32b79954890b04.js","webpack:///./app/phone/assets/js/pages/dev-globals.js","webpack:///./app/phone/assets/js/components-dom/g-validate-form-hint.js"],"names":["webpackJsonp","134","module","exports","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","Super","_Super","Sub","this","getPrototypeOf","apply","arguments","applications","SelectAll","items","callback","click","obj","console","log","element","setValidate","Number","Dialog","document","querySelector","addEventListener","confirm","config","alert","icon","content","cancel","close","type","135","136","ValidateForm","json","opts","tools","extend","hintClass","hintWrapClass","fileActiveClass","getDomArray","init","domAddPosition","checkStr","getParent","render","power","forEach","v","hintWrapDom","getHintWrapDom","customValidateRule","hintDom","createElement","classList","add","input","parent","parentNode","renderHintAdd","undefined","offsetWidth","innerHTML","txt","hintDomIsExist","appendChild","renderHintRemove","removeChild","validateInput","validateType","dataset","validate","validateHintTxt","hint","split","hintTxt","inputType","isPassword","name","isRadio","isCheckbox","isFile","keys","isValidateSuccess","fn","isEmpty","isZero","isPositiveInteger","yesLimitLength","exec","isPassLimitLength","querySelectorAll","isAllPassValidate","eventsType","event"],"mappings":"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","file":"js/pages/dev-globals.e5f13d32b79954890b04.js","sourcesContent":["webpackJsonp([9],{\n\n/***/ 134:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n__webpack_require__(135);\nvar Super = __webpack_require__(3);\n\nvar Sub = function (_Super) {\n    _inherits(Sub, _Super);\n\n    function Sub() {\n        _classCallCheck(this, Sub);\n\n        return _possibleConstructorReturn(this, (Sub.__proto__ || Object.getPrototypeOf(Sub)).apply(this, arguments));\n    }\n\n    _createClass(Sub, [{\n        key: 'power',\n\n        // (功)(覆)功能(覆盖超类型)\n        value: function power() {\n            var self = this;\n            var applications = self.applications;\n\n            // base函数测试\n            (function () {\n                // 测试全选\n                var SelectAll = applications.SelectAll;\n                new SelectAll({\n                    items: '.g-checkbox-body-checkbox',\n                    callback: {\n                        click: function click(obj) {\n                            console.log(obj);\n                        }\n                    }\n                });\n            })();\n\n            // 验证\n            (function () {\n                var ValidateInput = __webpack_require__(136);\n                var validateInput = new ValidateInput({ element: '.js-validate-form' });\n                validateInput.setValidate('no-999', function (value) {\n                    return Number(value) !== 999;\n                });\n            })();\n\n            // 弹窗测试\n            (function () {\n                var Dialog = __webpack_require__(11);\n                document.querySelector('.js-button-dialog').addEventListener('click', function () {\n                    new Dialog({\n                        callback: {\n                            confirm: function confirm() {\n                                new Dialog({ config: { alert: { icon: 'icon-success', content: '已确认' } } });\n                            },\n                            cancel: function cancel() {\n                                new Dialog({ config: { alert: { icon: 'icon-success', content: '已取消' } } });\n                            },\n                            close: function close() {\n                                new Dialog({ config: { alert: { icon: 'icon-success', content: '已关闭' } } });\n                            }\n                        },\n                        config: {\n                            type: 'confirm'\n                        }\n                    });\n                });\n            })();\n        }\n    }]);\n\n    return Sub;\n}(Super);\n\nnew Sub();\n\n/***/ }),\n\n/***/ 135:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 136:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar tools = __webpack_require__(0); // 工具方法集合\nvar applications = __webpack_require__(1); // 应用方法集合\nvar domAddPosition = __webpack_require__(18);\nvar checkStr = tools.checkStr;\nvar getParent = applications.getParent;\nvar getDomArray = applications.getDomArray;\n\nfunction ValidateForm(json) {\n    this.opts = tools.extend({\n        element: '',\n        hintClass: 'g-validate-form-hint',\n        hintWrapClass: 'g-form', // 指定提示框的父级\n        fileActiveClass: 'g-upload-active' // 文件或者图片上传成功之后的class，做限制个数需要这个\n    }, json);\n    if (this.opts.element) {\n        this.element = getDomArray(this.opts.element);\n    }\n    if (this.element.length) {\n        this.init();\n    }\n}\n\nValidateForm.prototype.init = function () {\n    this.render();\n    this.power();\n};\nValidateForm.prototype.render = function () {\n    var self = this;\n    self.element.forEach(function (v) {\n        var hintWrapDom = self.getHintWrapDom(v);\n        if (hintWrapDom) {\n            domAddPosition(hintWrapDom, 'relative');\n            v.hintWrapDom = hintWrapDom;\n        }\n        v.customValidateRule = {}; // 自定义规则\n        v.hintDom = document.createElement('span');\n        v.hintDom.classList.add(self.opts.hintClass);\n    });\n};\nValidateForm.prototype.getHintWrapDom = function (input) {\n    var hintWrapClass = this.opts.hintWrapClass;\n    var parent = getParent(input, '.' + hintWrapClass); // 把这个放上面，是为了少调用一次getParent方法，因为g-form布局用的居多，g-validate-form-hint-wrap没怎么使用。\n    if (!parent) {\n        parent = getParent(input, '.g-validate-form-hint-wrap');\n    }\n    if (!parent) {\n        parent = input.parentNode;\n    }\n    return parent;\n};\nValidateForm.prototype.renderHintAdd = function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // 只有没被隐藏的才进行验证\n    var input = opts.input;\n    var hintDom = input.hintDom;\n    if (input.offsetWidth && hintDom) {\n        hintDom.innerHTML = opts.txt;\n        var hintWrapDom = input.hintWrapDom;\n        var hintDomIsExist = hintWrapDom.querySelector('.' + this.opts.hintClass);\n        if (hintWrapDom && !hintDomIsExist) {\n            hintWrapDom.appendChild(hintDom);\n        }\n    }\n};\nValidateForm.prototype.renderHintRemove = function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var input = opts.input;\n    var hintWrapDom = input.hintWrapDom;\n    var hintDom = hintWrapDom.querySelector('.' + this.opts.hintClass);\n    if (hintWrapDom && hintDom) {\n        hintWrapDom.removeChild(hintDom);\n    }\n};\nValidateForm.prototype.validateInput = function (input) {\n    var self = this;\n    var opts = self.opts;\n    var validateType = input.dataset.validate || 'undefined';\n    var validateHintTxt = input.dataset.hint || 'undefined';\n    var type = validateType.split(' ');\n    var hintTxt = validateHintTxt.split(' ');\n    var hintWrapDom = input.hintWrapDom;\n    var inputType = input.type;\n    var inputName = input.name; // 这个不能使用，因为有些name名称是这种格式 hobby[] 此时通过name获取会报错\n    var isPassword = inputType === 'password';\n    var isRadio = inputType === 'radio';\n    var isCheckbox = inputType === 'checkbox';\n    var isFile = inputType === 'file';\n    var value = input.value;\n    if (isFile) {\n        // 如果是file类型的input，值就是input身上的自定义属性data-value\n        value = input.dataset.value;\n    }\n    // 验证自定义的规则\n    var customValidateRule = input.customValidateRule;\n    Object.keys(customValidateRule).forEach(function (keys) {\n        var obj = customValidateRule[keys];\n        obj.isValidateSuccess = obj.fn(value);\n    });\n    // 验证非自定义的规则\n    var isValidateSuccess = true; // 是否验证成功了，假设验证通过了。\n    type.forEach(function (v, i) {\n        if (isValidateSuccess && customValidateRule[v]) {\n            // 验证通过了且自定义验证存在则校验自定义的规则是否通过了\n            if (isValidateSuccess && customValidateRule[v].isValidateSuccess) {\n                self.renderHintRemove({ input: input });\n                isValidateSuccess = true;\n            } else {\n                self.renderHintAdd({ txt: hintTxt[i], input: input });\n                isValidateSuccess = false;\n            }\n        }\n        if (isValidateSuccess && !customValidateRule[v]) {\n            // 验证通过了且自定义验证不存在则校验非自定义的规则是否通过了\n            if (isValidateSuccess && v === 'no-empty') {\n                // 设置了非空验证\n                var isEmpty = checkStr.isEmpty(value);\n                if (isPassword) {\n                    // input为password类型的进行特殊处理\n                    isEmpty = value === ''; // 因为密码可以输入空格，所以没必要去除首尾空格。\n                }\n                if (isRadio || isCheckbox) {\n                    // input为radio类型和input为checkbox类型的进行特殊处理（这两种类型只验证是否必填就够用了，file类型和select下拉框也是只验证必填就够用了。）\n                    var isChecked = hintWrapDom.querySelector('input:checked');\n                    isEmpty = isChecked === null;\n                }\n                if (isEmpty) {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'no-zero') {\n                // 设置了非零验证\n                if (checkStr.isZero(value)) {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-integer') {\n                // 设置了正整数验证\n                if (checkStr.isPositiveInteger(value)) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n            var yesLimitLength = /yes-limit-length-(\\d+)/.exec(v);\n            if (isValidateSuccess && yesLimitLength) {\n                // 设置了限制长度\n                var length = yesLimitLength[1];\n                var isPassLimitLength = value.length > length;\n                if (isCheckbox) {\n                    // input为checkbox类型的进行特殊处理\n                    var checkboxAll = hintWrapDom.querySelectorAll('input:checked');\n                    isPassLimitLength = length >= checkboxAll.length;\n                }\n                if (isFile) {\n                    // input为file类型的进行特殊处理\n                    var fileAll = hintWrapDom.querySelectorAll('.' + opts.fileActiveClass); // 这个class应该放到opts里，是可配置的。\n                    isPassLimitLength = length >= fileAll.length;\n                }\n                if (isPassLimitLength) {\n                    self.renderHintRemove({ input: input });\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({ txt: hintTxt[i], input: input });\n                    isValidateSuccess = false;\n                }\n            }\n        }\n    });\n    input.isValidateSuccess = isValidateSuccess;\n};\nValidateForm.prototype.isAllPassValidate = function () {\n    var self = this;\n    var isValidateSuccess = true;\n    self.element.forEach(function (v) {\n        self.validateInput(v);\n        if (v.isValidateSuccess !== true) {\n            isValidateSuccess = false;\n        }\n    });\n    return isValidateSuccess;\n};\nValidateForm.prototype.power = function () {\n    var self = this;\n    self.element.forEach(function (v) {\n        var eventsType = v.dataset.event || 'blur';\n        v.addEventListener(eventsType, function () {\n            self.validateInput(this);\n        });\n    });\n};\n\n// 自定义验证规则\nValidateForm.prototype.setValidate = function (name, fn) {\n    this.element.forEach(function (v) {\n        v.customValidateRule[name] = {\n            fn: fn,\n            isValidateSuccess: false\n        };\n    });\n};\n\nmodule.exports = ValidateForm;\n\n/***/ })\n\n},[134]);\n\n\n// WEBPACK FOOTER //\n// js/pages/dev-globals.e5f13d32b79954890b04.js","require('../../scss/pages/dev-globals.scss');\nconst Super = require('../pages-super/super');\n\nclass Sub extends Super {\n    // (功)(覆)功能(覆盖超类型)\n    power() {\n        const self = this;\n        const applications = self.applications;\n\n        // base函数测试\n        (function () {\n            // 测试全选\n            const SelectAll = applications.SelectAll;\n            new SelectAll({\n                items: '.g-checkbox-body-checkbox',\n                callback: {\n                    click: function (obj) {\n                        console.log(obj);\n                    },\n                },\n            });\n        }());\n\n        // 验证\n        (function () {\n            const ValidateInput = require('../components-dom/g-validate-form-hint');\n            const validateInput = new ValidateInput({element: '.js-validate-form'});\n            validateInput.setValidate('no-999', function (value) {\n                return Number(value) !== 999;\n            });\n        }());\n\n        // 弹窗测试\n        (function () {\n            const Dialog = require('../components-dom/g-dialog');\n            document.querySelector('.js-button-dialog').addEventListener('click', function () {\n                new Dialog({\n                    callback: {\n                        confirm: function () {\n                            new Dialog({config: {alert: {icon: 'icon-success', content: '已确认'}}});\n                        },\n                        cancel: function () {\n                            new Dialog({config: {alert: {icon: 'icon-success', content: '已取消'}}});\n                        },\n                        close: function () {\n                            new Dialog({config: {alert: {icon: 'icon-success', content: '已关闭'}}});\n                        },\n                    },\n                    config: {\n                        type: 'confirm',\n                    },\n                });\n            });\n        }());\n    }\n}\n\nnew Sub();\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/pages/dev-globals.js","const tools = require('zhf.tools'); // 工具方法集合\nconst applications = require('zhf.applications'); // 应用方法集合\nconst domAddPosition = require('zhf.dom-add-position');\nconst checkStr = tools.checkStr;\nconst getParent = applications.getParent;\nconst getDomArray = applications.getDomArray;\n\nfunction ValidateForm(json) {\n    this.opts = tools.extend({\n        element: '',\n        hintClass: 'g-validate-form-hint',\n        hintWrapClass: 'g-form', // 指定提示框的父级\n        fileActiveClass: 'g-upload-active', // 文件或者图片上传成功之后的class，做限制个数需要这个\n    }, json);\n    if (this.opts.element) {\n        this.element = getDomArray(this.opts.element);\n    }\n    if (this.element.length) {\n        this.init();\n    }\n}\n\nValidateForm.prototype.init = function () {\n    this.render();\n    this.power();\n};\nValidateForm.prototype.render = function () {\n    const self = this;\n    self.element.forEach(function (v) {\n        const hintWrapDom = self.getHintWrapDom(v);\n        if (hintWrapDom) {\n            domAddPosition(hintWrapDom, 'relative');\n            v.hintWrapDom = hintWrapDom;\n        }\n        v.customValidateRule = {}; // 自定义规则\n        v.hintDom = document.createElement('span');\n        v.hintDom.classList.add(self.opts.hintClass);\n    });\n};\nValidateForm.prototype.getHintWrapDom = function (input) {\n    const hintWrapClass = this.opts.hintWrapClass;\n    let parent = getParent(input, `.${hintWrapClass}`); // 把这个放上面，是为了少调用一次getParent方法，因为g-form布局用的居多，g-validate-form-hint-wrap没怎么使用。\n    if (!parent) {\n        parent = getParent(input, '.g-validate-form-hint-wrap');\n    }\n    if (!parent) {\n        parent = input.parentNode;\n    }\n    return parent;\n};\nValidateForm.prototype.renderHintAdd = function (opts = {}) {\n    // 只有没被隐藏的才进行验证\n    const input = opts.input;\n    const hintDom = input.hintDom;\n    if (input.offsetWidth && hintDom) {\n        hintDom.innerHTML = opts.txt;\n        const hintWrapDom = input.hintWrapDom;\n        const hintDomIsExist = hintWrapDom.querySelector(`.${this.opts.hintClass}`);\n        if (hintWrapDom && !hintDomIsExist) {\n            hintWrapDom.appendChild(hintDom);\n        }\n    }\n};\nValidateForm.prototype.renderHintRemove = function (opts = {}) {\n    const input = opts.input;\n    const hintWrapDom = input.hintWrapDom;\n    const hintDom = hintWrapDom.querySelector(`.${this.opts.hintClass}`);\n    if (hintWrapDom && hintDom) {\n        hintWrapDom.removeChild(hintDom);\n    }\n};\nValidateForm.prototype.validateInput = function (input) {\n    const self = this;\n    const opts = self.opts;\n    const validateType = input.dataset.validate || 'undefined';\n    const validateHintTxt = input.dataset.hint || 'undefined';\n    const type = validateType.split(' ');\n    const hintTxt = validateHintTxt.split(' ');\n    const hintWrapDom = input.hintWrapDom;\n    const inputType = input.type;\n    const inputName = input.name; // 这个不能使用，因为有些name名称是这种格式 hobby[] 此时通过name获取会报错\n    const isPassword = inputType === 'password';\n    const isRadio = inputType === 'radio';\n    const isCheckbox = inputType === 'checkbox';\n    const isFile = inputType === 'file';\n    let value = input.value;\n    if (isFile) { // 如果是file类型的input，值就是input身上的自定义属性data-value\n        value = input.dataset.value;\n    }\n    // 验证自定义的规则\n    const customValidateRule = input.customValidateRule;\n    Object.keys(customValidateRule).forEach((keys) => {\n        const obj = customValidateRule[keys];\n        obj.isValidateSuccess = obj.fn(value);\n    });\n    // 验证非自定义的规则\n    let isValidateSuccess = true; // 是否验证成功了，假设验证通过了。\n    type.forEach(function (v, i) {\n        if (isValidateSuccess && customValidateRule[v]) { // 验证通过了且自定义验证存在则校验自定义的规则是否通过了\n            if (isValidateSuccess && customValidateRule[v].isValidateSuccess) {\n                self.renderHintRemove({input: input});\n                isValidateSuccess = true;\n            } else {\n                self.renderHintAdd({txt: hintTxt[i], input: input});\n                isValidateSuccess = false;\n            }\n        }\n        if (isValidateSuccess && !customValidateRule[v]) { // 验证通过了且自定义验证不存在则校验非自定义的规则是否通过了\n            if (isValidateSuccess && v === 'no-empty') { // 设置了非空验证\n                let isEmpty = checkStr.isEmpty(value);\n                if (isPassword) { // input为password类型的进行特殊处理\n                    isEmpty = value === ''; // 因为密码可以输入空格，所以没必要去除首尾空格。\n                }\n                if (isRadio || isCheckbox) { // input为radio类型和input为checkbox类型的进行特殊处理（这两种类型只验证是否必填就够用了，file类型和select下拉框也是只验证必填就够用了。）\n                    const isChecked = hintWrapDom.querySelector(`input:checked`);\n                    isEmpty = isChecked === null;\n                }\n                if (isEmpty) {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'no-zero') { // 设置了非零验证\n                if (checkStr.isZero(value)) {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                } else {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                }\n            }\n            if (isValidateSuccess && v === 'yes-positive-integer') { // 设置了正整数验证\n                if (checkStr.isPositiveInteger(value)) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n            const yesLimitLength = /yes-limit-length-(\\d+)/.exec(v);\n            if (isValidateSuccess && yesLimitLength) { // 设置了限制长度\n                const length = yesLimitLength[1];\n                let isPassLimitLength = value.length > length;\n                if (isCheckbox) { // input为checkbox类型的进行特殊处理\n                    const checkboxAll = hintWrapDom.querySelectorAll(`input:checked`);\n                    isPassLimitLength = length >= checkboxAll.length;\n                }\n                if (isFile) { // input为file类型的进行特殊处理\n                    const fileAll = hintWrapDom.querySelectorAll(`.${opts.fileActiveClass}`); // 这个class应该放到opts里，是可配置的。\n                    isPassLimitLength = length >= fileAll.length;\n                }\n                if (isPassLimitLength) {\n                    self.renderHintRemove({input: input});\n                    isValidateSuccess = true;\n                } else {\n                    self.renderHintAdd({txt: hintTxt[i], input: input});\n                    isValidateSuccess = false;\n                }\n            }\n        }\n    });\n    input.isValidateSuccess = isValidateSuccess;\n};\nValidateForm.prototype.isAllPassValidate = function () {\n    const self = this;\n    let isValidateSuccess = true;\n    self.element.forEach(function (v) {\n        self.validateInput(v);\n        if (v.isValidateSuccess !== true) {\n            isValidateSuccess = false;\n        }\n    });\n    return isValidateSuccess;\n};\nValidateForm.prototype.power = function () {\n    const self = this;\n    self.element.forEach(function (v) {\n        const eventsType = v.dataset.event || 'blur';\n        v.addEventListener(eventsType, function () {\n            self.validateInput(this);\n        });\n    });\n};\n\n// 自定义验证规则\nValidateForm.prototype.setValidate = function (name, fn) {\n    this.element.forEach(function (v) {\n        v.customValidateRule[name] = {\n            fn: fn,\n            isValidateSuccess: false,\n        };\n    });\n};\n\nmodule.exports = ValidateForm;\n\n\n\n// WEBPACK FOOTER //\n// ./app/phone/assets/js/components-dom/g-validate-form-hint.js"],"sourceRoot":""}